{"remainingRequest":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/night-owl.vue?vue&type=template&id=9e396248&","dependencies":[{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/night-owl.vue","mtime":1655365184366},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655365183723},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js","mtime":1655365183722}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ1BvcnRmb2xpb1BpZWNlJyxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJ0aXRsZSJ9LFtfYygnaDEnLFtfdm0uX3YoIk5pZ2h0IE93bCIpXSksX2MoJ3AnLHtzdGF0aWNDbGFzczoic3ViaGVhZCJ9LFtfdm0uX3YoIktlZXBpbmcgU3R1ZGVudHMgU2FmZSBBdCBOaWdodCIpXSksX2MoJ2hyJyldKSxfYygncCcsW192bS5fdigiIFRoaXMgcHJvamVjdCBzcGFubmVkIDExIHdlZWtzIGluIG91ciBIQ0RFIDMxOCAoSW50cm9kdWN0aW9uIHRvIFVzZXIgQ2VudGVyZWQgRGVzaWduKSBjb3Vyc2UsIGluIEF1dHVtbiAyMDE5LiBBcyBhIHRlYW0gb2YgNCwgd2UgYXBwbGllZCB0aGUgdXNlciBjZW50ZXJlZCBkZXNpZ24gcHJvY2VzcyB0byB0aGUgcHJvYmxlbSBhcmVhIG9mIHRoZSBkYW5nZXIgb2Ygd2Fsa2luZyBhbG9uZSBhdCBuaWdodCBmb3Igc3R1ZGVudHMuIFRoZSBwcm9jZXNzIGN1bG1pbmF0ZWQgaW4gYSBtb2JpbGUgYXBwbGljYXRpb24gY2FsbGVkIE5pZ2h0IE93bCB0aGF0IGdpdmVzIHN0dWRlbnRzIGNvbmZpZGVuY2UgYW5kIGNvbnRyb2wgd2hlbiB3YWxraW5nIGFsb25lIGF0IG5pZ2h0LiAiKV0pLF9jKCdoMicsW192bS5fdigiUFJPQkxFTSBTVEFURU1FTlQiKV0pLF9jKCdwJyxbX3ZtLl92KCIgVW5pdmVyc2l0eSBEaXN0cmljdCBpcyBrbm93biB0byBiZSBhIHNrZXRjaHkgbmVpZ2hib3Job29kLiBGb3IgZXhhbXBsZSwgdGhlIFNhZmV3YXkgbm9ydGh3ZXN0IG9mIGNhbXB1cyBpcyBmb25kbHkgY2FsbGVkIOKAnFNrZXRjaHdheeKAnSBieSBzdHVkZW50cy4gVGhpcyBicmluZ3MgdXAgdGhlIGNvbmNlcm4gdGhhdCB3YWxraW5nIG5lYXIgY2FtcHVzIGF0IG5pZ2h0IGNhbiBiZSBkYW5nZXJvdXMgZm9yIHN0dWRlbnRzOyBzdHVkZW50cyBzaG91bGQgbm90IGhhdmUgdG8gYmUgY29uY2VybmVkIHdpdGggdGhlaXIgc2FmZXR5IHdoZW4gd2Fsa2luZyBhcm91bmQgdGhlaXIgdW5pdmVyc2l0eS4gVGhpcyBwcm9ibGVtIHJlc29uYXRlcyB3aXRoIG91ciB0ZWFtIGFuZCBwZWVycywgd2hpY2ggaXMgd2h5IHdlIHdhbnRlZCB0byB0YWNrbGUgdGhlIGFyZWEgb2YgaG93IHRvIGhlbHAgc3R1ZGVudHMgZmVlbCBzYWZlIGFuZCBjb25maWRlbnQgd2Fsa2luZyBuZWFyIFVX4oCZcyBjYW1wdXMgZHVyaW5nIG5pZ2h0LuKAnSAiKV0pLF9jKCdoMicsW192bS5fdigiSU5URVJWSUVXUyIpXSksX2MoJ3AnLFtfdm0uX3YoIiBPdXIgcmVzZWFyY2ggY29uc2lzdGVkIG9mIHRocmVlIGRpZmZlcmVudCBtZXRob2RzOiBzZW1pLXN0cnVjdHVyZWQgaW50ZXJ2aWV3LCDigJxmbHkgb24gdGhlIHdhbGzigJ0gb2JzZXJ2YXRpb24sIGFuZCBjb21wZXRpdGl2ZSBhbmFseXNpcy4gVGhyb3VnaCB0aGVzZSBtZXRob2RzLCB3ZSBsZWFybmVkIG1vcmUgYWJvdXQgb3VyIHVzZXIgZ3JvdXAgYW5kIHRoZWlyIGdvYWxzIGFuZCBwYWluIHBvaW50cyBhcyB3ZWxsIGFzIG90aGVyIHByb2R1Y3RzIGFscmVhZHkgb24gdGhlIG1hcmtldC4gRWFjaCB0ZWFtIG1lbWJlciBjb25kdWN0ZWQgYSBvbmUtb24tb25lIGludGVydmlldyB3aXRoIGEgc3R1ZGVudCBhdCB0aGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIHRoYXQgd2Fsa3MgZHVyaW5nIGR1c2sgb3IgYXQgbmlnaHQgYXQgbGVhc3QgNCB0aW1lcyBhIG1vbnRoLiBXZSB0aGVuIHJlZ3JvdXBlZCBhbmQgc3ludGhlc2l6ZWQgb3VyIGZpbmRpbmdzIGludG8ga2V5IHRha2Vhd2F5cyB0aGF0IHdvdWxkIGhlbHAgdXMgZGVmaW5lIG91ciBwcm9ibGVtIHNwYWNlIGFuZCB1c2VyIGdyb3VwLiAiKV0pLF9jKCdoMycsW192bS5fdigiS2V5IFRha2Vhd2F5czoiKV0pLF9jKCd1bCcsW19jKCdsaScsW192bS5fdigiIFRoZXkgZmVsdCBtb3JlIGNvbWZvcnRhYmxlIHRhbGtpbmcgd2l0aCBhIGZyaWVuZCBvbiB0aGUgcGhvbmUgd2hlbiB3YWxraW5nIGFsb25lICIpXSksX2MoJ2xpJyxbX3ZtLl92KCJXYWxraW5nIGhvbWUgYWxvbmUgaXMgdW5hdm9pZGFibGUiKV0pLF9jKCdsaScsW192bS5fdigiVGhleSBrbm93IGFib3V0IFVXIHNhZmV0eSwgYnV0IGRvZXNu4oCZdCBrbm93IGhvdyBpdCB3b3JrcyIpXSksX2MoJ2xpJyxbX3ZtLl92KCJUaGV5IGFyZSB2ZXJ5IGF3YXJlIG9mIHRoZWlyIHN1cnJvdW5kaW5ncyIpXSldKSxfYygnaDMnLFtfdm0uX3YoIkluZGl2aWR1YWwgSW50ZXJ2aWV3czoiKV0pLF9jKCd1bCcsW19jKCdsaScsW19jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xVmFWRXk0VXBLRDFqcExScWxPcVJBcmtodW5EZ2NpSm4vdmlldyIsInRhcmdldCI6Il9ibGFuayJ9fSxbX3ZtLl92KCJNYXlhJ3MgSW50ZXJ2aWV3cyIpXSldKSxfYygnbGknLFtfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMUNaTG9fN1F6YnQtak5xd3haRlNlS0kwR0VwRnhFWHJ6L3ZpZXciLCJ0YXJnZXQiOiJfYmxhbmsifX0sW192bS5fdigiVmFsZXJpZSdzIEludGVydmlld3MiKV0pXSksX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzFmVTBNd2JqSU5hX2JFc1d4MU54RFAzb3pYTkdwbDhHYi92aWV3IiwidGFyZ2V0IjoiX2JsYW5rIn19LFtfdm0uX3YoIlBldGVyJ3MgSW50ZXJ2aWV3cyIpXSldKSxfYygnbGknLFtfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMW9QaV8zU2hyTGwybW9xRXJ5bkdhUEkwNmJLM2JsclU1L3ZpZXciLCJ0YXJnZXQiOiJfYmxhbmsifX0sW192bS5fdigiTGlhJ3MgSW50ZXJ2aWV3cyIpXSldKV0pLF9jKCdoMicsW192bS5fdigiT0JTRVJWQVRJT05TIildKSxfYygncCcsW192bS5fdigiIE5leHQsIGFzIGEgdGVhbSB3ZSBwZXJmb3JtZWQgYSDigJxmbHkgb24gdGhlIHdhbGzigJ0gb2JzZXJ2YXRpb24gb24gdGhlIEF2ZS4gVGhlIGdvYWwgb2YgdGhpcyBzdHVkeSB3YXMgdG8gb2JzZXJ2ZSBhbmQgaW52ZXN0aWdhdGUgdGhlIGFjdGlvbnMgYW5kIGJlaGF2aW9ycyBvZiBzdHVkZW50cyB3YWxraW5nIGluIHRoZSBVIERpc3RyaWN0IGF0IG5pZ2h0LiAiKV0pLF9jKCdpbWcnLHthdHRyczp7InNyYyI6ImFzc2V0cy9uaWdodC1vd2wvc3RyZWV0LnBuZyIsImFsdCI6InRoZSBjb3JuZXIgb2YgNDV0aCBhbmQgVW5pdmVyc2l0eSBBdmUgaW4gU2VhdHRsZSdzIFVuaXZlcnNpdHkgRGlzdHJpY3QifX0pLF9jKCdoMycsW192bS5fdigiS2V5IEZpbmRpbmdzOiIpXSksX2MoJ3VsJyxbX2MoJ2xpJyxbX3ZtLl92KCJVc2VycyB3ZXJlIGludGVyYWN0aW5nIHdpdGggdGhlaXIgcGhvbmUgaW4gc29tZSB3YXkiKV0pLF9jKCdsaScsW192bS5fdigiVXNlcnMgd2Fsa2luZyBhbG9uZSBkaWRu4oCZdCBzZWVtIHNjYXJlZCIpXSksX2MoJ2xpJyxbX3ZtLl92KCJNYW55IHVzZXJzIHdvcmUgZWFyYnVkcyIpXSldKSxfYygnYScse3N0YXRpY0NsYXNzOiJ5ZWV0IixhdHRyczp7ImhyZWYiOiJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzFibkM0LUk4U01iRXRjU0VTVHZWRm5qSzNKSFYzdGY5Vi92aWV3IiwidGFyZ2V0IjoiX2JsYW5rIn19LFtfdm0uX3YoIkZpbmQgdGhlIGZ1bGwgb2JzZXJ2YXRpb24gZG9jdW1lbnQgaGVyZSIpXSksX2MoJ2gyJyxbX3ZtLl92KCJDT01QRVRJVElWRSBBTkFMWVNJUyIpXSksX2MoJ3AnLFtfdm0uX3YoIiBFYWNoIHRlYW0gbWVtYmVyIGNvbmR1Y3RlZCBvbmUgY29tcGV0aXRpdmUgYW5hbHlzaXMgb24gYW4gZXhpc3Rpbmcgc2FmZXR5IGFwcC4gVGhpcyBhbGxvd2VkIHVzIHRvIHVuZGVyc3RhbmQgaG93IGV4aXN0aW5nIHByb2R1Y3RzIG9uIHRoZSBtYXJrZXQgbWVldCB1c2Vyc+KAmSBuZWVkcyBhbmQgaG93IHRoZXkgY291bGQgYmUgaW1wcm92ZWQuIFdlIGFuYWx5emVkIHRoZSBhcHBzIEJTYWZlLCBDaXJjbGUgb2YgNiwgU2VrdXJhLCBhbmQgTm9vbmxpZ2h0LiBPdmVyYWxsLCB0aGUgYXBwcyBhbGwgaGFkIHN0cmVhbWxpbmVkIGRlc2lnbnMgdGhhdCBnZW5lcmFsbHkgbWFkZSB1c2VycyBmZWVsIHNhZmUsIGJ1dCBhbHNvIGhhZCBzaG9ydGNvbWluZ3Mgc3VjaCBhcyBjb25mdXNpbmcgZmVhdHVyZXMgYW5kIGFsbG93aW5nIHVzZXJzIHRvIGVhc2lseSB0cmlnZ2VyIGVtZXJnZW5jeSBzZXJ2aWNlcyBvbiBhY2NpZGVudC4gV2UgdXNlZCB0aGlzIGluZm9ybWF0aW9uIHRvIHNlZWsgb3Bwb3J0dW5pdGllcywgaW5zcGlyZSBvdXIgZGVzaWducywgYW5kIGxlYXJuIHdoYXQgdG8gYXZvaWQuICIpXSksX2MoJ3VsJyxbX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzFzRE1FcFBmQkZvMC1rcmJ3bW85RG9ZenAwZjhXQXZoVi92aWV3IiwidGFyZ2V0IjoiX2JsYW5rIn19LFtfdm0uX3YoIlNla3VyYSIpXSldKSxfYygnbGknLFtfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMXR2cGtEa01USVNaLU1OZkNOZjJ6eDlRRk5STlJrdC1VL3ZpZXciLCJ0YXJnZXQiOiJfYmxhbmsifX0sW192bS5fdigiQ2lyY2xlIG9mIDYiKV0pXSksX2MoJ2xpJyxbX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzFEcWxRdUNHVFZUR0l5VVpjVmVINThYTjdYWnd2eXhsQi92aWV3IiwidGFyZ2V0IjoiX2JsYW5rIn19LFtfdm0uX3YoIk5vb25saWdodCIpXSldKSxfYygnbGknLFtfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMWFRYTlWRUUyUmpUQ3BxbFBNOGpQWUtCN0xNa3dIY0xOL3ZpZXciLCJ0YXJnZXQiOiJfYmxhbmsifX0sW192bS5fdigiQlNhZmUiKV0pXSldKSxfYygnaDInLFtfdm0uX3YoIlVTRVIgUEVSU09OQVMiKV0pLF9jKCdwJyxbX3ZtLl92KCIgRnJvbSBvdXIgaW50ZXJ2aWV3cywgd2UgZ2F0aGVyZWQga2V5IGluc2lnaHRzIG9uIG91ciB1c2VycyB0aGF0IHdlIGNvbXBpbGVkIGludG8gY2F0ZWdvcmllcyBzdWNoIHBhaW4gcG9pbnRzLCBkZXNpcmVzLCBhbmQgZ29hbHMuIFRoZXNlIGhlbHBlZCB1cyBjcmVhdGUgcGVyc29uYXMgZ3JvdW5kZWQgaW4gZGF0YSBpbiBvcmRlciB0byBhdm9pZCBzdGVyZW90eXBlcyBhbmQgYXNzdW1wdGlvbnMuIFdlIGNob3NlIHRvIGNyZWF0ZSB0d28gcGVyc29uYXM6IG9uZSB0aGF0IHdhcyBtb3JlIGV4cGVyaWVuY2VkIHdpdGggdGhlIFUtRGlzdHJpY3QgYXJlYSBhbmQgb25lIHRoYXQgd2FzIG9ubHkgc2VtaS1mYW1pbGlhciB3aXRoIHRoZSBhcmVhLiBUaGlzIGxldCB1cyB1bmRlcnN0YW5kIGRpZmZlcmVudCB1c2VyIHBlcnNwZWN0aXZlcy4gT3VyIHBlcnNvbmFzIHdlcmUgYSBob21lIGJhc2UgdGhhdCB3ZSBmcmVxdWVudGx5IHZpc2l0ZWQgdG8gcmVhbGlnbiBvdXIgcHJvZHVjdCBhbmQgZ29hbHMgdG8gb3VyIHVzZXJz4oCZIG5lZWRzLiAiKV0pLF9jKCdpbWcnLHthdHRyczp7InNyYyI6ImFzc2V0cy9uaWdodC1vd2wvYW1hbmRhLnBuZyIsImFsdCI6IkFtYW5kYSBQZXJzb25hIn19KSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmlnaHQtb3dsL21hbGxvcnkucG5nIiwiYWx0IjoiTWFsbG9yeSBQZXJzb25hIn19KSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZHJpdmUuZ29vZ2xlLmNvbS9maWxlL2QvMWV6TDhPaWp6UHlpZzVVMXJzSjJBZF81NzBLd01OOHdrL3ZpZXciLCJ0YXJnZXQiOiJfYmxhbmsifX0sW192bS5fdigiRmluZCB0aGUgZnVsbCBwZXJzb25hIGRvY3VtZW50IGhlcmUiKV0pLF9jKCdoMicsW192bS5fdigiVVNFUiBKT1VSTkVZIE1BUFMiKV0pLF9jKCdwJyxbX3ZtLl92KCIgT3VyIHVzZXIgam91cm5leSBtYXBzIHJlcHJlc2VudCB0aGUgZXhwZXJpZW5jZXMgb2YgQW1hbmRhIGFuZCBNYWxsb3J5LCB0d28gb2Ygb3VyIHVzZXJzLCB3aGlsZSB3YWxraW5nIGhvbWUgYXQgbmlnaHQuIFdlIGNhcHR1cmVkIGtleSB0b3VjaCBwb2ludHMgYmV0d2VlbiBoZXIgYW5kIGhlciBlbnZpcm9ubWVudCBhbmQgZW1vdGlvbnMgdGhyb3VnaG91dCBoZXIgd2FsayBob21lLiBXZSBmb2N1c2VkIG9uIGFueGlldHksIGFsZXJ0bmVzcywgYW5kIGNvbmZpZGVuY2UgYXMgdGhlIGVtb3Rpb25zIHdlIHdhbnRlZCB0byB0cmFjaywgYmVjYXVzZSB0aGV5IHdlcmUgdGhlIG1vc3QgcHJldmFsZW50IGVtb3Rpb25zIG9mIG91ciBpbnRlcnZpZXdlZXMuIFRoaXMgam91cm5leSBtYXAgaGVscGVkIHVzIHVuZGVyc3RhbmQgb3VyIHVzZXLigJlzIGZlZWxpbmdzIGFuZCBpbnRlcmFjdGlvbnMgd2hpbGUgd2Fsa2luZyBob21lLiAiKV0pLF9jKCdpbWcnLHthdHRyczp7InNyYyI6ImFzc2V0cy9uaWdodC1vd2wvYW1hbmRhLW1hcC5qcGVnIiwiYWx0IjoiYW1hbmRhIG1hcCJ9fSksX2MoJ2ltZycse2F0dHJzOnsic3JjIjoiYXNzZXRzL25pZ2h0LW93bC9tYWxsb3J5LW1hcC5qcGVnIiwiYWx0IjoibWFsbG9yeSBtYXAifX0pLF9jKCdoMicsW192bS5fdigiREVTSUdOIFJFUVVJUkVNRU5UUyIpXSksX2MoJ3AnLFtfdm0uX3YoIiBBZnRlciBiZXR0ZXIgdW5kZXJzdGFuZGluZyBvdXIgdXNlcnMgYW5kIHByb2JsZW0gc3BhY2UgdGhyb3VnaCByZXNlYXJjaCwgd2UgZGVmaW5lZCBkZXNpZ24gcmVxdWlyZW1lbnRzIHRoYXQgb3V0bGluZWQgdGhlIGZ1bmN0aW9ucyBvZiBvdXIgYXBwbGljYXRpb24uIFRoZXNlIHJlcXVpcmVtZW50cyBlbnN1cmVkIHRoYXQgb3VyIHNvbHV0aW9uIHNvbHZlZCB1c2VyIHBhaW4gcG9pbnRzIGFuZCBzYXRpc2ZpZWQgdGhlaXIgZ29hbHMuIEluIGFkZGl0aW9uLCB0aGV5IGhlbHBlZCB1cyBkZWNpZGUgdG8gZm9jdXMgb24gY3JlYXRpbmcgYSBwaG9uZSBhcHAgYXMgb3VyIGZpbmFsIHByb2R1Y3QgYmVjYXVzZSBpdCB3b3VsZCBiZSBhYmxlIHRvIGZ1bGZpbGwgdGhlIHJlcXVpcmVtZW50cy4gVGhpcyB3b3VsZCBhbHNvIGJlIGNvbnZlbmllbnQgZm9yIG91ciB1c2VycyBzaW5jZSB3ZSBvYnNlcnZlZCB0aGF0IG1hbnkgb2YgdGhlbSBpbnRlcmFjdGVkIHdpdGggdGhlaXIgcGhvbmUgaW4gc29tZSB3YXkgd2hpbGUgd2Fsa2luZyBhdCBuaWdodC4gIildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmlnaHQtb3dsL2FvYy5wbmciLCJhbHQiOiJhY3Rpb24gb2JqZWN0IGNvbnRleHQifX0pLF9jKCdpbWcnLHthdHRyczp7InNyYyI6ImFzc2V0cy9uaWdodC1vd2wvZGZjLnBuZyIsImFsdCI6ImRhdGEgZnVuY3Rpb24gY29udGV4dHVhbCJ9fSksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2RyaXZlLmdvb2dsZS5jb20vZmlsZS9kLzFhaFppSzVJQzdLSXJ6Y0R4NG9ySVRublFsdzFpeGNDSy92aWV3IiwidGFyZ2V0IjoiX2JsYW5rIn19LFtfdm0uX3YoIkZpbmQgdGhlIGZ1bGwgZGVzaWduIHJlcXVpcmVtZW50cyBkb2N1bWVudCBoZXJlIildKSxfYygnaDInLFtfdm0uX3YoIlNUT1JZQk9BUkRTIildKSxfYygncCcsW192bS5fdigiIEVhY2ggdGVhbSBtZW1iZXIgY3JlYXRlZCB0d28gc3Rvcnlib2FyZHM6IG9uZSBza2V0Y2hlZCBhbmQgb25lIHBob3RvIG9yIHBob3RvIGh5YnJpZC4gRWFjaCBzdG9yeWJvYXJkIHNob3dlZCBhIHNwZWNpZmljIHNjZW5hcmlvIG9mIG91ciB1c2VyIGludGVyYWN0aW5nIHdpdGggb3VyIHBvdGVudGlhbCBwcm9kdWN0LiBJdCBoZWxwZWQgdXMgdmlzdWFsaXplIGhvdyBvdXIgdXNlciB3b3VsZCBpbnRlcmFjdCB3aXRoIG91ciBwb3RlbnRpYWwgc29sdXRpb24uIFdlIGNob3NlIHRvIGhhdmUgZWFjaCB0ZWFtIG1lbWJlciBmb2N1cyBvbiBkaWZmZXJlbnQgdXNlciBzY2VuYXJpb3MgaW4gb3JkZXIgZm9yIHVzIHRvIHVuZGVyc3RhbmQgdGhlIGZ1bGwgcGljdHVyZSBvZiB0aGUgaW50ZXJhY3Rpb25zIGJldHdlZW4gdGhlIHVzZXIgYW5kIG91ciBwcm9kdWN0IGZyb20gdGhlIHN0YXJ0IHRvIGVuZCBvZiB0aGVpciB3YWxrLiAiKV0pLF9jKCdpZnJhbWUnLHthdHRyczp7InNyYyI6Imh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZUN1pSaUpSWno1OTRZcU5xRlVndGtZaWx4M1lfbWptdjZienRnYUFvMUFJUG5lN0dZMDRpbGJicGUtdFdESHBsREhadWtYU3RxbFFrVHUvZW1iZWQ/c3RhcnQ9dHJ1ZSZsb29wPWZhbHNlJmRlbGF5bXM9NjAwMDAiLCJmcmFtZWJvcmRlciI6IjAiLCJ3aWR0aCI6IjEwMCUiLCJoZWlnaHQiOiI1NjkiLCJhbGxvd2Z1bGxzY3JlZW4iOiJ0cnVlIiwibW96YWxsb3dmdWxsc2NyZWVuIjoidHJ1ZSIsIndlYmtpdGFsbG93ZnVsbHNjcmVlbiI6InRydWUifX0pLF9jKCdoMicsW192bS5fdigiSU5GT1JNQVRJT04gQVJDSElURUNUVVJFIildKSxfYygncCcsW192bS5fdigiIEFmdGVyIGRlY2lkaW5nIHRvIG1ha2UgYW4gYXBwIGFzIG91ciBwcm9kdWN0LCB3ZSBzdGFydGVkIGJyYWluc3Rvcm1pbmcga2V5IGZlYXR1cmVzIHRoYXQgd291bGQgYmUgdGhlIG1vc3QgaGVscGZ1bCB0byBvdXIgdXNlcnMuIFdlIHV0aWxpemVkIG91ciBkZXNpZ24gcmVxdWlyZW1lbnRzIGFuZCB1c2VyIHBlcnNvbmFzIHdoZW4gaWRlYXRpbmcgdGhlIGFwcOKAmXMgZmVhdHVyZXMgYW5kIGhvdyB1c2VycyB3b3VsZCBnbyB0aHJvdWdoIGEgc3BlY2lmaWMgdGFzay4gT3ZlcmFsbCwgb3VyIGluZm9ybWF0aW9uIGFyY2hpdGVjdHVyZSBzaG93ZWQgdGhlIHJlbGF0aW9uc2hpcHMgYW5kIGZsb3dzIGJldHdlZW4gZWFjaCBmZWF0dXJlLiBUaGlzIHNldCB1cyB1cCBmb3Igc3VjY2VzcyBhcyB3ZSBzdGFydGVkIGlkZWF0aW5nIGFuZCBjcmVhdGluZyBwYXBlciBwcm90b3R5cGVzIG9mIG91ciBhcHAgc2NyZWVucy4gIildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmlnaHQtb3dsL2lhLnBuZyIsImFsdCI6ImluZm9ybWF0aW9uIGFyY2hpdGVjdHVyZSJ9fSksX2MoJ2gyJyxbX3ZtLl92KCJQQVBFUiBQUk9UT1RZUElORyBVU0FCSUxJVFkgVEVTVElORyIpXSksX2MoJ3AnLFtfdm0uX3YoIiBUaGUgcGFwZXIgcHJvdG90eXBlcyB3ZXJlIGEgcXVpY2ssIGVhc3kgd2F5IHRvIHRlc3Qgb3VyIGRlc2lnbmVkIGZlYXR1cmVzIHdpdGhvdXQgZGlzdHJhY3RpbmcgdXNlcnMgd2l0aCBjb2xvcnMgYW5kIHBob3Rvcy4gVGhleSBoZWxwZWQgdXMgcGlucG9pbnQgY29uZnVzaW5nIGFuZCB1bmludHVpdGl2ZSBhc3BlY3RzIG9mIG91ciBpbml0aWFsIGZlYXR1cmVzLCB3aGljaCB3ZSBpbmNvcnBvcmF0ZWQgaW50byBvdXIgcmVkZXNpZ24uIEZpcnN0LCB3ZSBlYWNoIGluZGl2aWR1YWxseSBza2V0Y2hlZCBhbmQgZGVzY3JpYmVkIHRocmVlIGludGVyZmFjZXMuIFRoZW4sIHdlIGNhbWUgYmFjayB0b2dldGhlciBhbmQgY29tYmluZWQgb3VyIHJvdWdoIGRyYWZ0IHNrZXRjaGVzIGludG8gY29uc2lzdGVudCBpbnRlcmZhY2Ugc2tldGNoZXMgZm9yIG91ciB1c2FiaWxpdHkgdGVzdHMuIEJhc2VkIG9uIG91ciBzdG9yeWJvYXJkcyBhbmQgaW5mb3JtYXRpb24gYXJjaGl0ZWN0dXJlIGRpYWdyYW0sIHdlIGRlZmluZWQgdGhyZWUga2V5IHRhc2tzIHRoYXQgd2UgYXNrZWQgdXNlcnMgdG8gY29tcGxldGUgaW4gb3VyIHRlc3RzLiAiKV0pLF9jKCdwJyxbX2MoJ2VtJyxbX3ZtLl92KCJUYXNrIDE6IildKSxfdm0uX3YoIlVzZXIgc2VhcmNoZXMgZm9yIGEgZmluYWwgZGVzdGluYXRpb24sIHdoaWNoIHdpbGwgYmUgaG9tZS4gVGhlbiB0aGV5IHdpbGwgc2VsZWN0IHRoZSBwYXRoIHRoYXQgdGhleSB3YW50IHRvIHRha2UgYW5kIHN0YXJ0IHRoZWlyIHJvdXRlLiAiKV0pLF9jKCdwJyxbX2MoJ2VtJyxbX3ZtLl92KCJUYXNrIDI6IildKSxfdm0uX3YoIlVzZXIgcmVwb3J0cyBhIGJ1cmdsYXJ5IGluY2lkZW50IGFuZCBpbnB1dHMgdGhlIGNvcnJlY3QgaW5mb3JtYXRpb24gKGRhdGUsIHRpbWUsIGRlc2NyaXB0aW9uKSBhbmQgc3VibWl0cyBpdC4gQWZ0ZXIgc3VibWl0dGluZywgY2hlY2sgdGhhdCBpdCB3YXMgc3VjY2Vzc2Z1bGx5IGFkZGVkIHRvIHRoZSBtYXAuICIpXSksX2MoJ3AnLFtfYygnZW0nLFtfdm0uX3YoIlRhc2sgMzoiKV0pLF92bS5fdigiVXNlciBhZGRzIG5ldyBzYWZldHkgY29udGFjdCBhbmQgdGhlbiBjYWxscyB0aGVtLiIpXSksX2MoJ2gzJyxbX3ZtLl92KCJQYXJ0aWNpcGFudHM6IildKSxfYygncCcsW192bS5fdigiIFdlIHRlc3RlZCBvdXIgcHJvdG90eXBlIHdpdGggZm91ciBmZW1hbGUgVW5pdmVyc2l0eSBvZiBXYXNoaW5ndG9uIHN0dWRlbnRzIHdobyB3YWxrIGFsb25lIGF0IG5pZ2h0IGF0IGxlYXN0IG9uY2UgYSB3ZWVrLiAiKV0pLF9jKCdoMycsW192bS5fdigiTWV0aG9kOiIpXSksX2MoJ3AnLFtfdm0uX3YoIiBGb3IgZWFjaCBldmFsdWF0aW9uLCB3ZSBmb2xsb3dlZCB0aHJlZSBtYWpvciBwaGFzZXMgb2YgdGVzdGluZyBpbiBvcmRlciB0byBjb2hlc2l2ZWx5IGdhdGhlciBxdWFsaXR5IGluZm9ybWF0aW9uIGFib3V0IG91ciB1c2VycyBhbmQgb3VyIGFwcC4gVGhlIGZpcnN0IHBoYXNlIHN0YXJ0ZWQgb2ZmIHdpdGggYW4gaW50ZXJ2aWV3IHdpdGggZWFjaCBwYXJ0aWNpcGFudCBpbiBvcmRlciB0byBnYXRoZXIgYmFzaWMgZGVtb2dyYXBoaWMgaW5mb3JtYXRpb24uIFRoZSBzZWNvbmQgcGhhc2UgY29uc2lzdGVkIG9mIHRoZSBtYWluIHVzYWJpbGl0eSB0ZXN0aW5nIGJ5IHByb3ZpZGluZyB1c2VycyB3aXRoIGEgdGFzayB0aGF0IHRoZXkgaGFkIHRvIGFjY29tcGxpc2ggd2hpbGUgb2JzZXJ2ZXJzIHJlY29yZGVkIG5vdGVzLiBEdXJpbmcgdGhlIHRlc3QsIHdlIGFza2VkIHBhcnRpY2lwYW50cyB0byB0aGluayBvdXQgbG91ZCBzbyB0aGF0IHdlIGNvdWxkIGJldHRlciB1bmRlcnN0YW5kIHRoZWlyIHRob3VnaHQgcHJvY2VzcyBhbmQgcGFpbiBwb2ludHMuIFRvIG1ha2UgaXQgc2VlbSBsaWtlIGEgcmVhbCBhcHBsaWNhdGlvbiwgd2UgdXNlZCBhIE1hcnZlbCBBcHAgdG8gY29uZHVjdCBvdXIgdXNhYmlsaXR5IHRlc3RpbmcuIExhc3RseSwgd2UgcGVyZm9ybWVkIGEgcG9zdCB0ZXN0IGludGVydmlldyB0byBnZXQgZmluYWwgZGV0YWlscyBvZiB3aGF0IHBhcnRpY2lwYW50cyB0aG91Z2h0IG9mIHRoZWlyIGV4cGVyaWVuY2Ugb2Ygb3VyIHNvbHV0aW9uIHRvIG5pZ2h0IHNhZmV0eS4gQWZ0ZXIgaW5kaXZpZHVhbGx5IGNvbXBsZXRpbmcgb3VyIHVzYWJpbGl0eSB0ZXN0cywgd2UgY2FtZSBiYWNrIHRvZ2V0aGVyIHRvIHN5bnRoZXNpemUgYW5kIGFuYWx5emUgb3VyIGZpbmRpbmdzLiBXZSBmb3VuZCBjb21tb25hbGl0aWVzIGluIHRoZSBmZWF0dXJlcyB1c2VycyBzdHJ1Z2dsZWQgd2l0aCwgc3RyZW5ndGhzIGFuZCB3ZWFrbmVzc2VzIG9mIG91ciBkZXNpZ24sIGFuZCBzdWdnZXN0aW9ucyBmb3IgcmVkZXNpZ24uICIpXSksX2MoJ2gzJyxbX3ZtLl92KCJLZXkgRmluZGluZ3MiKV0pLF9jKCd1bCcsW19jKCdsaScsW192bS5fdigiIFVzZXJzIHdhbnRlZCB0byBiZSBhYmxlIHRvIHNoYXJlIHRoZWlyIGxvY2F0aW9uIGV2ZW4gd2hlbiB0aGV5IGhhZG7igJl0IHN0YXJ0ZWQgYSBwYXRoLiAiKV0pLF9jKCdsaScsW192bS5fdigiIFVzZXJzIGRpZCBub3QgZXhwZWN0IHRoZSBhcHAgdG8gaW1tZWRpYXRlbHkgY2FsbCBhIGNvbnRhY3QgYWZ0ZXIgY2xpY2tpbmcgb24gdGhlaXIgY29udGFjdCB0aWxlLiAiKV0pLF9jKCdsaScsW192bS5fdigiIFVzZXJzIHdhbnQgdG8gYmUgYWJsZSB0byBxdWlja2x5IGlucHV0IGluZm9ybWF0aW9uIHdoZW4gcmVwb3J0aW5nIGEgaGF6YXJkLiAiKV0pLF9jKCdsaScsW192bS5fdigiIFVzZXJzIHN0YXRlZCB0aGF0IGhhemFyZHMgaGF2ZSBkaWZmZXJlbnQgdXJnZW5jeSBsZXZlbHMsIHdoaWNoIHNob3VsZCBiZSByZWZsZWN0ZWQgaW4gdGhlIGFwcC4gIildKV0pLF9jKCdkaXYnLHtzdGF0aWNDbGFzczoiZC1mbGV4IGZsZXgtY29sdW1uIn0sW19jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xcVBJZ1dBYXZZdW1JMFIzUXRXTU9VVVoxcnRwT3hLQV8vdmlldyJ9fSxbX3ZtLl92KCJGaW5kIHRoZSBmdWxsIHVzYWJpbGl0eSB0ZXN0IGRvY3VtZW50IGhlcmUiKV0pLF9jKCdhJyx7YXR0cnM6eyJocmVmIjoiaHR0cHM6Ly9kcml2ZS5nb29nbGUuY29tL2ZpbGUvZC8xd0M3MzRfT0UtOHlzRWd6TnJySGVRd2dEZnNIWHBDZlUvdmlldyJ9fSxbX3ZtLl92KCJGaW5kIHRoZSBmdWxsIGludGVyZmFjZSBza2V0Y2hlcyBkb2N1bWVudCBoZXJlIildKV0pLF9jKCdoMicsW192bS5fdigiUkVGSU5FTUVOVFMiKV0pLF9jKCdwJyxbX3ZtLl92KCIgQmFzZWQgb24gb3VyIGZpbmRpbmdzIGZyb20gb3VyIHVzYWJpbGl0eSB0ZXN0cyB3ZSBtYWRlIHNvbWUgY2hhbmdlcyB0byBvdXIgZGVzaWducy4gQmVsb3cgYXJlIHRoZSB0aHJlZSBtYWluIGNoYW5nZXMgdGhhdCB3ZSBtYWRlIGJhc2VkIG9uIHVzZXIgZmVlZGJhY2suICIpXSksX2MoJ2gzJyxbX3ZtLl92KCJSZXBvcnQgYSBIYXphcmQ6IildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiIvYXNzZXRzL25pZ2h0LW93bC9yZXBvcnQucG5nIiwiYWx0IjoicmVwb3J0IGEgaGF6YXJkIn19KSxfYygncCcsW192bS5fdigiIEhhdmluZyBkaWZmZXJlbnQgaWNvbiBjYXRlZ29yaWVzIGFuZCBoYXphcmQgdHlwZXMgd2FzIGNvbmZ1c2luZywgYnV0IHVzZXJzIHN0aWxsIHdhbnRlZCBoYXphcmRzIHRvIGJlIGRpZmZlcmVudGlhdGVkIGluIHNvbWUgd2F5LiBXZSBtYWRlIGEgZmV3IGNoYW5nZXMgYmFzZWQgb24gdGhpcyBmZWVkYmFjazogIildKSxfYygndWwnLFtfYygnbGknLFtfdm0uX3YoIiBSZW1vdmVkIGRpZmZlcmVudCBpY29uIHR5cGVzIGFuZCBvbmx5IGFsbG93ZWQgdXNlcnMgdG8gcmVwb3J0IGhhemFyZHMgIildKSxfYygnbGknLFtfdm0uX3YoIlJlbW92ZWQgaGF6YXJkIHR5cGVzIildKSxfYygnbGknLFtfdm0uX3YoIkFsbG93ZWQgdXNlcnMgdG8gZW50ZXIgYSB0aXRsZSBmb3IgdGhlIGhhemFyZCIpXSksX2MoJ2xpJyxbX3ZtLl92KCJBZGRlZCBoYXphcmQgbGV2ZWxzIChsb3csIG1lZGl1bSwgYW5kIGhpZ2ggZGFuZ2VyKSIpXSldKSxfYygnaDMnLFtfdm0uX3YoIkNhbGxpbmcgU2FmZXR5IENvbnRhY3Q6IildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmlnaHQtb3dsL2NhbGwucG5nIiwiYWx0IjoiY2FsbGluZyBhIHNhZmV0eSBjb250YWN0In19KSxfYygncCcsW192bS5fdigiIFdoZW4gdXNlcnMgdGFwcGVkIG9uIGEgY29udGFjdCwgdGhleSBleHBlY3RlZCB0byBiZSB0YWtlbiB0byBhbiBlZGl0aW5nIHBhZ2UgaW5zdGVhZCBvZiBpdCBjYWxsaW5nIHRoZW0sIHNvIHdlOiAiKV0pLF9jKCd1bCcsW19jKCdsaScsW192bS5fdigiIEFkZGVkIGEg4oCcY2FsbOKAnSBidXR0b24gc28gdGhhdCB1c2VycyB3b3VsZCBrbm93IHRoYXQgdGFwcGluZyBpdCB3b3VsZCBpbW1lZGlhdGVseSBjYWxsIHRoZSBjb250YWN0ICIpXSksX2MoJ2xpJyxbX3ZtLl92KCIgVGFwcGluZyBvbiB0aGUgY29udGFjdOKAmXMgcGljdHVyZSB3b3VsZCBicmluZyB0aGVtIHRvIHRoZSBlZGl0aW5nIHBhZ2UgIildKV0pLF9jKCdoMycsW192bS5fdigiU2VsZWN0IGEgUm91dGU6IildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmlnaHQtb3dsL3JvdXRlLnBuZyIsImFsdCI6InNlbGVjdGluZyBhIHJvdXRlIn19KSxfYygncCcsW192bS5fdigiV2UgbWFkZSBhIGZldyBtaW5vciBjaGFuZ2VzIHRvIHRoaXMgc2NyZWVuIHRvIGFsbGV2aWF0ZSBjb25mdXNpb246IildKSxfYygndWwnLFtfYygnbGknLFtfdm0uX3YoIkFkZGVkIOKAnHN0YXJ0IHJvdXRl4oCdIGJ1dHRvbiB0byBjb2xsYXBzZWQgbWVudSIpXSksX2MoJ2xpJyxbX3ZtLl92KCJNb3ZlZCDigJxzdGFydCByb3V0ZeKAnSBidXR0b24gdG8gdGhlIHNpZGUiKV0pLF9jKCdsaScsW192bS5fdigiQWRkZWQg4oCcRnJvbeKAnSB0ZXh0IGZpZWxkIGF0IHRoZSB0b3AiKV0pXSksX2MoJ2gyJyxbX3ZtLl92KCJBTk5PVEFURUQgV0lSRUZSQU1FUyIpXSksX2MoJ3AnLFtfdm0uX3YoIiBBbHNvIGJhc2VkIG9uIG91ciB1c2FiaWxpdHkgdGVzdGluZyBmZWVkYmFjaywgd2UgcmVkZXNpZ25lZCBhbmQgYWRkZWQgYXNwZWN0cyB0byBvdXIgd2lyZWZyYW1lcy4gVGhlbiwgbG9va2luZyBiYWNrIGF0IG91ciBpbmZvcm1hdGlvbiBhcmNoaXRlY3R1cmUsIHdlIGNyZWF0ZWQgdGhlIGFwcOKAmXMgZnVsbCBmdW5jdGlvbmFsaXR5IGluIEZpZ21hLiBUaGVzZSB3aXJlZnJhbWVzIHdlcmUgc3VwcG9zZWQgdG8gYmUgbG93IGZpZGVsaXR5IHdpdGhvdXQgY29sb3IgYW5kIHJlYWwgdGV4dCBpbiBvcmRlciB0byBzdHJpY3RseSBjb21tdW5pY2F0ZSB0aGUgYXBw4oCZcyBmZWF0dXJlcy4gV2UgYW5ub3RhdGVkIGVhY2ggc2NyZWVuIHRvIGhpZ2hsaWdodCBrZXkgY29tcG9uZW50cyBhbmQgZGVzY3JpYmUgZnVuY3Rpb25hbGl0eS4gVGhpcyBzdGVwIGhlbHBlZCB1cyB0aGluayBhYm91dCBob3cgb3VyIGZlYXR1cmVzIHdvcmtlZCB0b2dldGhlciBhbmQgd2FzIGEgdXNlZnVsIHdheSB0byBnZXQgZmVlZGJhY2sgYmVmb3JlIGRlc2lnbmluZyBvdXIgaGlnaCBmaWRlbGl0eSBwcm90b3R5cGVzLiAiKV0pLF9jKCdpZnJhbWUnLHthdHRyczp7InNyYyI6Imh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZSTDJOMlVTNW43ZlcydjJCTVpGcWNWRmR0cFN4Yl82M3E0YkVtV0R3V0NnQk1ORDdkTHU1NFlKaWlMaTYwY2prTWI4YnpaSE9ncjVWVFQvZW1iZWQ/c3RhcnQ9ZmFsc2UmbG9vcD1mYWxzZSZkZWxheW1zPTYwMDAwIiwiZnJhbWVib3JkZXIiOiIwIiwid2lkdGgiOiIxMDAlIiwiaGVpZ2h0IjoiNTY5IiwiYWxsb3dmdWxsc2NyZWVuIjoidHJ1ZSIsIm1vemFsbG93ZnVsbHNjcmVlbiI6InRydWUiLCJ3ZWJraXRhbGxvd2Z1bGxzY3JlZW4iOiJ0cnVlIn19KSxfYygnaDInLFtfdm0uX3YoIkhJR0ggRklERUxJVFkgUFJPVE9UWVBFIildKSxfYygncCcsW192bS5fdigiIEJhc2VkIG9uIGFsbCBvdXIgcmVzZWFyY2ggYW5kIHRlc3RpbmcsIHdlIGNyZWF0ZWQgYW4gYXBwIGNhbGxlZCBOaWdodCBPd2wsIHRoYXQgc3R1ZGVudHMgY291bGQgdXNlIHRvIGZlZWwgc2FmZSB3aGVuIHdhbGtpbmcgYWxvbmUgYXQgbmlnaHQuIFRoZSBhcHAgaGFzIHR3byBtYWluIGNvbXBvbmVudHM6IHNhZmV0eSBjaXJjbGUgYW5kIG1hcC4gIildKSxfYygncCcsW192bS5fdigiIEluIHRoZSBzYWZldHkgY2lyY2xlLCBiYXNlZCBvbiBpbnRlcnZpZXdlZXMgc3RhdGluZyB0aGV5IGZlZWwgY29tZm9ydGFibGUgd2hlbiB0aGV54oCZcmUgd2Fsa2luZyBhbmQgdGFsa2luZyB0byB0aGVpciBmcmllbmQsIHVzZXJzIGFyZSBhYmxlIHRvIHF1aWNrbHkgYW5kIGVhc2lseSBjYWxsIHRoZWlyIGZyaWVuZHMuIElmIHRoZWlyIGZyaWVuZHMgYXJlIGJ1c3ksIHVzZXJzIGNhbiBjYWxsIHRoZSBib3QuIFRoZSBib3Qgd2lsbCByZWNvcmQgYW5kIHRhbGsgdG8gdGhlbSwgbWltaWNraW5nIGEg4oCYZnJpZW5k4oCZIGxpc3RlbmluZyB0byB5b3UgaW4gY2FzZSB5b3VyIGFyZSBpbiBhIGRhbmdlcm91cyBzaXR1YXRpb24uICIpXSksX2MoJ3AnLFtfdm0uX3YoIiBPbiB0aGUgbWFwLCB1c2VycyBjYW4gc2VsZWN0IGEgZGVzdGluYXRpb24gYW5kIHRoZSBzYWZlc3QgcGF0aCB0byBnZXQgdGhlcmUuIE9uY2UgdGhlIHVzZXIgc3RhcnRzIHRoZWlyIHJvdXRlLCB0aGVpciBzYWZldHkgY29udGFjdHMgd2lsbCBiZSBhbGVydGVkIGFuZCB0aGUgYXBwIHdpbGwgYXV0b21hdGljYWxseSBzZW5kIGFub3RoZXIgbm90aWZpY2F0aW9uIHdoZW4gdGhlIHVzZXIgZ2V0cyB0byB0aGVpciBmaW5hbCBkZXN0aW5hdGlvbjsgdGhpcyBoYXBwZW5zIGF1dG9tYXRpY2FsbHkgYmVjYXVzZSBpdOKAmXMgZWFzeSB0byBmb3JnZXQgdG8gbGV0IHlvdXIgZnJpZW5kcyBrbm93IHlvdSBnb3QgaG9tZSBzYWZlLiBUbyBrZWVwIHRoZSBpbmNpZGVudHMgdXAgdG8gZGF0ZSBvbiB0aGUgbWFwLCB3ZSB1c2UgY3Jvd2Rzb3VyY2luZzsgdXNlcnMgY2FuIHJlcG9ydCBhbmQgY29uZmlybSBoYXphcmRzLiAiKV0pLF9jKCdwJyxbX3ZtLl92KCIgQWZ0ZXIgdXNlciBmZWVkYmFjaywgd2UgbWFkZSB0aGUgU09TIGJ1dHRvbiBiZSBlYXNpbHkgY2xpY2thYmxlLCB3aGljaCBicmluZ3MgdXAgYSBwb3B1cCB0aGF0IGNvdW50cyBkb3duIGZyb20gNSBzZWNvbmRzIGFuZCB0aGVuIGNhbGxzIDkxMS4gSWYgdGhlIHVzZXIgYWNjaWRlbnRseSBwcmVzc2VkIHRoZSBTT1MgYnV0dG9uLCB0aGV5IGNhbiBlYXNpbHkgY2FuY2VsIGl0LiBCdXQgd2UgbGVhcm5lZCB0aGF0IGl04oCZcyBpbXBvcnRhbnQgdGhlIFNPUyBidXR0b24gYmUgdmVyeSBxdWljayB0byB1c2UgaW4gY2FzZSBvZiBhIGRpcmUgc2l0dWF0aW9uLiAiKV0pLF9jKCdwJyxbX3ZtLl92KCIgRm9yIG91ciBjb2xvcnMsIHdlIGNob3NlIGRhcmsgbW9kZSBiZWNhdXNlIHVzZXJzIHdvdWxkIGJlIHVzaW5nIHRoaXMgYXBwIGF0IG5pZ2h0LCBzbyB3ZSB3YW50ZWQgdGhlIHNjcmVlbiB0byBiZSBzdWJkdWVkLiBPdXIgY29sb3Igc2NoZW1lIGlzIGRhcmsgYmx1ZSwgYnJpZ2h0IG9yYW5nZSwgYW5kIGJyaWdodCByZWQuIEl0IGlzIGltcG9ydGFudCB0byBjcmVhdGUgaGlnaCBjb250cmFzdCB0byBzaG93IGtleSBpbmZvcm1hdGlvbi4gT3JhbmdlIHJlcHJlc2VudHMgaW1wb3J0YW50IGFjdGlvbmFibGUgaXRlbXMgc3VjaCBhcyByZXBvcnRpbmcgYSBoYXphcmQgYW5kIHN0YXJ0aW5nIHJvdXRlLiBUaGUgYnJpZ2h0IHJlZCBpcyB1c2VkIG9ubHkgZm9yIHRoZSBTT1MgYnV0dG9uIHRvIGVuc3VyZSBpdCBzdGFuZHMgb3V0IGluIGNhc2Ugb2YgZW1lcmdlbmN5LiAiKV0pLF9jKCdpZnJhbWUnLHthdHRyczp7InNyYyI6Imh0dHBzOi8vZG9jcy5nb29nbGUuY29tL3ByZXNlbnRhdGlvbi9kL2UvMlBBQ1gtMXZSa0hwLWNGMllGYkVDcVU3SHFKeDdOM1JGbHZiRkJ0NUIwcWpWNTZyT2pvTzVVMk5GdXFzc0piRzRtQ0l6TDV6WmhGV3R2eUc0VmQwTFIvZW1iZWQ/c3RhcnQ9ZmFsc2UmbG9vcD1mYWxzZSZkZWxheW1zPTYwMDAwIiwiZnJhbWVib3JkZXIiOiIwIiwid2lkdGgiOiIxMDAlIiwiaGVpZ2h0IjoiNTY5IiwiYWxsb3dmdWxsc2NyZWVuIjoidHJ1ZSIsIm1vemFsbG93ZnVsbHNjcmVlbiI6InRydWUiLCJ3ZWJraXRhbGxvd2Z1bGxzY3JlZW4iOiJ0cnVlIn19KSxfYygnaDInLFtfdm0uX3YoIlZpZGVvIERlbW9zIG9mIE5pZ2h0IE93bDoiKV0pLF9jKCdoMycsW192bS5fdigiQWRkIGEgQ29udGFjdCIpXSksX2MoJ2lmcmFtZScse2F0dHJzOnsid2lkdGgiOiIxMDAlIiwiaGVpZ2h0IjoiMzE1Iiwic3JjIjoiaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvRVhtZTVFXzhpR2ciLCJ0aXRsZSI6IllvdVR1YmUgdmlkZW8gcGxheWVyIiwiZnJhbWVib3JkZXIiOiIwIiwiYWxsb3ciOiJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIiwiYWxsb3dmdWxsc2NyZWVuIjoiIn19KSxfYygnaDMnLFtfdm0uX3YoIlJlcG9ydCBBIEhhemFyZCBhbmQgU2VsZWN0IGEgUm91dGUiKV0pLF9jKCdpZnJhbWUnLHthdHRyczp7IndpZHRoIjoiMTAwJSIsImhlaWdodCI6IjMxNSIsInNyYyI6Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL0ZxckpxNnFkSTg4IiwidGl0bGUiOiJZb3VUdWJlIHZpZGVvIHBsYXllciIsImZyYW1lYm9yZGVyIjoiMCIsImFsbG93IjoiYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIsImFsbG93ZnVsbHNjcmVlbiI6IiJ9fSksX2MoJ2gzJyxbX3ZtLl92KCJBZGQgTmV3IExvY2F0aW9uIEZhdm9yaXRlIildKSxfYygnaWZyYW1lJyx7YXR0cnM6eyJ3aWR0aCI6IjEwMCUiLCJoZWlnaHQiOiIzMTUiLCJzcmMiOiJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC95Y0RDYzlyemZQbyIsInRpdGxlIjoiWW91VHViZSB2aWRlbyBwbGF5ZXIiLCJmcmFtZWJvcmRlciI6IjAiLCJhbGxvdyI6ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiLCJhbGxvd2Z1bGxzY3JlZW4iOiIifX0pLF9jKCdoMicsW192bS5fdigiUkVGTEVDVElPTiIpXSksX2MoJ3AnLFtfdm0uX3YoIiBPdmVyYWxsLCB0aGlzIHByb2plY3Qgd2FzIGNoYWxsZW5naW5nIGFuZCBkZWZpbml0ZWx5IHN0cmV0Y2hlZCBvdXIgdGhpbmtpbmcgaW4gYm90aCBkZXNpZ24gYW5kIHRlYW13b3JrLiBXb3JraW5nIHdpdGggYSBncm91cCB0byBjcmVhdGUgYSBoaWdoLWZpZGVsaXR5IG1vY2t1cCBmb3IgYSBwcm9kdWN0IGluIGp1c3QgMTEgd2Vla3Mgd2FzIGRpZmZpY3VsdCBhbmQgcmVxdWlyZWQgaGFyZCB3b3JrIGZyb20gZXZlcnlvbmUuIFdlIGxlYXJuZWQgdGhhdCBkZXNpZ25pbmcgd2l0aCBhIHRlYW0gcmVxdWlyZXMgY2xlYXIgYW5kIGVmZmVjdGl2ZSBjb21tdW5pY2F0aW9uLCBjb21wcm9taXNlLCBhbmQgYSBsb3Qgb2YgZGVkaWNhdGlvbi4gV2l0aCB0aGF0IGJlaW5nIHNhaWQsIHdl4oCZcmUgYWxsIHByb3VkIG9mIG91ciBmaW5hbCBwcm9kdWN0IGFuZCBlbmpveWVkIGV2ZXJ5IHN0ZXAgb2YgdGhlIGRlc2lnbiBwcm9jZXNzLiAiKV0pLF9jKCd1bCcsW19jKCdsaScsW192bS5fdigiTW9yZSB1c2VyIHJlc2VhcmNoIGFuZCB1c2FiaWxpdHkgdGVzdGluZyIpXSksX2MoJ2xpJyxbX3ZtLl92KCIgRXhwbG9yZSBvcHRpbWl6aW5nIG1hcCBwYXRoIGZpbmRpbmcgZm9yIHVzZXJzIGdvaW5nIGJldHdlZW4gdGhlIHNhbWUgdHdvIHBsYWNlcyBtdWx0aXBsZSB0aW1lcyBhIHdlZWsgIildKV0pLF9jKCdwJyxbX3ZtLl92KCIgSWYgd2UgaGFkIG1vcmUgdGltZSwgd2UgZGVmaW5pdGVseSB3b3VsZCBoYXZlIGNvbmR1Y3RlZCBtb3JlIHVzZXIgcmVzZWFyY2ggYW5kIHVzYWJpbGl0eSB0ZXN0aW5nLiBTcGVjaWZpY2FsbHksIGl0IHdvdWxkIGhhdmUgYmVlbiB1c2VmdWwgdG8gZG8gY29tcGV0aXRpdmUgYW5hbHlzaXMgb24gb3RoZXIgdGVjaG5vbG9naWVzIGFuZCBzZXJ2aWNlcyByYXRoZXIgdGhhbiBqdXN0IGFwcHMuIEFsc28sIGFsdGhvdWdoIGEgcGhvbmUgYXBwIGZpdCBvdXIgZGVzaWduIHJlcXVpcmVtZW50cywgd2UgZGlkbuKAmXQgaGF2ZSBtdWNoIHRpbWUgdG8gdGhpbmsgYWJvdXQgYWx0ZXJuYXRpdmUgZm9ybXMgb2Ygb3VyIGZpbmFsIHByb2R1Y3QuIFdlIGRlZmluaXRlbHkgd291bGTigJl2ZSB3YW50ZWQgdG8gZXhwbG9yZSBvdGhlciBvcHRpb25zLCBlc3BlY2lhbGx5IHNpbmNlIG91ciB1c2VyIGdyb3VwIG9mIHN0dWRlbnRzIHdhbGtpbmcgYXQgbmlnaHQgc2hvdWxkIGFjdHVhbGx5IGJlIGRpc2NvdXJhZ2VkIGZyb20gdXNpbmcgdGhlaXIgcGhvbmVzLiAiKV0pLF9jKCdwJyxbX3ZtLl92KCIgSW4gYWRkaXRpb24sIHRoZXJlIHdlcmUgcGFydHMgb2Ygb3VyIGFwcCB0aGF0IHdlIHdhbnQgdG8gdGVzdCBtb3JlIGJlY2F1c2Ugd2UgYXJlIHVuc3VyZSBvZiB0aGVpciBlZmZlY3RpdmVuZXNzIG9yIHVzZWZ1bG5lc3MuIE9uZSBvZiB0aGVzZSBmdW5jdGlvbnMgaXMgdGhlIFNPUyBidXR0b247IHdlIGhhZCBnb3R0ZW4gYSBsb3Qgb2YgZmVlZGJhY2sgYWJvdXQgaG93IHRvIG1ha2UgaXQgZWFzaWx5IGFjY2Vzc2libGUgd2hpbGUgbm90IG1ha2luZyBpdCBlYXN5IHRvIGFjY2lkZW50YWxseSB0cmlnZ2VyLiBCYXNlZCBvbiB1c2VyIGZlZWRiYWNrLCB3ZSB3ZXJlIGFibGUgdG8gaW5jb3Jwb3JhdGUgYSBzb2x1dGlvbiBpbnRvIG91ciBmaW5hbCBkZXNpZ24sIGJ1dCB3ZSB3b3VsZCB3YW50IHRvIHRlc3Qgd2l0aCBtb3JlIHVzZXJzLiBIb3dldmVyLCBpdCB3YXMgZGlmZmljdWx0IHRvIGFjdHVhbGx5IHRlc3QgdGhlIHRydWUgZnVuY3Rpb25hbGl0eSBvZiB0aGUgU09TIGJ1dHRvbiBiZWNhdXNlIGl04oCZcyBtZWFudCB0byBiZSB1c2VkIGluIGVtZXJnZW5jeSBzaXR1YXRpb25zLiBBbm90aGVyIGZlYXR1cmUgdGhhdCB3ZSB3ZXJlIHVuc3VyZSBhYm91dCB3YXMgdGhlIGFiaWxpdHkgdG8gY2FsbCBhIEJvdC4gU29tZSBvZiBvdXIgdXNlcnMgc2FpZCB0aGF0IHRoZXkgd291bGQgZmVlbCB3ZWlyZCB0YWxraW5nIHRvIGEgQm90IGFuZCB3b3VsZG7igJl0IHVzZSBpdCwgd2hpbGUgc29tZSBzYWlkIHRoZXkgd291bGQuIFdpdGggbW9yZSB0aW1lLCB3ZSB3b3VsZOKAmXZlIHdhbnRlZCB0byBmaWd1cmUgb3V0IGhvdyB0byBtYWtlIHRoaXMgZmVhdHVyZSB0cnVseSB1c2VmdWwgdG8gb3VyIHVzZXJzLiAiKV0pLF9jKCdwJyxbX3ZtLl92KCIgT25lIHJlYWxseSBpbnRlcmVzdGluZyBxdWVzdGlvbiB3ZSByZWNlaXZlZCB3YXMgYWJvdXQgb3VyIHJlc2VhcmNoIGludG8gaG93IG9mdGVuIG91ciB1c2VycyB3ZXJlIGdvaW5nIGJldHdlZW4gdGhlIHNhbWUgdHdvIHBvaW50cyBldmVyeSB3ZWVrLCBhbmQgaG93IHdlIGNhbiBvcHRpbWl6ZSBvdXIgbWFwIGZ1bmN0aW9uIHRvIHRob3NlIHVzZXJzLiBUaGlzIHF1ZXN0aW9uIHdhcyB2ZXJ5IHRob3VnaHQtcHJvdm9raW5nOyBzaW5jZSBvbmUgb2Ygb3VyIGZlYXR1cmVzIHdhcyBwYXRoZmluZGluZyBvbiBhIG1hcCwgd2UgaW1tZWRpYXRlbHkgdHVybmVkIHRvIHByZS1leGlzdGluZyBzb2x1dGlvbnMgKGUuZy4gR29vZ2xlIE1hcHMsIEFwcGxlIE1hcHMpIGFzIGEgYmFzZS4gSG93ZXZlciwgdGhlc2Ugc29sdXRpb25zIGFyZSBtYWRlIHRvIGRlYWwgd2l0aCBzb21lb25lIHN0YXJ0aW5nIGZyb20gYW55d2hlcmUgYW5kIGdvaW5nIHRvIGFueXdoZXJlLiBEZWFsaW5nIHdpdGggdGhlIHNpdHVhdGlvbiBvZiB1c2VycyBnb2luZyBiZXR3ZWVuIHRoZSBzYW1lIHR3byBwb2ludHMgbXVsdGlwbGUgdGltZXMgYSB3ZWVrIG1pZ2h0IHJlc3VsdCBpbiBhIGNvbXBsZXRlbHkgZGlmZmVyZW50IHNvbHV0aW9uLiBJZiB3ZSBoYWQgdGhlIHRpbWUsIHdlIHdvdWxkIHdhbnQgdG8gZXhwbG9yZSBvcHRpbWl6YXRpb24gZm9yIHRoaXMgc3BlY2lmaWMgc2l0dWF0aW9uLiAiKV0pLF9jKCdwJyxbX3ZtLl92KCJGaW5hbGx5LCBoZXJlIGFyZSBzb21lIGtleSB0YWtlYXdheXMgZnJvbSBlYWNoIG9mIHVzOiIpXSksX2MoJ3AnKSxfYygncCcsW19jKCdlbScsW192bS5fdigiTWF5YToiKV0pLF92bS5fdigiIEF0IHRoZSBlbmQgb2YgdGhlIHByb2plY3QsIEkgd2FzIHN1cnByaXNlZCBieSBob3cgbXVjaCBhIOKAnGZpbmFs4oCdIGRlc2lnbiBjYW4gc3RpbGwgYmUgaW1wcm92ZWQuIEl0IHdhcyBhIGxpdHRsZSBkaXNoZWFydGVuaW5nIHNlZWluZyBob3cgbXVjaCBjcml0aXF1ZSBvdXIgKGFsbW9zdCkgZmluYWwgZGVzaWduIHJlY2VpdmVkLCBidXQgd2hlbiBJIHRob3VnaHQgYWJvdXQgaXQsIHByZXR0eSBtdWNoIGV2ZXJ5IGRlc2lnbiBpbiB0aGUgd29ybGQgY2FuIGJlIGltcHJvdmVkIGluIHNvbWUgd2F5LiAiKV0pLF9jKCdwJyxbX2MoJ2VtJyxbX3ZtLl92KCJWYWxlcmllOiIpXSksX3ZtLl92KCIgVGhpcyBoYXMgYmVlbiBvbmUgb2YgdGhlIG1vc3QgaW5jcmVkaWJsZSBkZXNpZ24gZXhwZXJpZW5jZXMgSSBoYXZlIGhhZC4gSSBsb3ZlIHdvcmtpbmcgaW4gZ3JvdXBzIHRvIGRlc2lnbiBhcnRpZmFjdHMgcmF0aGVyIHRoYW4gdHJ5aW5nIHRvIGRlc2lnbiBzb21ldGhpbmcgY29tcGxleCBsaWtlIE5pZ2h0IE93bCBvbiB5b3VyIG93bi4gSSBsb3ZlZCB3YXRjaGluZyBvdXIgcHJvamVjdCBncm93IGFzIHdlIHNoYXJlZCBpZGVhcyBhbmQgbWFkZSBjb21wcm9taXNlcyBhYm91dCBvdXIgZGVzaWducy4gRWFjaCBtZW1iZXIgb2YgdGhlIHRlYW0gYnJvdWdodCBzb21ldGhpbmcgdmVyeSB1bmlxdWUgdG8gdGhlIHRhYmxlLCBhbmQgYWx0aG91Z2ggaXQgd2FzIGNoYWxsZW5naW5nIHRvIGluY29ycG9yYXRlIHdoYXQgd29ya2VkIGJlc3QgZm9yIGFsbCBvZiB1cywgaXQgd2FzIGluIHRoaXMgZGl2ZXJzaXR5IG9mIHRoZSBkZXNpZ25lcnMgaW4gb3VyIGdyb3VwIHRoYXQgd2Ugd2VyZSBhYmxlIHRvIHByb2R1Y2UgYSBwcm9kdWN0IHRoYXQgd2UgYXJlIGFsbCBwcm91ZCBvZi4gIildKSxfYygncCcsW19jKCdlbScsW192bS5fdigiUGV0ZXI6IildKSxfdm0uX3YoIiBPdmVyYWxsLCB0aGlzIGV4cGVyaWVuY2UgZnJvbSBzdGFydCB0byBmaW5pc2ggaGFzIGJlZW4gbWVtb3JhYmxlLiBJIGVuam95ZWQgY29sbGFib3JhdGluZyB3aXRoIG15IHRlYW1tYXRlcyBhcyB3ZSBlYWNoIGhhZCBpbXBvcnRhbnQgY29udHJpYnV0aW9ucyB0byBOaWdodCBPd2wuIEFzIGZvciB0aGUgcHJvamVjdCBpdHNlbGYsIHdlIG1heSBoYXZlIGZpbmlzaGVkIHRoZSBmaXJzdCBpdGVyYXRpb24gb2YgdGhlIGhpZ2ggZmlkZWxpdHkgcHJvdG90eXBlLCBidXQgdGhlcmUgaXMgc3RpbGwgbXVjaCBpbXByb3ZlbWVudHMgd2UgY2FuIG1ha2UsIGVzcGVjaWFsbHkgYWZ0ZXIgb3VyIGZpbmFsIGNyaXRpcXVlLiAiKV0pLF9jKCdwJyxbX2MoJ2VtJyxbX3ZtLl92KCJMaWE6IildKSxfdm0uX3YoIkkgbGVhcm5lZCBob3cgdG8gb3B0aW1pemUgdGltZSBhbmQgY3JlYXRlIHF1YWxpdHkgd29yayBieSB1bmRlcnN0YW5kaW5nIGFuZCB1c2luZyBlYWNoIHRlYW0gbWF0ZeKAmXMgc2tpbGxzIGFuZCBwYXNzaW9ucy4gQXQgZGlmZmVyZW50IHN0ZXBzIGluIG91ciBwcm9jZXNzLCBlYWNoIG9uZSBvZiB1cyB3ZW50IGFib3ZlIGFuZCBiZXlvbmQgdG8gaGVscCB0aGUgcHJvamVjdCBleGNlbC4gIildKSxfYygnaW1nJyx7c3RhdGljQ2xhc3M6Im1iLTUiLGF0dHJzOnsic3JjIjoiYXNzZXRzL25pZ2h0LW93bC90ZWFtLnBuZyIsImFsdCI6InRoZSBuaWdodCBvd2wgdGVhbSJ9fSldKX0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}
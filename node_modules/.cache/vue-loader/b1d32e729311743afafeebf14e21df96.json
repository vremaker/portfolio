{"remainingRequest":"/Users/stlp/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/stlp/Documents/GitHub/portfolio/src/views/portfolio/night-owl.vue?vue&type=template&id=c2232bc4&scoped=true&","dependencies":[{"path":"/Users/stlp/Documents/GitHub/portfolio/src/views/portfolio/night-owl.vue","mtime":1645508646710},{"path":"/Users/stlp/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1645086821073},{"path":"/Users/stlp/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1645086822772},{"path":"/Users/stlp/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1645086821073},{"path":"/Users/stlp/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js","mtime":1645086822772}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
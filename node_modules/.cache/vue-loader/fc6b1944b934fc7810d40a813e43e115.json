{"remainingRequest":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\vrema\\Desktop\\portfolio\\src\\views\\DCI.vue?vue&type=template&id=499abf00&scoped=true&","dependencies":[{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\src\\views\\DCI.vue","mtime":1645391789168},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643314498369},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1643314507388},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643314498369},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\index.js","mtime":1643314507386}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxQb3J0Zm9saW9QaWVjZT4KICA8ZGl2IGlkPSJkY2kiPgogICAgPGRpdiBjbGFzcz0iY293Ij4KICAgICAgPGltZyBjbGFzcz0ic20taW1nIiBzcmM9Ii9hc3NldHMvdGlsZXMvb24tdHJhay5wbmciIGFsdD0iRENJIiAvPgogICAgPC9kaXY+CiAgICA8aDE+T25UcmFrIFRyb3VibGVzaG9vdGluZzwvaDE+CiAgICA8aDM+CiAgICAgIEVtcG93ZXJpbmcgdXNlcnMgdG8gcmVzb2x2ZSBwcm9kdWN0IGNvbmZsaWN0cyB3aXRob3V0IGNhbGxpbmcgZm9yIGhlbHAKICAgIDwvaDM+CgogICAgPHA+CiAgICAgIER1cmluZyB0aGUgU3VtbWVyIG9mIDIwMjEsIEkgd2FzIGdpdmVuIHRoZSB3b25kZXJmdWwgb3Bwb3J0dW5pdHkgdG8KICAgICAgaW50ZXJuIGF0IERpZ2l0YWwgQ29udHJvbCBJbmMuIChEQ0kpLCBhIGNvbXBhbnkgdGhhdCBzcGVjaWFsaXplcyBpbgogICAgICBsb2NhdGluZyB0ZWNobm9sb2d5IGZvciB0aGUgaG9yaXpvbnRhbCBkaXJlY3Rpb25hbCBkcmlsbGluZyAoSEREKQogICAgICBwcm9jZXNzLiBUaGVpciB0b29sc2V0IGhlbHBzIGRyaWxsZXJzIGxvY2F0ZSB0aGUgZHJpbGwgaGVhZCB1bmRlciB0aGUKICAgICAgZ3JvdW5kIHRocm91Z2ggYSB0d28gcGFydCBoYXJkd2FyZSBzeXN0ZW0gY29uc2lzdGluZyBvZiBhIHRyYW5zbWl0dGluZwogICAgICBkZXZpY2UgYW5kIGEgbG9jYXRpbmcgZGV2aWNlLiBPbiB0aGVzZSBkcmlsbCBzaXRlcywgdXNlcnMgY2FuIGVuY291bnRlcgogICAgICBjb21wbGljYXRlZCBpc3N1ZXMgd2l0aCB0aGVpciBsb2NhdGluZyBzeXN0ZW0sIGJ1dCB0aGVzZSBpc3N1ZXMgYXJlCiAgICAgIGZhaXJseSBjb21tb24gYW5kIHRoZSBjdXN0b21lciBzZXJ2aWNlIGRlcGFydG1lbnQgaGFzIGRvY3VtZW50ZWQKICAgICAgc3RhbmRhcmRpemVkIHByb2NlZHVyZXMgZm9yIHRyb3VibGVzaG9vdGluZyB0aGVzZSBkZXZpY2VzIG92ZXIgdGhlCiAgICAgIHBob25lLiBEdXJpbmcgbXkgaW50ZXJuc2hpcCBJIHdhcyB0YXNrZWQgd2l0aCBjcmVhdGluZyBhIHRyb3VibGVzaG9vdGluZwogICAgICBhcHBsaWNhdGlvbiB0aGF0IHdvdWxkIG5vdCBvbmx5IHJlZHVjZSB0aGUgY2FsbCB2b2x1bWUgZm9yIGN1c3RvbWVyCiAgICAgIHNlcnZpY2UgcmVwcmVzZW50YXRpdmVzLCBidXQgdGhhdCB3b3VsZCBhbHNvIGVtcG93ZXIgdXNlcnMgdG8gcmVzb2x2ZQogICAgICBwcm9kdWN0IGlzc3VlcyB3aXRob3V0IGhhdmluZyB0byBjYWxsIGN1c3RvbWVyIHNlcnZpY2UgZm9yIGFzc2lzdGFuY2UuCiAgICAgIE15IGRlc2lnbiBzcGVjaWZpY2FsbHkgZm9jdXNlZCBvbiB0aGUgbW9zdCBjb21tb24gaXNzdWUgdGhhdCBuZWVkcwogICAgICB0cm91Ymxlc2hvb3Rpbmc6IHdoZW4gbm8gZGF0YSBpcyBzaG93aW5nIHVwIG9uIHRoZSBsb2NhdG9yIGZyb20gdGhlCiAgICAgIHRyYW5zbWl0dGVyIHRoYXQgaGFzIGJlZW4gcGxhY2VkIHVuZGVyZ3JvdW5kLiBXaXRoIERDSeKAmXMgZ3JhY2lvdXMKICAgICAgcGVybWlzc2lvbiwgbXkgZGVzaWduIHByb2Nlc3Mgd2FzIGFzIGZvbGxvd3M6CiAgICA8L3A+CgogICAgPGgzPkNPTVBFVElUSVZFIEFOQUxZU0lTPC9oMz4KICAgIDxwPgogICAgICBJIGJlZ2FuIGJ5IGdhaW5pbmcgYW4gdW5kZXJzdGFuZGluZyBvZiBjb21wZXRpdGl2ZSBhbmQgY29tcGFyYWJsZQogICAgICB0cm91Ymxlc2hvb3RpbmcgcHJvZHVjdHMsIGJ5IGxvb2tpbmcgYXQgRENJ4oCZcyBvd24gaGVscGRlc2sgc2l0ZSwgRENJ4oCZcwogICAgICBjdXJyZW50IHByb2R1Y3QgbWFudWFsL2hlbHBkZXNrIG1vYmlsZSBhcHBsaWNhdGlvbiwgQXBwbGXigJlzIGhlbHBkZXNrCiAgICAgIHNpdGUsIEZvcmTigJlzIGhlbHBkZXNrIHNpdGUsIGFuZCBpRml4SXTigJlzIGNyb3dkc291cmNlZCB0cm91Ymxlc2hvb3RpbmcKICAgICAgc2l0ZS4gTW9zdCBvZiB0aGVzZSBhcHBsaWNhdGlvbnMgd2VyZSBleHRyZW1lbHkgdGV4dCBoZWF2eSAoZXNwZWNpYWxseQogICAgICB0aGUgaGVscCBkZXNrIHNpdGVzIGZvciBBcHBsZSwgRm9yZCwgYW5kIERDSSksIHdpdGggbGlua3MgYW5kIHN1YmhlYWRzCiAgICAgIGFzIHRoZSBtYWluIHdheSB0byBuYXZpZ2F0ZSB0aHJvdWdoIHRoZSBjb250ZW50LiBUaGUgbGV2ZWwgb2YgdGV4dCBpcwogICAgICBpbmNyZWRpYmx5IG92ZXJ3aGVsbWluZywgYW5kIHdpdGggaGFyZHdhcmUgcHJvZHVjdHMsIHN1Y2ggYXMgdGhvc2UKICAgICAgcHJvZHVjZWQgYnkgRENJLCBpdCBjYW4gYmUgaW5jcmVkaWJseSBkaWZmaWN1bHQgZm9yIHVzZXJzIHRvIHRyYW5zbGF0ZQogICAgICB3aGF0IHRoZSB0ZXh0IGlzIHRyeWluZyB0byBjb252ZXkgaW50byBjb25jcmV0ZSBhY3Rpb25zIHRvIGJlIGFwcGxpZWQgdG8KICAgICAgdGhlIGhhcmR3YXJlIHN5c3RlbS4gVGhpcyBjb21wZXRpdGl2ZSBhbmFseXNpcyBtYWRlIGl0IGNsZWFyIHRoYXQgdGhlCiAgICAgIGRlc2lnbiBuZWVkZWQgdG8gYmUgZmFyIG1vcmUgdmlzdWFsLCBmb2N1cyBvbiBzaW5nbGUgc3RlcHMgYXQgb25lIHRpbWUsCiAgICAgIGFuZCBpbmNsdWRlIHNvbWUgZ2FtaWZpZWQgZWxlbWVudHMgdG8gbWFrZSB0aGUgdHJvdWJsZXNob290aW5nCiAgICAgIGludGVyYWN0aW9uIGxlc3MgdGVkaW91cyBhbmQgZnJ1c3RyYXRpbmcuCiAgICA8L3A+CiAgICA8aDM+VVNFUiBQRVJTT05BPC9oMz4KICAgIDxwPgogICAgICBGcm9tIHRoZSBmb3VuZGF0aW9uYWwgaW5mb3JtYXRpb24gSSB3YXMgZ2l2ZW4gcmVnYXJkaW5nIHRoZSBkcmlsbGVycwogICAgICB0aGF0IHR5cGljYWxseSB3b3JrIHdpdGggdGhlIGxvY2F0aW5nIGVxdWlwbWVudCwgYWxvbmcgd2l0aCB0aGUgYmFzZWxpbmUKICAgICAgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHRlY2huaWNhbCBwcm9ibGVtcyB0aGF0IHVzZXJzIHJ1biBpbnRvIHdoZW4gdGhleQogICAgICBhcmUgaW4gdGhlIGZpZWxkLCBJIGNyZWF0ZWQgdGhlIHBlcnNvbmEgb2YgTWFydGluIERvdWdoZXJ0eS4gTWFydGluIGlzCiAgICAgIG5ldyB0byBkcmlsbGluZywgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgZXZlbiB0aGUgbW9zdCBpbmV4cGVyaWVuY2VkCiAgICAgIGRyaWxsZXJzIGNhbiBzdGlsbCBzdWNjZWVkIHVzaW5nIHRoaXMgdHJvdWJsZXNob290aW5nIGFwcGxpY2F0aW9uLgogICAgPC9wPgoKICAgIDxpbWcgc3JjPSJhc3NldHMvb24tdHJhay9wZXJzb25hLnBuZyIgYWx0PSJtYXJ0aW4gcGVyc29uYSIgLz4KCiAgICA8aDM+V09SS0ZMT1c8L2gzPgogICAgPHA+CiAgICAgIFRoZSBkZXNpZ24gZm9yIHRoaXMgb25UcmFrIGFwcGxpY2F0aW9uIGZvY3VzZWQgb24gdGhlIOKAnE5vIERhdGEgb24KICAgICAgTG9jYXRvcuKAnSB0cm91Ymxlc2hvb3RpbmcgZmxvdyBwcm92aWRlZCBieSBjdXN0b21lciBzZXJ2aWNlLgogICAgICBJbnRlcmVzdGluZ2x5LCBpbiB0YWxraW5nIHRvIHZhcmlvdXMgbWVtYmVycyBvZiB0aGUgY3VzdG9tZXIgc2VydmljZQogICAgICBzdXBwb3J0IHRlYW0gYW5kIG15IHZhcmlvdXMgc3Rha2Vob2xkZXJzLCB0aGVyZSBzZWVtZWQgdG8gYmUgYSBzbGlnaHRseQogICAgICBtb2RpZmllZCBwYXRoIHRocm91Z2ggdGhlIHRyb3VibGVzaG9vdGluZyB0byBnZXQgZGF0YSBiYWNrIG9uIHRoZQogICAgICBsb2NhdG9yLCB3aGljaCBjb25mbGljdGVkIHdpdGggdGhlIGZsb3cgY2hhcnQgSSB3YXMgZ2l2ZW4gd2hlbiBJIGJlZ2FuCiAgICAgIG15IGludGVybnNoaXAuIFNvLCBhZnRlciBjb25zdWx0aW5nIHRoZSBoZWFkIG9mIGN1c3RvbWVyIHNlcnZpY2UsIEkKICAgICAgY3JlYXRlZCBhIGZpbmFsaXplZCB2ZXJzaW9uIG9mIGEgd29ya2Zsb3cgd2hpY2ggZGlzcGxheXMgYWxsIG9mIHRoZQogICAgICBwb3NzaWJsZSBwYXRocyB0aGF0IGEgdXNlciBjb3VsZCBlbmNvdW50ZXIgd2hpbGUgdHJ5aW5nIHRvIHRyb3VibGVzaG9vdAogICAgICBnZXR0aW5nIGRhdGEgYmFjayBvbiB0aGVpciBsb2NhdG9yLgogICAgPC9wPgogICAgPGltZwogICAgICBzcmM9ImFzc2V0cy9vbi10cmFrL3dvcmtmbG93LnBuZyIKICAgICAgYWx0PSJmbG93IHRocm91Z2ggc3RlcHMgaW4gdGhlIGFwcCIKICAgIC8+CiAgICA8cD4KICAgICAgQWx0aG91Z2ggdGhlcmUgYXJlIGEgbG90IG9mIHBvc3NpYmxlIHN0ZXBzIHRvIGdvIHRocm91Z2gsIHRoaXMgcHJvY2VzcwogICAgICBiZWdpbnMgd2l0aCB2ZXJpZnlpbmcgdGhlIGVxdWlwbWVudCBpbiB1c2UsIGFuZCB1c2VzIGEgZGVjaXNpb24gdHJlZSB0bwogICAgICB3YWxrIHRocm91Z2ggcG9zc2libGUgZml4ZXMgdGhhdCB0aGUgdXNlciBjYW4gdHJ5IG9uIHRoZWlyIG93biB1bnRpbAogICAgICBlaXRoZXIgdGhlaXIgcHJvYmxlbSBpcyBzb2x2ZWQsIGFuZCB0aGV5IGNhbiBnZXQgYmFjayB0byBkcmlsbGluZywgb3IKICAgICAgdGhleSBkaWFnbm9zZSB0aGF0IHRoZWlyIGlzc3VlIGlzIHRvbyBjb21wbGljYXRlZCB0byBmaXggb24gdGhlaXIgb3duLAogICAgICBhbmQgcmVxdWlyZXMgY29udGFjdCB3aXRoIERDSSB0byBkZWFsIHdpdGggcmFyZSwgbW9yZSBjb21wbGljYXRlZAogICAgICByZXBsYWNlbWVudCBvciByZXBhaXIgb3B0aW9ucy4KICAgIDwvcD4KCiAgICA8aDM+UFJPVE9UWVBFPC9oMz4KICAgIDxwPgogICAgICBUaGUgZmluYWwgZGVzaWduIGZvciBvblRyYWsgZm91bmQgaW5zcGlyYXRpb24gZnJvbSB0aGUgaWNvbmljIHdvcmRsZXNzCiAgICAgIGluc3RydWN0aW9uIGd1aWRlcyB1c2VkIGJ5IElrZWEgdG8gZ3VpZGUgdXNlcnMgdGhyb3VnaCB0aGUgZnVybml0dXJlCiAgICAgIGNvbnN0cnVjdGlvbiBwcm9jZXNzLiBUaGUgbWFpbiBnb2FsIG9mIHRoaXMgcHJvdG90eXBlIHdhcyB0byBiZSBhIGNsZWFuLAogICAgICBwbGVhc2FudCwgZnVuLCBhbmQgaW50dWl0aXZlIGd1aWRlIHRvd2FyZHMgZml4aW5nIGFueSBmcnVzdHJhdGluZyBpc3N1ZXMKICAgICAgd2hpY2ggbWlnaHQgb2NjdXIgb24gdGhlIGpvYi4KICAgIDwvcD4KICAgIDxwPgogICAgICBUaGUgaGlnaCBmaWRlbGl0eSBwcm90b3R5cGUgYWxsb3dzIHlvdSB0byB3YWxrIHRocm91Z2ggdGhlIG11bHRpcGxlCiAgICAgIHBhdGh3YXlzIGludm9sdmVkIGluIHRoaXMgdXNlciBkcml2ZW4gcHJvYmxlbSBzb2x2aW5nIHByb2Nlc3MgZm9yIHRoZQogICAgICDigJxObyBEYXRhIG9uIExvY2F0b3LigJ0gZmxvdyBhcyB0aGUgdXNlciBpcyB3YWxrZWQgdGhyb3VnaCBhIGNob29zZSB5b3VyCiAgICAgIG93biBhZHZlbnR1cmUgc3R5bGVkIGludGVyYWN0aW9uLgogICAgPC9wPgogICAgPHA+VXNlIHRoZSBwcm90b3R5cGUgYmVsb3cgdG8gZXhwbG9yZSB0aGUgaW50ZXJhY3Rpb25zIGZvciB5b3Vyc2VsZiE8L3A+CgogICAgPGlmcmFtZQogICAgICBzdHlsZT0iYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpIgogICAgICB3aWR0aD0iMTAwJSIKICAgICAgaGVpZ2h0PSI0MDAiCiAgICAgIHNyYz0iaHR0cHM6Ly93d3cuZmlnbWEuY29tL2VtYmVkP2VtYmVkX2hvc3Q9c2hhcmUmdXJsPWh0dHBzJTNBJTJGJTJGd3d3LmZpZ21hLmNvbSUyRnByb3RvJTJGcURLdE4wbzBwZk5hbVVGS0tpdUJkNCUyRm9uVHJhay1IaUZpLVByb3RvdHlwZSUzRm5vZGUtaWQlM0QyJTI1M0E4MjA5JTI2c2NhbGluZyUzRHNjYWxlLWRvd24lMjZwYWdlLWlkJTNEMiUyNTNBMTg4MSUyNnN0YXJ0aW5nLXBvaW50LW5vZGUtaWQlM0QyJTI1M0E4MjA5IgogICAgICBhbGxvd2Z1bGxzY3JlZW4KICAgID48L2lmcmFtZT4KICAgIDxoMz5VU0VSIFRFU1RJTkc8L2gzPgogICAgPHA+CiAgICAgIEFmdGVyIHNldmVyYWwgaXRlcmF0aW9ucyBvZiBwcm90b3R5cGluZywgaXQgd2FzIHRpbWUgdG8gdGVzdCB0aGUKICAgICAgdHJvdWJsZXNob290aW5nIGFwcGxpY2F0aW9uIHdpdGggdGhvc2Ugd2hvIHdvdWxkIGJlIHVzaW5nIGl0IG9uIHRoZQogICAgICBkcmlsbCBzaXRlLiBEdWUgdG8gQ09WSUQtMTkgcmVzdHJpY3Rpb25zLCB0aGVzZSB1c2VyIHRlc3RzIHdlcmUKICAgICAgY29tcGxldGVseSB2aXJ0dWFsLgogICAgPC9wPgogICAgPHA+CiAgICAgIDxlbT5QYXJ0aWNpcGFudHM6IDwvZW0+IFdlIHRlc3RlZCB0aGUgaGlnaCBmaWRlbGl0eSBwcm90b3R5cGUgd2l0aCAxMSBpbgogICAgICBob3VzZSBwYXJ0aWNpcGFudHMgaW4gdGhlIGZvcm0gb2YgYm90aCBmaWVsZCByZXByZXNlbnRhdGl2ZXMsIGFuZAogICAgICBjdXN0b21lciBzZXJ2aWNlIHJlcHJlc2VudGF0aXZlcy4KICAgIDwvcD4KICAgIDxwPgogICAgICA8ZW0+UHVycG9zZTogPC9lbT4gVG8gZ2FpbiBwZXJzcGVjdGl2ZSBvbiB0aGUgbWVyaXQgb2YgdGhlIG9uVHJhawogICAgICBhcHBsaWNhdGlvbiBiYXNlZCBvbiB0aG9zZSB3aG8gd29yayB3aXRoIGN1c3RvbWVycyBkYWlseS4KICAgIDwvcD4KICAgIDxwPgogICAgICA8ZW0+VGFzazogPC9lbT4gVXNlcnMgZm9sbG93ZWQgdGhlIHN0ZXBzIGluIHRoZSB3b3JrZmxvdyBmcm9tIHNlbGVjdGluZwogICAgICBlcXVpcG1lbnQgYW5kIGNoYW5naW5nIGJhbmRzIGFsbCB0aGUgd2F5IHRocm91Z2ggY2FsaWJyYXRpb24uCiAgICA8L3A+CiAgICA8cD4KICAgICAgQWZ0ZXIgY29tcGxldGluZyB0aGUgc3RlcHMgaW52b2x2ZWQgaW4gdGhlIHVzZXIgdGVzdGluZyB0YXNrLCB3ZSBhc2tlZAogICAgICBwYXJ0aWNpcGFudHMgMyBMaWtlcnQgc2NhbGUgcXVlc3Rpb25zIHRvIGFzc2VzcyB0aGUgYXBw4oCZcyB1c2FiaWxpdHkuIE9uCiAgICAgIGEgc2NhbGUgZnJvbSAxIHRvIDUsIHdpdGggMSBiZWluZyB0aGUgbG93ZXN0L3dvcnN0IHNjb3JlLCBhbmQgNSBiZWluZwogICAgICB0aGUgaGlnaGVzdC9iZXN0IHNjb3JlLCB0aGV5IHJhdGVkOiBob3cgdXNlZnVsIHRoZSBhcHBsaWNhdGlvbiB3YXMsIGhvdwogICAgICB0aGV5IGVuam95ZWQgdXNpbmcgdGhlIGFwcGxpY2F0aW9uLCBhbmQgaXTigJlzIHVzZWZ1bG5lc3MgaW4gdGhlIGZpZWxkLiBBcwogICAgICB5b3UgY2FuIHNlZSwgZWFjaCBvZiB0aGVzZSAzIGNhdGVnb3JpZXMgZm91bmQgcmF0aW5ncyBhYm92ZSA0LjUvNS4KICAgIDwvcD4KCiAgICA8aW1nIHNyYz0iYXNzZXRzL29uLXRyYWsvcmF0aW5nLnBuZyIgYWx0PSJyYXRpbmdzIiAvPgoKICAgIDxwPgogICAgICBBcyBmYXIgYXMgY3JpdGljYWwgZmVlZGJhY2sgZ29lcywgSSBzb3J0ZWQgbXkgcmVzdWx0cyBpbnRvIHdoYXQgd29ya2VkLAogICAgICBhbmQgd2hhdCBjb3VsZCBiZSBpbXByb3ZlZCB1cG9uIGFzIHNob3duIGJlbG93OgogICAgPC9wPgoKICAgIDxoND5XaGF0IFdvcmtlZDo8L2g0PgogICAgPHVsPgogICAgICA8bGk+Q2xlYW4gVUkuPC9saT4KICAgICAgPGxpPlN0cmFpZ2h0Zm9yd2FyZCBpbnN0cnVjdGlvbnMgdGhhdCBhcmUgbmljZSBhbmQgc2ltcGxlLjwvbGk+CiAgICAgIDxsaT5GZWx0IGxpa2UgYSBnYW1lLjwvbGk+CiAgICAgIDxsaT5IZWxwcyBmb2N1cyBhbWlkIHRoZSBsYXJnZSBhbW91bnRzIG9mIGRhdGEgb24gdGhlIGxvY2F0b3IuPC9saT4KICAgICAgPGxpPgogICAgICAgIERpYWdyYW1zIGFyZSBlYXNpZXIgdGhhbiB0cnlpbmcgdG8gZGVzY3JpYmUgaXQgb3ZlciB0aGUgcGhvbmUuCiAgICAgICAgRHVtbXktcHJvb2YuIgogICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8aDQ+V2hhdCBXb3JrZWQ6PC9oND4KICAgIDx1bD4KICAgICAgPGxpPgogICAgICAgIFRlc3RlcnMgd291bGQgaGF2ZSBsaWtlZCBhIGxvY2F0b3IgaW4gdGhlaXIgaGFuZHMgd2hpbGUgdGVzdGluZyAoYW4KICAgICAgICBhZmZvcmRhbmNlIHRoYXQgdGVzdGluZyBvbmxpbmUgZHVlIHRvIENPVklELTE5IGRpZCBub3QgYWxsb3cgZm9yKS4KICAgICAgPC9saT4KICAgICAgPGxpPk1vcmUgZXhwbGFuYXRpb24gYXMgdG8gd2h5IHRoZXkgYXJlIGRvaW5nIGVhY2ggc3RlcC48L2xpPgogICAgICA8bGk+CiAgICAgICAgQWJpbGl0eSB0byBjaGVjayBmb3IgZWxlY3RyaWNhbCBmYWlsdXJlIHVwb24gY2xvc2luZyBkcmlsbCBoZWFkCiAgICAgICAgY29tcGFydG1lbnQuCiAgICAgIDwvbGk+CiAgICAgIDxsaT5Nb3JlIGZyZWUgZm9ybSBleHBsb3JhdGlvbi48L2xpPgogICAgICA8bGk+CiAgICAgICAgSW50ZWdyYXRpb24gaW50byBEaWdpIEd1aWRlLCB0aGUgY3VycmVudCBhcHBsaWNhdGlvbiBmb3IKICAgICAgICB0cm91Ymxlc2hvb3RpbmcsIGFuZCBtYW51YWwgcmVmZXJlbmNlLgogICAgICA8L2xpPgogICAgPC91bD4KCiAgICA8aDM+UkVGTEVDVElPTjwvaDM+CiAgICA8cD4KICAgICAgVGhpcyBwcm9qZWN0IHdhcyBhIGxvdCBvZiBmdW4sIGl0IHdhcyBhbiBpbmNyZWRpYmxlIGxlYXJuaW5nIG9wcG9ydHVuaXR5CiAgICAgIGZvciBob3cgdG8gY3JlYXRlIG1vYmlsZSBhcHBsaWNhdGlvbnMgd2l0aCBhIG1vcmUgZ2FtaWZpZWQgbG9vayBhbmQKICAgICAgZmVlbCwgd2hpY2ggaGVscHMgcmVkdWNlIHRoZSB0ZWRpdW0gaW4gZXZlcnlkYXkgbGlmZS4gQWx0aG91Z2ggbW9zdAogICAgICBzaXRlcyB0aGF0IGNvdmVyIHN0ZXAgYnkgc3RlcCBpbnN0cnVjdGlvbnMgdGVuZCB0byBoYXZlIGEgbG9uZyBzY3JvbGxpbmcKICAgICAgZXhwZXJpZW5jZSwgdGhlIHNoaWZ0IHRvIHNtYWxsLCBxdWlja2x5IHJlYWQgcGFnZXMgaGF0IHVzZXJzIGNvdWxkIHN3aXBlCiAgICAgIHRob3VnaCBzaGlmdGVkIHRoZSBleHBlcmllbmNlIHRvIGFuIGVudGlyZWx5IG5ldyBsZXZlbC4gVGhpcyBmb2N1cyBvbgogICAgICBzaW1wbGUsIGFuZCBjbGVhbiBVSSB3aWxsIGJlIGEgaHVnZSBmb2N1cyBhcyBJIGNvbnRpbnVlIHRvIGRlc2lnbiBtb3JlCiAgICAgIGFwcGxpY2F0aW9ucy4KICAgIDwvcD4KICA8L2Rpdj4KPC9Qb3J0Zm9saW9QaWVjZT4K"},null]}
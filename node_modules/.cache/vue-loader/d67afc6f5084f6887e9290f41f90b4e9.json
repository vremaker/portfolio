{"remainingRequest":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/on-trak.vue?vue&type=template&id=8500e9f4&scoped=true&","dependencies":[{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/on-trak.vue","mtime":1658201756136},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655365183723},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js","mtime":1655365183722}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxQb3J0Zm9saW9QaWVjZT4KICAgPGRpdiBjbGFzcz0iY292ZXItaW1nIGQtZmxleCBmbGV4LWNvbHVtbiI+CiAgICAgIDxpbWcgY2xhc3M9ImhlYWRlci1pbWciIHNyYz0iL2Fzc2V0cy90aWxlcy9vbi10cmFrLnBuZyIgYWx0PSJEQ0kiIC8+CiAgICA8ZGl2IGNsYXNzPSJ0aXRsZSI+CiAgICAgIDxoMT5PblRyYWsgVHJvdWJsZXNob290aW5nPC9oMT4KICAgICAgPHA+CiAgICAgICAgRW1wb3dlcmluZyB1c2VycyB0byByZXNvbHZlIHByb2R1Y3QgY29uZmxpY3RzIHdpdGhvdXQgY2FsbGluZyBmb3IgaGVscAogICAgICA8L3A+CiAgICAgIDxociAvPgogICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgIDxwPgogICAgIER1cmluZyB0aGUgc3VtbWVyIG9mIDIwMjEsIEkgd2FzIGdpdmVuIHRoZSBvcHBvcnR1bml0eSB0byBpbnRlcm4gYXQgRGlnaXRhbCBDb250cm9sIEluYy4gKERDSSksIGEgY29tcGFueSB0aGF0IHNwZWNpYWxpemVzIGluIGxvY2F0aW5nIHRlY2hub2xvZ3kgZm9yIGhvcml6b250YWwgZGlyZWN0aW9uYWwgZHJpbGxpbmcgKEhERCkuIFRoZWlyIHRvb2wgc2V0IHRyYWNrcyB0aGUgbG9jYXRpb24gb2YgdGhlIGRyaWxsIGhlYWQgdW5kZXJncm91bmQgdGhyb3VnaCBhIHR3byBwYXJ0IGhhcmR3YXJlIHN5c3RlbSBjb25zaXN0aW5nIG9mIGEgdHJhbnNtaXR0ZXIgYW5kIGEgbG9jYXRvci4gVGhlc2Ugc3lzdGVtcyBleGhpYml0IGlzc3VlcyBhcmUgZmFpcmx5IGNvbW1vbiwgYW5kIHRoZSBjdXN0b21lciBzZXJ2aWNlIGRlcGFydG1lbnQgaGFzIHN0YW5kYXJkaXplZCBwcm9jZWR1cmVzIGZvciB0cm91Ymxlc2hvb3Rpbmcgb3ZlciB0aGUgcGhvbmUuIEZvciB0aGlzIHByb2plY3QsIEkgd2FzIHRhc2tlZCB3aXRoIGNyZWF0aW5nIGEgdHJvdWJsZXNob290aW5nIGFwcGxpY2F0aW9uIHRoYXQgd291bGQgZW1wb3dlciB1c2VycyB0byByZXNvbHZlIHByb2R1Y3QgaXNzdWVzIHdpdGhvdXQgaGF2aW5nIHRvIGNhbGwgY3VzdG9tZXIgc2VydmljZSBmb3IgYXNzaXN0YW5jZS4gTXkgZGVzaWduIGZvY3VzZWQgb24gdGhlIG1vc3QgY29tbW9uIGlzc3VlLCAiTm8gRGF0YSBvbiBMb2NhdG9yIiwgd2hlcmUgdGhlIGxvY2F0b3IgZG9lcyBub3Qgc2hvdyB0aGUgbG9jYXRpb24gaW5mb3JtYXRpb24gZm9yIHRoZSB1bmRlcmdyb3VuZCB0cmFuc21pdHRlci4KICAgIDwvcD4KCiAgICA8aDI+Q29tcGV0aXRpdmUgQW5hbHlzaXM8L2gyPgogICAgPHA+CiAgICAgIFRvIGdhaW4gYW4gdW5kZXJzdGFuZGluZyBvZiB0aGUgcHJvYmxlbSBzcGFjZSwgSSBiZWdhbiB3aXRoIGNvbXBldGl0aXZlIGFuYWx5c2lzLiA8L3A+CiAgICAgIDxiPlNpdGVzIEFuYWx5emVkPC9iPgogICAgICA8dWw+CiAgICAgICAgPGxpPiBEQ0nigJlzIG93biBoZWxwZGVzayBzaXRlPC9saT4KICAgICAgICA8bGk+IERDSeKAmXMgY3VycmVudCBwcm9kdWN0IG1hbnVhbC9oZWxwZGVzayBtb2JpbGUgYXBwbGljYXRpb248L2xpPgogICAgICAgIDxsaT4gQXBwbGXigJlzIGhlbHBkZXNrIHNpdGU8L2xpPiAKICAgICAgICA8bGk+Rm9yZOKAmXMgaGVscGRlc2sgc2l0ZTwvbGk+CiAgICAgICAgPGxpPiBpRml4SXTigJlzIGNyb3dkc291cmNlZCB0cm91Ymxlc2hvb3Rpbmcgc2l0ZSA8L2xpPgogICAgICA8L3VsPgogICAgICA8Yj5LZXkgRmluZGluZ3M8L2I+CiAgICAgIDx1bD4KICAgICAgICA8bGk+IEN1cnJlbnQgc29sdXRpb25zIHRlbmQgdG8gYmUgb3ZlcndoZWxtaW5nbHkgdGV4dCBoZWF2eSA8L2xpPgogICAgICAgIDxsaT5Vc2UgbGlua3MgYW5kIHN1YmhlYWRpbmdzIGFzIHRoZSBtYWluIG1ldGhvZCBvZiBuYXZpZ2F0aW9uIDwvbGk+CiAgICAgICAgPGxpPkl0IGNhbiBiZSBkaWZmaWN1bHQgZm9yIHVzZXJzIHRvIHRyYW5zbGF0ZSB0ZXh0IGludG8gY29uY3JldGUgYWN0aW9ucyB0byBiZSBhcHBsaWVkIHRvCiAgICAgIHRoZSBoYXJkd2FyZSBzeXN0ZW08L2xpPgogICAgICA8L3VsPgogICAgICA8Yj5Tb2x1dGlvbiBJbXBsaWNhdGlvbnM8L2I+CiAgICAgIDx1bD4KICAgICAgICA8bGk+TW9yZSB2aXN1YWwgZWxlbWVudHM8L2xpPgogICAgICAgIDxsaT5Gb2N1cyBvbiBvbmUgc3RlcCBhdCBhIHRpbWU8L2xpPgogICAgICAgIDxsaT5JbmNsdWRlIGdhbWlmaWNhdGlvbiBlbGVtZW50cyB0byByZWR1Y2UgZnJ1c3RyYXRpb248L2xpPgogICAgICA8L3VsPgogICAgPC9wPgogICAgPGgyPlVzZXIgUGVyc29uYTwvaDI+CiAgICA8cD4KICAgICAgRnJvbSB0aGUgZm91bmRhdGlvbmFsIGluZm9ybWF0aW9uIEkgd2FzIGdpdmVuIHJlZ2FyZGluZyB0aGUgZHJpbGxlcnMKICAgICAgdGhhdCB0eXBpY2FsbHkgd29yayB3aXRoIHRoZSBsb2NhdGluZyBlcXVpcG1lbnQsIEkgY3JlYXRlZCB0aGUgcGVyc29uYSAKICAgICAgb2YgTWFydGluIERvdWdoZXJ0eS4gQXMgdXNlcidzIGdhaW4gZXhwZXJpZW5jZSBvbiB0aGUgZHJpbGwgc2l0ZSwgdHJvdWJsZXNob290aW5nIAogICAgICBiZWNvbWVzIG1vcmUgaW50dWl0aXZlLCBzbyBteSBwZXJzb25hLCBNYXJ0aW4sIG5lZWRlZCB0byBiZSBuZXcgdG8gZHJpbGxpbmcgdG8gZW5zdXJlIHRoYXQgCiAgICAgIHRoZSBzb2x1dGlvbiBpcyBkaWdlc3RpYmxlIGF0IGFsbCBza2lsbCBsZXZlbHMuIAogICAgPC9wPgoKICAgIDxpbWcgc3JjPSJhc3NldHMvb24tdHJhay9wZXJzb25hLnBuZyIgYWx0PSJtYXJ0aW4gcGVyc29uYSIgLz4KCiAgICA8aDI+V29ya2Zsb3c8L2gyPgogICAgPHA+CiAgICAgIFRoaXMgYXBwbGljYXRpb24gZm9jdXNlZCBvbiB0aGUg4oCcTm8gRGF0YSBvbgogICAgICBMb2NhdG9y4oCdIHRyb3VibGVzaG9vdGluZyBmbG93IHByb3ZpZGVkIGJ5IGN1c3RvbWVyIHNlcnZpY2UuCiAgICAgIEluIHRhbGtpbmcgdG8gc3Rha2Vob2xkZXJzIGFuZCBtZW1iZXJzIG9mIHRoZSBjdXN0b21lciBzZXJ2aWNlCiAgICAgIHN1cHBvcnQgdGVhbSwgdGhlcmUgc2VlbWVkIHRvIGJlIGEgdmFyaWV0eSBvZiBwYXRoIHRvIGdvIGFib3V0IHRyb3VibGVzaG9vdGluZyB0aGUgc2FtZSBpc3N1ZS4gCiAgICAgIEFmdGVyIGNvbnN1bHRpbmcgdGhlIGhlYWQgb2YgY3VzdG9tZXIgc2VydmljZSwgSQogICAgICBjcmVhdGVkIGEgZmluYWxpemVkIHZlcnNpb24gb2YgYSB3b3JrZmxvdyB3aGljaCBkaXNwbGF5cyBhbGwgdGhlCiAgICAgcGF0aHMgYSB1c2VyIGNvdWxkIHRha2Ugd2hpbGUgdGhleSB0cm91Ymxlc2hvb3QgdGhlaXIgbG9jYXRvci4KICAgIDwvcD4KICAgIDxpbWcKICAgICAgc3JjPSJhc3NldHMvb24tdHJhay93b3JrZmxvdy5wbmciCiAgICAgIGFsdD0iZmxvdyB0aHJvdWdoIHN0ZXBzIGluIHRoZSBhcHAiCiAgICAvPgogICAgPHA+CiAgICAgIFRoaXMgcHJvY2VzcyBiZWdpbnMgd2l0aCB2ZXJpZnlpbmcgdGhlIGVxdWlwbWVudCBpbiB1c2UsIGFuZCB1c2VzIGEgZGVjaXNpb24gdHJlZSB0bwogICAgICB3YWxrIHRocm91Z2ggcG9zc2libGUgZml4ZXMgdGhhdCB0aGUgdXNlciBjYW4gdHJ5IG9uIHRoZWlyIG93biB1bnRpbAogICAgICBlaXRoZXIgdGhlaXIgcHJvYmxlbSBpcyBzb2x2ZWQsIGFuZCB0aGV5IGNhbiBnZXQgYmFjayB0byBkcmlsbGluZywgb3IKICAgICAgdGhleSBkaWFnbm9zZSB0aGF0IHRoZWlyIGlzc3VlIGlzIHRvbyBjb21wbGljYXRlZCB0byBmaXggb24gdGhlaXIgb3duLAogICAgICBhbmQgcmVxdWlyZXMgY29udGFjdCB3aXRoIERDSSB0byBkZWFsIHdpdGggcmFyZSwgbW9yZSBjb21wbGljYXRlZAogICAgICByZXBsYWNlbWVudCBvciByZXBhaXIgb3B0aW9ucy4KICAgIDwvcD4KICAgIDxoMj5Qcm90b3R5cGU8L2gyPgogICAgPHA+CiAgICAgIFRoZSBmaW5hbCBkZXNpZ24gZm9yIG9uVHJhayBmb3VuZCBpbnNwaXJhdGlvbiBmcm9tIHRoZSBpY29uaWMgd29yZGxlc3MgaW5zdHJ1Y3Rpb24gZ3VpZGVzIHVzZWQgYnkgSWtlYSB0byBndWlkZSB1c2VycyB0aHJvdWdoIHRoZSBmdXJuaXR1cmUgY29uc3RydWN0aW9uIHByb2Nlc3MuIFRoZSBtYWluIGdvYWwgb2YgdGhpcyBwcm90b3R5cGUgd2FzIHRvIGJlIGEgY2xlYW4sIHBsZWFzYW50LCBmdW4sIGFuZCBpbnR1aXRpdmUgZ3VpZGUgdG93YXJkcyBzb2x2aW5nIGFueSBmcnVzdHJhdGluZyBpc3N1ZXMgd2hpY2ggbWlnaHQgb2NjdXIgb24gdGhlIGpvYi4KICAgIDwvcD4KICAgIDxwPgogICAgICBUaGUgaGlnaC1maWRlbGl0eSBwcm90b3R5cGUgYWxsb3dzIHlvdSB0byB3YWxrIHRocm91Z2ggdGhlIG11bHRpcGxlIHBhdGh3YXlzIGludm9sdmVkIGluIHRoaXMgdXNlci1kcml2ZW4gcHJvYmxlbS1zb2x2aW5nIHByb2Nlc3MgZm9yIHRoZSDigJxObyBEYXRhIG9uIExvY2F0b3LigJ0gZmxvdyBhcyB0aGUgdXNlciBpcyB3YWxrZWQgdGhyb3VnaCBhIGNob29zZS15b3VyLW93bi1hZHZlbnR1cmUgc3R5bGVkIGludGVyYWN0aW9uLgogICAgPC9wPgogICAgPHA+VXNlIHRoZSBwcm90b3R5cGUgYmVsb3cgdG8gZXhwbG9yZSB0aGUgaW50ZXJhY3Rpb25zIGZvciB5b3Vyc2VsZiE8L3A+CgogICAgPGlmcmFtZSBTYW1lU2l0ZT1Ob25lIHN0eWxlPSJib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7IiB3aWR0aD0iMTAwJSIgaGVpZ2h0PSI0NTAiIHNyYz0iaHR0cHM6Ly93d3cuZmlnbWEuY29tL2VtYmVkP2VtYmVkX2hvc3Q9c2hhcmUmdXJsPWh0dHBzJTNBJTJGJTJGd3d3LmZpZ21hLmNvbSUyRnByb3RvJTJGT3YwRlJNaXR4cktHSGljdEJIVHhNZSUyRm9uVHJhay0oQ29weSklM0ZwYWdlLWlkJTNEMiUyNTNBMTg4MSUyNm5vZGUtaWQlM0QyJTI1M0ExODgxJTI2dmlld3BvcnQlM0Q1MjAlMjUyQzI5MSUyNTJDMC4xJTI2c2NhbGluZyUzRHNjYWxlLWRvd24lMjZzdGFydGluZy1wb2ludC1ub2RlLWlkJTNEMiUyNTNBODIwOSIgYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPgogICAgPGgyPlVTRVIgVEVTVElORzwvaDI+CiAgICA8cD4KICAgICAgQWZ0ZXIgc2V2ZXJhbCBpdGVyYXRpb25zIG9mIHByb3RvdHlwaW5nLCBpdCB3YXMgdGltZSB0byB0ZXN0IHRoZQogICAgICB0cm91Ymxlc2hvb3RpbmcgYXBwbGljYXRpb24gd2l0aCB0aG9zZSB3aG8gd291bGQgYmUgdXNpbmcgaXQgb24gdGhlCiAgICAgIGRyaWxsIHNpdGUuIER1ZSB0byBDT1ZJRC0xOSByZXN0cmljdGlvbnMsIHRoZXNlIHVzZXIgdGVzdHMgd2VyZQogICAgICBjb21wbGV0ZWx5IHZpcnR1YWwuCiAgICA8L3A+CiAgICA8cD4KICAgICAgPGI+UGFydGljaXBhbnRzOiA8L2I+IFdlIHRlc3RlZCB0aGUgaGlnaC1maWRlbGl0eSBwcm90b3R5cGUgd2l0aCAxMSBpbgogICAgICBob3VzZSBwYXJ0aWNpcGFudHMgaW4gdGhlIGZvcm0gb2YgYm90aCBmaWVsZCByZXByZXNlbnRhdGl2ZXMsIGFuZAogICAgICBjdXN0b21lciBzZXJ2aWNlIHJlcHJlc2VudGF0aXZlcy4KICAgIDwvcD4KICAgIDxwPgogICAgICA8Yj5QdXJwb3NlOiA8L2I+IFRvIGdhaW4gcGVyc3BlY3RpdmUgb24gdGhlIG1lcml0IG9mIHRoZSBvblRyYWsKICAgICAgYXBwbGljYXRpb24gYmFzZWQgb24gdGhvc2Ugd2hvIHdvcmsgd2l0aCBjdXN0b21lcnMgZGFpbHkuCiAgICA8L3A+CiAgICA8cD4KICAgICAgPGI+VGFzazogPC9iPiBVc2VycyBmb2xsb3dlZCB0aGUgc3RlcHMgaW4gdGhlIHdvcmtmbG93IGZyb20gc2VsZWN0aW5nCiAgICAgIGVxdWlwbWVudCBhbmQgY2hhbmdpbmcgYmFuZHMgYWxsIHRoZSB3YXkgdGhyb3VnaCBjYWxpYnJhdGlvbi4KICAgIDwvcD4KICAgIDxwPgogICAgICBBZnRlciBjb21wbGV0aW5nIHRoZSBzdGVwcyBpbnZvbHZlZCBpbiB0aGUgdXNlciB0ZXN0aW5nIHRhc2ssIHdlIGFza2VkCiAgICAgIHBhcnRpY2lwYW50cyAzIExpa2VydCBzY2FsZSBxdWVzdGlvbnMgdG8gYXNzZXNzIHRoZSBhcHDigJlzIHVzYWJpbGl0eS4gT24KICAgICAgYSBzY2FsZSBmcm9tIDEgdG8gNSwgd2l0aCAxIGJlaW5nIHRoZSBsb3dlc3Qvd29yc3Qgc2NvcmUsIGFuZCA1IGJlaW5nCiAgICAgIHRoZSBoaWdoZXN0L2Jlc3Qgc2NvcmUsIHRoZXkgcmF0ZWQ6IGhvdyB1c2VmdWwgdGhlIGFwcGxpY2F0aW9uIHdhcywgaG93CiAgICAgIHRoZXkgZW5qb3llZCB1c2luZyB0aGUgYXBwbGljYXRpb24sIGFuZCBpdOKAmXMgdXNlZnVsbmVzcyBpbiB0aGUgZmllbGQuIEFzCiAgICAgIHlvdSBjYW4gc2VlLCBlYWNoIG9mIHRoZXNlIDMgY2F0ZWdvcmllcyBmb3VuZCByYXRpbmdzIGFib3ZlIDQuNS81LgogICAgPC9wPgoKICAgIDxpbWcgc3JjPSJhc3NldHMvb24tdHJhay9yYXRpbmcucG5nIiBhbHQ9InJhdGluZ3MiIC8+CgogICAgPHA+CiAgICAgIEFzIGZhciBhcyBjcml0aWNhbCBmZWVkYmFjayBnb2VzLCBJIHNvcnRlZCBteSByZXN1bHRzIGludG8gd2hhdCB3b3JrZWQsCiAgICAgIGFuZCB3aGF0IGNvdWxkIGJlIGltcHJvdmVkIHVwb24gYXMgc2hvd24gYmVsb3c6CiAgICA8L3A+CgogICAgPGgzPldoYXQgV29ya2VkOjwvaDM+CiAgICA8dWw+CiAgICAgIDxsaT5DbGVhbiBVSS48L2xpPgogICAgICA8bGk+U3RyYWlnaHRmb3J3YXJkIGluc3RydWN0aW9ucyB0aGF0IGFyZSBuaWNlIGFuZCBzaW1wbGUuPC9saT4KICAgICAgPGxpPkZlbHQgbGlrZSBhIGdhbWUuPC9saT4KICAgICAgPGxpPkhlbHBzIGZvY3VzIGFtaWQgdGhlIGxhcmdlIGFtb3VudHMgb2YgZGF0YSBvbiB0aGUgbG9jYXRvci48L2xpPgogICAgICA8bGk+CiAgICAgICAgRGlhZ3JhbXMgYXJlIGVhc2llciB0aGFuIHRyeWluZyB0byBkZXNjcmliZSBpdCBvdmVyIHRoZSBwaG9uZS4KICAgICAgICBEdW1teS1wcm9vZi4KICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPGgzPldoYXQgV29ya2VkOjwvaDM+CiAgICA8dWw+CiAgICAgIDxsaT4KICAgICAgICBUZXN0ZXJzIHdvdWxkIGhhdmUgbGlrZWQgYSBsb2NhdG9yIGluIHRoZWlyIGhhbmRzIHdoaWxlIHRlc3RpbmcgKGFuCiAgICAgICAgYWZmb3JkYW5jZSB0aGF0IHRlc3Rpbmcgb25saW5lIGR1ZSB0byBDT1ZJRC0xOSBkaWQgbm90IGFsbG93IGZvcikuCiAgICAgIDwvbGk+CiAgICAgIDxsaT5Nb3JlIGV4cGxhbmF0aW9uIGFzIHRvIHdoeSB0aGV5IGFyZSBkb2luZyBlYWNoIHN0ZXAuPC9saT4KICAgICAgPGxpPgogICAgICAgIEFiaWxpdHkgdG8gY2hlY2sgZm9yIGVsZWN0cmljYWwgZmFpbHVyZSB1cG9uIGNsb3NpbmcgZHJpbGwgaGVhZAogICAgICAgIGNvbXBhcnRtZW50LgogICAgICA8L2xpPgogICAgICA8bGk+TW9yZSBmcmVlIGZvcm0gZXhwbG9yYXRpb24uPC9saT4KICAgICAgPGxpPgogICAgICAgIEludGVncmF0aW9uIGludG8gRGlnaSBHdWlkZSwgdGhlIGN1cnJlbnQgYXBwbGljYXRpb24gZm9yCiAgICAgICAgdHJvdWJsZXNob290aW5nLCBhbmQgbWFudWFsIHJlZmVyZW5jZS4KICAgICAgPC9saT4KICAgIDwvdWw+CgogICAgPGgyPlJFRkxFQ1RJT048L2gyPgogICAgPHA+CiAgICAgIFRoaXMgcHJvamVjdCB3YXMgYSBsb3Qgb2YgZnVuLCBpdCB3YXMgYW4gaW5jcmVkaWJsZSBsZWFybmluZyBvcHBvcnR1bml0eQogICAgICBmb3IgaG93IHRvIGNyZWF0ZSBtb2JpbGUgYXBwbGljYXRpb25zIHdpdGggYSBtb3JlIGdhbWlmaWVkIGxvb2sgYW5kCiAgICAgIGZlZWwsIHdoaWNoIGhlbHBzIHJlZHVjZSB0aGUgdGVkaXVtIGluIGV2ZXJ5ZGF5IGxpZmUuIEFsdGhvdWdoIG1vc3QKICAgICAgc2l0ZXMgdGhhdCBjb3ZlciBzdGVwLWJ5LXN0ZXAgaW5zdHJ1Y3Rpb25zIHRlbmQgdG8gaGF2ZSBhIGxvbmcgc2Nyb2xsaW5nCiAgICAgIGV4cGVyaWVuY2UsIHRoZSBzaGlmdCB0byBzbWFsbCwgcXVpY2tseSByZWFkIHBhZ2VzIGhhdCB1c2VycyBjb3VsZCBzd2lwZQogICAgICB0aG91Z2ggc2hpZnRlZCB0aGUgZXhwZXJpZW5jZSB0byBhbiBlbnRpcmVseSBuZXcgbGV2ZWwuIFRoaXMgZm9jdXMgb24KICAgICAgc2ltcGxlLCBhbmQgY2xlYW4gVUkgd2lsbCBiZSBhIGZvY3VzIGFzIEkgY29udGludWUgdG8gZGVzaWduIG1vcmUKICAgICAgYXBwbGljYXRpb25zLgogICAgPC9wPgo8ZGl2IGNsYXNzPSJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgdGV4dC1jZW50ZXIganVzdGlmeS1jb250ZW50LWJldHdlZW4iPgogICAgICA8cm91dGVyLWxpbmsgdG89Ii9maW4tbGl0Ij48Yj5QcmV2aW91cyBQcm9qZWN0OiA8L2I+IENoaW1lIEZpbmFuY2lhbCBMaXRlcmFjeTwvcm91dGVyLWxpbms+CiAgICAgIDxyb3V0ZXItbGluayB0bz0iL2NvbW1vbi1ncm91bmQiPjxiPk5leHQgUHJvamVjdDogPC9iPkNvbW1vbiBHcm91bmQ8L3JvdXRlci1saW5rPgogICAgICAKICAgICAgPC9kaXY+CgogICAgICAKPC9Qb3J0Zm9saW9QaWVjZT4K"},null]}
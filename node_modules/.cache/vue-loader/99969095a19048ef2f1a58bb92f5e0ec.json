{"remainingRequest":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\vrema\\Desktop\\portfolio\\src\\views\\portfolio\\night-owl.vue?vue&type=template&id=c2232bc4&","dependencies":[{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\src\\views\\portfolio\\night-owl.vue","mtime":1645582044946},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643314498369},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1643314507388},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1643314498369},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\index.js","mtime":1643314507386}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
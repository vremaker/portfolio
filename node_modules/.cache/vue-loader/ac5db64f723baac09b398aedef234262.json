{"remainingRequest":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/nature.vue?vue&type=template&id=66491c15&scoped=true&","dependencies":[{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/nature.vue","mtime":1657577947091},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655365183723},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js","mtime":1655365183722}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHt2YXIgX3ZtPXRoaXM7dmFyIF9oPV92bS4kY3JlYXRlRWxlbWVudDt2YXIgX2M9X3ZtLl9zZWxmLl9jfHxfaDtyZXR1cm4gX2MoJ1BvcnRmb2xpb1BpZWNlJyxbX2MoJ2Rpdicse3N0YXRpY0NsYXNzOiJ0aXRsZSJ9LFtfYygnaDEnLFtfdm0uX3YoIkFjY2VzcyB0byBOYXR1cmUgYW5kIENyaW1lIildKSxfYygncCcsW192bS5fdigiIEEgcXVhbnRpdGF0aXZlIGludmVzdGlnYXRpb24gaW50byB0aGUgcG90ZW50aWFsIGltcGFjdHMgdGhhdCBoYXZpbmcgYWNjZXNzIHRvIG5hdHVyZSB3b3VsZCBoYXZlIG9uIGNyaW1lIHJhdGVzIGFyb3NzIHRoZSB2YXJpb3VzIG5laWdoYm9yaG9vZHMgd2l0aGluIFNlYXR0bGUsIFdhc2hpbmd0b24uIFRoaXMgYW5hbHlzaXMgd2FzIGRvbmUgdXNpbmcgSnV5cGl0ZXIgbm90ZWJvb2suIFlvdSBjYW4gdmlldyB0aGUgR2l0aHViIFJlcG9zaXRvcnkgIiksX2MoJ2EnLHthdHRyczp7ImhyZWYiOiJodHRwczovL2dpdGh1Yi5jb20vdnJlbWFrZXIvaGNkZS00MTAtZmluYWwvIn19LFtfdm0uX3YoIkhlcmUiKV0pXSksX2MoJ2hyJyldKSxfYygnaDInLFtfdm0uX3YoIkFic3RyYWN0IildKSxfYygncCcsW192bS5fdigiIE5hdHVyZSBoYXMgYSBodWdlIGltcGFjdCBvbiBvdmVyYWxsIGh1bWFuIHdlbGwgYmVpbmcuIFRoaXMgc3R1ZHkgc291Z2h0IHRvIHVuZGVyc3RhbmQgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIGFjY2VzcyB0byBuYXR1cmFsIHNwYWNlcywgc3VjaCBhcyBwYXJrcywgYW5kIHRoZSBhbW91bnQgb2YgY3JpbWUgaW4gYSBnaXZlbiBhcmVhLiBUaGlzIHN0dWR5IGZvY3VzZWQgb24gdHdvIGNvbmRpdGlvbnM6IGhpZ2ggY3JpbWUgYW5kIGhpZ2ggcGFya3MuIEhpZ2ggY3JpbWUgbWVhbnQgdGhhdCB0aGVyZSB3YXMgYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBjcmltZSB0aGFuIHBhcmtzLCB3aGlsZSBoaWdoIHBhcmtzIG1lYW50IHRoZXJlIHdhcyBhIGhpZ2hlciBwZXJjZW50YWdlIG9mIHBhcmtzIHRoYW4gdGhlcmUgd2FzIG9mIGNyaW1lLiAiKSxfYygnYnInKSxfYygnYnInKSxfdm0uX3YoIiBUaGUgZmlyc3QgcGFydCBvZiB0aGUgc3R1ZHkgaW52ZXN0aWdhdGVkIHRoZSBxdWVzdGlvbjogRG8gYXJlYXMgd2l0aCBtb3JlIGdyZWVuc3BhY2UgaGF2ZSBsZXNzIGNyaW1lPyBPbiBhdmVyYWdlLCB0aGUgaGlnaCBjcmltZSBjb25kaXRpb24gaGFkIGFib3V0IGhhbGYgdGhlIGdyZWVuc3BhY2Ugb2YgdGhlIGhpZ2ggcGFyayBjb25kaXRpb24uIE9uIGF2ZXJhZ2UsIHRoZSBoaWdoIHBhcmsgY29uZGl0aW9uIGFsc28gaGFkIHNpZ25pZmljYW50bHkgbGVzcyBjcmltZSB0aGFuIHRoZSBoaWdoIGNyaW1lIGNvbmRpdGlvbi4gVGhpcyBpbmRpY2F0ZXMgdGhhdCBoYXZpbmcgbW9yZSBncmVlbnNwYWNlIG1pZ2h0IGhhdmUgYW4gaW1wYWN0IG9uIHRoZSBhbW91bnQgb2YgY3JpbWUuICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIFRoZSBzZWNvbmQgcGFydCBvZiB0aGlzIHN0dWR5IGludmVzdGlnYXRlZCB0aGUgcXVlc3Rpb246IERvZXMgdGhlIHRoZSBxdWFsaXR5IG9mIHBhcmtzIGluIHRoZSBhcmVhIGFmZmVjdCB0aGUgYW1vdW50IG9mIGNyaW1lPyBPbiBhdmVyYWdlLCB0aGUgaGlnaCBjcmltZSBjb25kaXRpb24gaGFkIGEgcmF0aW5nIHRoYXQgd2FzIC42IGxvd2VyIHRoYW4gdGhlIGhpZ2ggcGFya3MgY29uZGl0aW9uLiBUaGlzIGluZGljYXRlcyB0aGF0IHdoZW4gdGhlcmUgYXJlIG1vcmUgcGFya3MgaW4gYW4gYXJlYSwgdGhleSBhcmUgdXN1YWxseSBvZiBoaWdoZXIgcXVhbGl0eS4gIiksX2MoJ2JyJyksX2MoJ2JyJyksX3ZtLl92KCIgQWx0aG91Z2ggdGhlcmUgd2FzIGEgcmVsYXRpb25zaGlwIHNob3duIGluIHRoaXMgc3R1ZHksIGl0IGlzIGFsc28gY3JpdGljYWwgdG8gY29uc2lkZXIgb3RoZXIgdmFyaWFibGVzIHdoaWNoIG1pZ2h0IGhhdmUgYW4gaW1wYWN0IG9uIHRoaXMgcmVsYXRpb25zaGlwLCBuYW1lbHk6IHBvcHVsYXRpb24gaW4gYSBuZWlnaGJvcmhvb2QsIHNpemUgb2YgdGhlIG5laWdoYm9yaG9vZCwgc29jaW9lY29ub21pYyBzdGF0dXMgd2l0aGluIGEgbmVpZ2hib3Job29kLCBhbmQgdGhlIHJhdGlvIG9mIHN0b3JlcywgaG91c2luZyBhbmQgbmF0dXJhbCBzcGFjZSBpbiBhIG5laWdoYm9yaG9vZC4gIildKSxfYygnaDInLFtfdm0uX3YoIkludHJvZHVjdGlvbiBhbmQgQmFja2dyb3VuZCIpXSksX2MoJ3AnLFtfdm0uX3YoIiBQZW9wbGUgYXJlIGhpZ2hseSBpbXBhY3RlZCBieSB0aGUgZW52cmlvbm1lbnQgaW4gd2hpY2ggdGhleSBsaXZlLiBXZSwgYXMgaHVtYW5zLCBhcmUgaW5leHBsaWNhYmx5IGRyYXduIHRvIG5hdHVyZTsgd2hpY2ggY2FuIGhhdmUgbWFqb3IgZWZmZWN0cyBvbiBvdXIgd2VsbCBiZWluZy4gSGF2aW5nIGFjY2VzcyB0byBuYXR1cmUgYm90aCB3aWxkIGFuZCBkb21lc3RpY2F0ZWQgaGFzIGEgbWFqb3IgaW1wYWN0IG9uIG91ciBtZW50YWwgaGVhbHRoLiBGb3IgZXhhbXBsZSwgc3R1ZGllcyBoYXZlIHNob3duIHRoYXQgam9nZ2VycyB3aG8gZXhlcmNpc2UgaW4gbmF0dXJlIGZlZWwgbW9yZSByZXN0b3JlZCBhbmQgaGF2ZSBsZXNzIGFueGlldHksdGhhbiB0aG9zZSB3aG8gZXhlcmlzZSBhdCB0aGUgZ3ltIChMb3V2LCAzNSkuIFVuZm9ydHVuYXRlbHksIGhhdmluZyBhY2Nlc3MgdG8gc2FmZSBuYXR1cmUgaXMgbm90IGFsd2F5cyBhY2hpZXZhYmxlLiBCeSBsb29raW5nIGF0IHRoZSBhY2Nlc3NpYmlsaXR5IG9mIHBhcmtzLCBhcyB3ZWxsIGFzIHRoZSBxdWFsaXR5IG9mIHRob3NlIHBhcmtzLCBpdCBpcyBwb3NzaWJsZSB0byBnYWluIGEgYmV0dGVyIHVuZGVyc3RhbmRpbmcgb2YgdGhlaXIgaW1wYWN0IHdpdGhpbiB0aGUgZ3JlYXRlciBTZWF0dGxlIGNvbW11bml0eS4gIiksX2MoJ2JyJyksX2MoJ2JyJyksX3ZtLl92KCIgVGhpcyBzdHVkeSBzZWVrcyB0byB3b3JrIGFsb25nIGEgc2ltaWxhciBmcmFtZXdvcmsgdG8gdGhlIGJyb2tlbiB3aW5kb3cgdGhvZXJ5IHdoaWNoIHVzZXMgdGhlIG51bWJlciBvZiBicm9rZW4gd2luZG93cyB0byBndWFndWUgdGhlIGFtb3VudCBvZiBjcmltZSAtIG1vcmUgYnJva2VuIHdpbmRvd3MgaW5jaWRhdGVzIGhpZ2hlciByYXRlcyBvZiBjcmltZSAoS29nbG1laWVyKS4gQnV0LCBpbnN0ZWFkIG9mIHRoZSBudW1iZXIgb2YgYnJva2VuIHdpbmRvd3MsIHdlIHdpbGwgYmUgdXNpbmcgdGhlIG51bWJlciBvZiBwYXJrcywgYXMgd2VsbCBhcyB0aGUgcXVhbGl0eSBvZiB0aG9zZSBwYXJrcy4gIiksX2MoJ2JyJyksX2MoJ2JyJyksX3ZtLl92KCIgQWNyb3NzIGFsbCBvZiB0aGUgbGl0ZXJhdHVyZSB0aGF0IEkgcmV2aWV3ZWQsIGEga2V5IGZhY3RvciBpbiB0aGUgZWZmZWN0aXZlbmVzcyBvZiB0aGVzZSBwYXJrcyBhbmQgbmF0dXJhbCBzcGFjZXMgLSBhIGtleSBwZWljZSB0byBtYWtpbmcgdGhlc2UgcHVibGljIHNwYWNlcyBlZmZlY3RpdmUgaXMgdGhlIG5lZWQgZm9yIGEgaHVtYW4gY2VudGVyZWQgYXBwcm9hY2ggd2l0aCBjb21tdW5pdHkgZW5nYWdlbWVudCBkdXJpbmcgdGhlIGVyZWN0aW9uIG9mIHRoZXNlIGluc3RpdHV0aW9ucyAoS29nbG1laWVyLEdyZWVuIFNwYWNlIGFuZCBDcmltZSwgUm9zcykuIEl0IGlzIHRoZSBodW1hbiBjZW50ZXJlZCBpbnZvbHZtZW50IGluIHRoZSBkZXZlbG9wbWVudCBvZiB0aGVzZSBwcm9ncmFtcyBhbmQgc3BhY2VzIHRoYXQgbWFrZXMgdGhlIGRpZmZlcmVuY2UgaW4gdGhlc2UgaGFybSByZWR1Y3Rpb24gcHJvZ3JhbXMuIFRoZXNlIHNwYWNlcyBhcmUgbm90IGEgbWVhbnMgdG8gYW4gZW5kIGluIGFuIG9mIGl0IHNlbGYsIGJ1dCBhIHByb3h5IGZvciBjb21tdW5pdHkgZW5nYWdlbWVudCAoUm9zcykuIFRoaXMgcG9zZXMgYSBkaWZmaWN1bHQgcXVlc3Rpb24gd2l0aGluIG15IHJlc2VhcmNoIGluIHdoaWNoIHRoZSB3YXlzIGluIHdoaWNoIHRoZSBkYXRhYmFzZXMgSSBjaG9vc2UgZG8gbm90IHJlYWxseSBpbmNsdWRlIGRhdGEgYWJvdXQgY29tbXVuaXR5IGludm92bGVtZW50IHdpdGhpbiB0aGUgZGV2ZWxvcG1lbnQgb2YgdGhlc2UgYXJlYXMuIFNpbWlsYXJseSwgaW4gdGhlIGxpdGVyYXR1cmUgSSByZXZpZXdlZCwgaGF2aW5nIGdyZWVuc3BhY2UgZG9lcyBub3QgYXV0b21hdGljYWxseSByZWR1Y2UgY3JpbWU7IGluc3RlYWQsIHRoZXNlIHBhcmtzIG5lZWQgdG8gYmUgd2VsbCBtYWludGFpbmVkIGFuZCBtdXN0IG5vdCBoYXZlIGhpZGRlbiBzcG90cyB3aGVyZSBjcmltZSBjb3VsZCBvY2N1ciAoR3JlZW4gU3BhY2UgYW5kIENyaW1lKS4gTHVja2lseSwgaW4gdGhlIEdyZWVuc3BhY2UgZGF0YWJhc2UsIHRoZXJlIGlzIGEgdGllciByYW5raW5nIG9mIHRoZSBwYXJrcyBmcm9tIDEgLSA2IGluIHdoaWNoIDEgaXMgdGhlIGhpZ2hlc3QgdGllciBhbmQgNiBpcyB0aGUgbG93ZXN0IHRpZXIuIFRoaXMgcmFua2luZyBzY2FsZSBjb3VsZCBwcm9iYWJseSBiZSB1c2VkIHRvIG1pcnJvciB0aGUgcXVhbGl0eSBvZiB0aGUgcGFyayBhbmQgbW9yZSBkZWVwbHkgdW5kZXJzdGFuZCBwYXJrIHF1YWxpdHkgYXMgaXQgcmVsYXRlcyB0byBjcmltZSByYXRlcy4gIildKSxfYygnaDInLFtfdm0uX3YoIlJlc2VhcmNoIFF1ZXN0aW9ucyBhbmQgSHlwb3RoZXNlcyIpXSksX2MoJ3VsJyxbX2MoJ2xpJyxbX2MoJ2InLFtfdm0uX3YoIlJRMTogIildKSxfdm0uX3YoIiBEbyBhcmVhcyB3aXRoIG1vcmUgZ3JlZW5zcGFjZSBoYXZlIGxlc3MgY3JpbWU/IildKSxfYygnbGknLFtfYygnYicsW192bS5fdigiSDE6ICIpXSksX3ZtLl92KCIgSSBiZWxlaXZlIHRoYXQgdGhlcmUgd2lsbCBiZSBsZXNzIGNyaW1lIGluIGFyZWFzIHdpdGggbW9yZSBncmVlbnNwYWNlLiAiKV0pLF9jKCdsaScsW19jKCdiJyxbX3ZtLl92KCJSUTI6ICIpXSksX3ZtLl92KCIgRG9lcyB0aGUgdGhlIHF1YWxpdHkgb2YgcGFya3MgaW4gdGhlIGFyZWEgYWZmZWN0IHRoZSBhbW91bnQgb2YgY3JpbWU/ICIpXSksX2MoJ2xpJyxbX2MoJ2InLFtfdm0uX3YoIkgyOiAiKV0pLF92bS5fdigiIEkgYmVsaWV2ZSB0aGF0IGhhdmluZyBoaWdoZXIgcXVhbGl0eSBwYXJrcyB3aWxsIGJlIGFuIGluZGljYXRvciBvZiBsZXNzIGNyaW1lLiAiKV0pXSksX2MoJ2gyJyxbX3ZtLl92KCJNZXRob2RzIildKSxfYygncCcsW192bS5fdigiIExpc3RlZCBiZWxvdyBhcmUgdGhlIHN0ZXBzIHRoYXQgSSB0b29rIGR1cmluZyBteSBkYXRhIGFuYWx5c2lzLiBUbyBsb29rIGF0IHRoZSBjb2RlLCB0YWtlIGEgbG9vayBhdCAiKSxfYygnYScse2F0dHJzOnsiaHJlZiI6Imh0dHBzOi8vZ2l0aHViLmNvbS92cmVtYWtlci9oY2RlLTQxMC1maW5hbC9ibG9iL21haW4vQ2FsY3VsYXRpb25zLmlweW5iIn19LFtfdm0uX3YoIidDYWxjdWxhdGlvbnMuaXB5bmInICIpXSldKSxfYygnYicsW192bS5fdigiU2VjdGlvbiAxIC0gQ2FsbGluZyBUaGUgQVBJcyBhbmQgU29ydGluZyBEYXRhICIpXSksX2MoJ29sJyxbX2MoJ2xpJyxbX3ZtLl92KCJJbXBvcnQgYWxsIG5lZWRlZCBsaWJyYXJpZXMsIGFuZCBzZXRzIHVwIGFwaSBlbmRwb2ludHMgYW5kIGxpbWl0cyIpXSksX2MoJ2xpJyxbX3ZtLl92KCIgUXVlcnkgdGhlIFNlYXR0bGUgTmVpZ2hib3Job29kIERhdGFiYXNlIGFuZCBjcmVhdGUgYSBkaWN0aW9uYXJ5ICdob29kX2NvdW50cycgdG8gdHJhY2sgdGhlIGRhdGEgdGhhdCBJIHdhbnQgZm9yIGVhY2ggb2YgdGhlIG5laWdoYm9yaG9vZHMuIFRoaXMgaXMgcHJpbWFyaWx5IGNvbmNlcm5lZCB3aXRoOiBsb2NhdGlvbiBvZiB0aGUgbmVpZ2hvcmhvb2QsIG51bWJlciBvZiBwYXJrcywgcGFyayByYXRpbmcsIHRoZSBhdmVyYWdlIHBhcmsgcmF0aW5nIGluIHRoZSBuZWlnaGJvcmhvb2QsIGFuZCB0aGUgbnVtYmVyIG9mIGNyaW1lcy4gIildKSxfYygnbGknLFtfdm0uX3YoIiBRdWVyeSB0aGUgU2VhdHRsZSBQdWJsaWMgU3BhY2VzIERhdGFiYXNlIGFuZCBjaGVjayB0aGUgbG9jYXRpb24gb2YgZWFjaCBwdWJsaWMgc3BhY2UgYWdhaW5zdCB0aGUgbmVpZ2Job3Job29kcyB1c2luZyBnZW9kYXRhLiBRdWFsaWZ5aW5nIHBhcmtzIHdpbGwgYmUgcHVibGljLCBvcGVuLCBhbmQgaGF2ZSBlaXRoZXIgZ3JlZW5zcGFjZSBvciBmb3Jlc3QgYXJlYXMuIFRoZW4sIHRoZSBkYXRhIGFib3V0IHRoZSBncmVlbnNwYWNlIHdpbGwgYmUgYWRkZWQgdG8gdGhlICdob29kX2NvdW50cycgZGljdGlvbmFyeSBhdCB0aGUgYXBwcm9wcmlhdGUgc3BvdC4gIildKSxfYygnbGknLFtfdm0uX3YoIiBRdWVyeSB0aGUgU2VhdHRsZSBDcmltZSBEYXRhYmFzZSBhbmQgY2hlY2tzIHRoZSBsb2NhdGlvbiBvZiBlYWNoIGNyaW1lIGluY2llbnQgYWdhaW5zdCB0aGUgbmVpZ2hib3Job29kcyB1c2luZyBnZW9kYXRhLiBRdWFsaWZ5aW5nIGNyaW1lIHdpbGwgYmUgZG9uZSB3aXRoaW4gdGhlIGxhc3QgNSB5ZWFycyAoMjAxNyAtIDIwMjIpLiBUaGVuLCB0aGUgZGF0YSBhYm91dCB0aGUgY3JpbWVzIHdpbGwgYmUgYWRkZWQgdG8gdGhlICdob29kX2NvdW50cycgZGljdGlvbmFyeSBhdCB0aGUgYXBwcm9wcmlhdGUgc3BvdC4gIildKSxfYygnbGknLFtfdm0uX3YoIkNhbGN1bGF0ZXMgdGhlIGF2ZXJhZ2UgcGFyayByYXRpbmcgZm9yIGVhY2ggbmVpZ2hib3Job29kLiIpXSksX2MoJ2xpJyxbX3ZtLl92KCIgQmVjYXVzZSB0aGUgdG90YWwgbnVtYmVyIG9mIGNyaW1lcyBpcyBnb2luZyB0byBiZSBmYXIgaGlnaGVyIHRoYW4gdGhlIG51bWJlciBvZiBwYXJrcywgaXQgd2FzIGltcG9ydGFudCB0byBjcmVhdGVzIGEgZGljdGlvbmFyeSBvZiB0aGUgaG9vZF9wZXJjZW50YWdlcyB3aGljaCB0YWtlIHRoZSB0b3RhbCBudW1iZXIgb2YgY3JpbWVzIGFuZCBwYXJrcyBmb3IgZWFjaCBuZWlnaGJvcmhvb2QgYW5kIGRpdmlkZXMgdGhlbSBieSB0aGUgdG90YWwgbnVtYmVyIG9mIGNyaW1lIGFuZCBwYXJrcy4gVGhpcyBzZXRzIHRoZSBiYXNlbGluZSB0byB1bmRlcnN0YW5kIHdoaWNoIHRoZSBkaXN0cmlidXRpb24gb2YgY3JpbWUgcmF0ZXMgYW5kIHBhcmtzIGFjcm9zcyB0aGUgbmVpZ2hib3Job29kcy4gIildKV0pLF9jKCdiJyxbX3ZtLl92KCJSUTE6IERvIGFyZWFzIHdpdGggbW9yZSBncmVlbnNwYWNlIGhhdmUgbGVzcyBjcmltZT8iKV0pLF9jKCdvbCcsW19jKCdsaScsW192bS5fdigiIENvbXBhcmUgdGhlIHBlcmNlbnRhZ2Ugb2Ygb2YgcGFya3MgaW4gYSBnaXZlbiBuZWlnaGJvcmhvb2QgdG8gdGhlIHBlcmNlbnRhZ2Ugb2YgY3JpbWUgd2l0aGluIGEgZ2l2ZW4gbmVpZ2hib3Job29kLiBUaGlzIGhlbHBzIGdldCBhbiBvdmVydmlldyBvZiB0aGUgYnJlYWtkb3duIG9mIHRoZSBncmVlbnNwYWNlIGFuZCBjcmltZS4gIildKSxfYygnbGknLFtfdm0uX3YoIiBDb21wYXJlIHRoZSBwZXJjZW50YWdlIG9mIG9mIHBhcmtzIGluIGEgZ2l2ZW4gbmVpZ2hib3Job29kIHRvIHRoZSBwZXJjZW50YWdlIG9mIGNyaW1lIHdpdGhpbiBhIGdpdmVuIG5laWdoYm9yaG9vZC4gVGhpcyBzdGVwIGZvY3VzZXMgc29sZWx5IG9uIHRoZSBuZWlnaGJvcmhvb2RzIGluIHdoaWNoIHRoZSBwZXJjZW50YWdlIG9mIGNyaW1lIGlzIGhpZ2hlciB0aGFuIHRoZSBwZXJjZW50YWdlIG9mIHBhcmtzLiBUaGlzIGhlbHBzIGdldCBhIG1vcmUgc3BlY2lmaWMgbG9vayBhdCB0aGUgbnVhbmNlZCBzaW1pbGFyaXRpZXMgYW5kIGRpZmZlcmVuY2VzIGFnYWluc3QgIildKSxfYygnbGknLFtfdm0uX3YoIiBDb21wYXJlIHRoZSBwZXJjZW50YWdlIG9mIG9mIHBhcmtzIGluIGEgZ2l2ZW4gbmVpZ2hib3Job29kIHRvIHRoZSBwZXJjZW50YWdlIG9mIGNyaW1lIHdpdGhpbiBhIGdpdmVuIG5laWdoYm9yaG9vZC4gVGhpcyBzdGVwIGZvY3VzZXMgc29sZWx5IG9uIHRoZSBuZWlnaGJvcmhvb2RzIGluIHdoaWNoIHRoZSBwZXJjZW50YWdlIG9mIHBhcmtzIGlzIGhpZ2hlciB0aGFuIHRoZSBwZXJjZW50YWdlIG9mIGNyaW1lLiAiKV0pLF9jKCdsaScsW192bS5fdigiIENvbXBhcmVzIHRoZSBhdmVyYWdlIHBlcmNlbnRhZ2Ugb2YgcGFya3MgYW5kIGNyaW1lcyBhY3Jvc3MgdGhlIGNvbmRpdGlvbnMgb2YgYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBjcmltZSBhbmQgYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBwYXJrcy4gVGhpcyBoZWxwcyB0byBkaXNwbGF5IGEgbW9yZSBjb25jaXNlIHZlcnNpb24gb2YgdGhlIGRpZmZlcmVuY2VzIGluIHBlcmNlbnRhZ2Ugb2YgY3JpbWUgYW5kIHBhcmtzIGluIGJvdGggY29uZGl0aW9ucy4gIildKV0pLF9jKCdiJyxbX3ZtLl92KCJSUTI6IERvZXMgdGhlIHRoZSBxdWFsaXR5IG9mIHRoZSBwYXJrcyBhdmFpbGFibGUgaW4gdGhlIGFyZWEgYWZmZWN0IHRoZSBhbW91bnQgb2YgY3JpbWU/IildKSxfYygnb2wnLFtfYygnbGknLFtfdm0uX3YoIiBTaG93IHRoZSBhdmVyYWdlIHBhcmsgcmF0aW5nIGFjcm9zcyB0aGUgbmVpZ2hib3Job29kcyB3aGVyZSB0aGVyZSBpcyBhIGhpZ2hlciBwZXJjZW50YWdlIG9mIHBhcmtzIHRoYW4gY3JpbWUuIFRoaXMgaGVscHMgdW5kZXJzdGFuZCB0aGUgc2ltaWxhcml0aWVzIGFuZCBkaWZmZXJlbmNlcyBhZ2FpbnN0IHRoZSB0d28gY29uZGl0aW9ucy4gIildKSxfYygnbGknLFtfdm0uX3YoIiBTaG93IHRoZSBhdmVyYWdlIHBhcmsgcmF0aW5nIGFjcm9zcyB0aGUgbmVpZ2hib3Job29kcyB3aGVyZSB0aGVyZSBpcyBhIGhpZ2hlciBwZXJjZW50YWdlIG9mIGNyaW1lIHRoYW4gcGFya3MuIFRoaXMgaGVscHMgdW5kZXJzdGFuZCB0aGUgc2ltaWxhcml0aWVzIGFuZCBkaWZmZXJlbmNlcyBhZ2FpbnN0IHRoZSB0d28gY29uZGl0aW9ucy4gIildKSxfYygnbGknLFtfdm0uX3YoIiBDb21wYXJlIHRoZSBhdmVyYWdlIHBhcmsgcmF0aW5nIGFjcm9zcyBhbGwgdGhlIG5laWdoYm9yaG9vZHMgaW4gd2hpY2ggdGhlIHBlcmNlbnRhZ2Ugb2YgcGFya3Mgd2FzIGhpZ2hlciB0aGFuIHRoZSBwZXJjZW50YWdlIG9mIGNyaW1lLCBhbmQgY29tcGFyZXMgaXQgdG8gdGhlIGF2ZXJhZ2UgcGFyayByYXRpbmcgYWNyb3NzIGFsbCB0aGUgbmVpZ2hib3Job29kcyBpbiB3aWNoIHRoZSBwZXJjZW50YWdlIG9mIGNyaW1lIGlzIGhpZ2hlciB0aGFuIHRoZSBwZXJjZW50YWdlIG9mIGNyaW1lLiBUaGlzIHVzZSBvZiBhdmVyYWdlcyBjcmVhdGVzIGEgbW9yZSB2aWJyYW50IHBpY3R1cmUgb2YgdGhlIHF1YWxpdHkgb2YgcGFya3MgYWNyb3NzIHRoZSBjb25kaXRpb25zIG9mIGhpZ2hlciBwZXJjZW50YWdlIG9mIGNyaW1lIGFuZCBoaWdoZXIgcGVyY2VudGFnZSBvZiBwYXJrcy4gIildKV0pLF9jKCdoMicsW192bS5fdigiRmluZGluZ3MiKV0pLF9jKCdwJyxbX3ZtLl92KCIgQmVsb3cgeW91IGNhbiBmaW5kIHRoZSBncmFwaHMgY3JlYXRlZCBkdXJpbmcgdGhlIGRhdGEgYW5hbHlzaXMgcHJvY2Vzcy4gIildKSxfYygnYicsW192bS5fdigiUlExOiBEbyBhcmVhcyB3aXRoIG1vcmUgZ3JlZW5zcGFjZSBoYXZlIGxlc3MgY3JpbWU/IildKSxfYygncCcsW192bS5fdigiIEJlY2F1c2UgdGhlcmUgYXJlIGZhciBtb3JlIGNyaW1lIHRoYW4gcGFya3MsIHRoaXMgY29tcGFyaXNvbiB3YXMgYnJva2VuIGRvd24gdG8gbG9vayBhdCB0aGUgcGVyY2VudGFnZSBvZiBvdmVyYWxsIHBhcmtzIGFuZCBjcmltZSB3aXRoaW4gYSBzcGVjaWZpYyBuZWlnaGJvcmhvb2QuIEZvciBlYWNoIGNyaW1lIG9yIHBhcmsgcGVyY2VudGFnZSwgaXQgaXMgdGhlIHRvdGFsIG51bWJlciBvZiBjcmltZXMgb3IgcGFya3MgaW4gdGhlIG5laWdoYm9yaG9vZCBkaXZkZWQgYnkgdGhlIHRvdGFsIG51bWJlciBvZiBwYXJrcyBvciBjcmltZSBpbiBhbGwgb2YgU2VhdHRsZS4gIildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmF0dXJlL2FsbF9ob29kc19jb21wYXJlLnBuZyIsImFsdCI6Im5laWdoYm9yaG9vZCBicmVha2Rvd246IHBlcmNlbnRhZ2Ugb2Ygb3ZlcmFsbCBjcmltZSBhbmQgcGFya3MifX0pLF9jKCdwJyxbX3ZtLl92KCIgQXMgc2hvd24gaW4gJ05laWdoYm9yaG9vZCBCcmVha2Rvd246IFBlcmNlbnRhZ2Ugb2YgT3ZlcmFsbCBDcmltZSBhbmQgUGFya3MnIGNoYXJ0LCB3ZSBoYXZlIGEgbWl4IG9mIG5laWdoYm9yaG9vZHMgaW4gd2hpY2ggdGhlIHBlcmNlbnRhZ2Ugb2YgY3JpbWUgaXMgaGlnaGVyIHRoYW4gdGhlIHBlcmNlbnRhZ2Ugb2YgcGFya3MgYW5kIHZpY2UgdmVyc2EuIFRoaXMgbWVhbnMgdGhhdCB0aGVyZSBtaWdodCBwb3RlbnRpYWxseSBiZSBhbiBpbXBhY3Qgb2YgcGFya3Mgb24gcmVkdWNpbmcgY3JpbWUuICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIFRoZSBuZXh0IHR3byBjaGFydHMgbWFrZSB0aGUgc2FtZSBjb21wYXJpc29uIG9mIHBlcmNlbnRhZ2VzIG9mIGNyaW1lIGFuZCBwYXJrcywgYnV0IGdyb3VwcyB0aGVtIHRvZ2V0aGVyIGJ5IHdoZXRoZXIgdGhlcmUgd2FzIGEgaGlnaGVyIHBlcmNlbnRhZ2Ugb2YgcGFya3Mgb3IgYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBjcmltZS4gIiksX2MoJ2JyJyksX2MoJ2JyJyksX3ZtLl92KCIgSW4gdGhpcyBjaGFydCwgd2UgbG9vayBhdCB0aGUgbmVpZ2hib3Job29kcyB3aGVyZSB0aGVyZSBhcmUgbW9yZSBwYXJrcy4gIildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmF0dXJlL2hpZ2hfY3JpbWUucG5nIiwiYWx0IjoiaGlnaCBjcmltZSBicmVha2Rvd24gcGVyY2VudGFnZSBvZiBvdmVyYWxsIGNyaW1lIGFuZCBwYXJrcyJ9fSksX2MoJ3AnLFtfdm0uX3YoIiBJbiB0aGlzIGNoYXJ0LCBtb3N0IG5laWdoYm9yaG9vZHMgaGF2ZSBvdmVyIDMlIG9mIHRoZSBwYXJrcyBpbiBTZWF0dGxlIGFuZCA4IG9mIHRoZXNlIG5laWdoYm9yaG9vZHMgaGFkIG92ZXIgNSUgb2YgdGhlIHBhcmtzLiBUaGUgZXhjZXB0aW9uIHRvIHRoaXMgaXMgU2V3YXJkIHBhcmssIHdoaWNoIGhhcyAyLjclIG9mIHRoZSBwYXJrcywgYnV0IGFnYWluLCB0aGlzIGNvdWxkIGJlIGR1ZSB0byB0aGUgc2l6ZSBvZiB0aGUgYXJlYS4gV2UgYWxzbyBzZWUgdGhhdCBtb3N0IG5laWdoYm9yaG9vZHMgaW4gdGhpcyBicmFja2V0IGhhdmUgYmV0d2VlbiAzJSBhbmQgNiUgb2YgdGhlIGNyaW1lIGluIFNlYXR0bGUuICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIEluIHRoaXMgY2hhcnQsIHdlIGxvb2sgYXQgdGhlIG5laWdoYm9yaG9vZHMgd2hlcmUgdGhlcmUgaXMgbW9yZSBjcmltZS4gIildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmF0dXJlL2hpZ2hfcGFyay5wbmciLCJhbHQiOiJoaWdoIHBhcmsgYnJlYWtkb3duOiBwZXJjZW50YWdlIG9mIG92ZXJhbGwgY3JpbWUgYW5kIHBhcmtzIn19KSxfYygncCcsW192bS5fdigiIEluIHRoaXMgY2hhcnQsIG1vc3QgbmVpZ2hib3Job29kcyBoYXZlIHVuZGVyIDMlIG9mIHRoZSBwYXJrcyBpbiBTZWF0dGxlLiBUaGVyZSBhcmUgdHdvIGV4Y2VwdGlvbiBvZiBub3RlLiBGaXJzdCwgdGhlcmUgaXMgQ2FwaXRvbCBIaWxsLCB3aGljaCBoYXMgYWJvdXQgNiUgb2YgdGhlIHBhcmtzLCBhbmQgUXVlZW4gQW5uZSB3aGljaCBoYXMgYWJvdXQgNCUgb2YgcGFya3MuIFdlIGFsc28gc2VlIHRoYXQgbW9zdCBuZWlnaGJvcmhvb2RzIGhhdmUgYmV0d2VlbiAzJSBhbmQgNyUgb2YgdGhlIGNyaW1lIGluIFNlYXR0bGUuICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIFRoZXJlIHNlZW1zIHRvIGJlIGEgc2xpZ2h0IGRpZmZlcmVuY2UgaGVyZSBmb3IgdGhlIGF2ZXJhZ2UgcmFuZ2Ugb2YgY3JpbWUgd2hlbiB0aGUgbnVtYmVyIG9mIHBhcmtzIGlzIGNvbmNlcm5lZC4gVG8gbG9vayBpbnRvIHRoaXMgbW9yZSBkZWVwbHksIHdlIGNvbXBhcmVkIHRoZSBhdmVyYWdlIHBlcmNlbnRhZ2Ugb2YgcGFya3MgYW5kIGNyaW1lIGFjcm9zcyB0aGUgY29uZGl0aW9ucyBvZiBoYXZpbmcgYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBwYXJrcyBvciBoYXZpbmcgYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBjcmltZS4gIildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmF0dXJlL2F2ZXJhZ2VfcGVyY2VudF9jcmltZV9wYXJrcy5wbmciLCJhbHQiOiJoaWdoIGNyaW1lIHZzIGhpZ2ggcGFya3M6IGF2ZXJhZ2UgcGVyY2VudCBvZiBwYXJrcyJ9fSksX2MoJ3AnLFtfdm0uX3YoIiBUaGlzIGNoYXJ0IHNob3dzIGEgcHJldHR5IGJpZyBkaXNwYXJpdHkgYmV0d2VlbiB0aGUgdHdvIGNvbmRpdGlvbnMuIEluIHRoZSBjb25kaXRpb24gaW4gd2hpY2ggdGhlcmUgaXMgYSBoaWdoZXIgYW1vdW50IG9mIGNyaW1lLCB0aGUgYXZlcmFnZSBwZXJjZW50YWdlIG9mIGNyaW1lcyBpcyA2LjElIHdoaWNoIGlzIGFib3V0IGRvdWJsZSB0aGUgYXZlcmFnZSBwZXJjZW50YWdlIG9mIHBhcmtzIDMlLiBCdXQsIGluIHRoZSBjb25kaXRpb24gd2hlcmUgdGhlcmUgYXJlIG1vcmUgcGFya3MsIHRoZSBhdmVyYWdlIG51bWJlciBvZiBwYXJrcyBpcyBmYXIgaGlnaGVyIGF0IDYuNiUsIGFuZCB0aGUgYXZlcmFnZSBhbW91bnQgb2YgY3JpbWUgbXVjaCBsb3dlciBhdCBhcm91bmQgLjUlLiAiKSxfYygnYnInKSxfYygnYnInKSxfYygnZW0nLFtfdm0uX3YoIlRoaXMgc2VlbXMgdG8gaW5kaWNhdGUgdGhhdCBoYXZpbmcgbW9yZSBwYXJrcyBkb2VzIGhhdmUgYSBwb3RlbnRpYWwgYXNzb2NpYXRpb24gd2l0aCBhIHJlZHVjdGlvbiBpbiBjcmltZSIpXSldKSxfYygnaHInKSxfYygnYicsW192bS5fdigiUlEyOiBEb2VzIHRoZSB0aGUgcXVhbGl0eSBvZiBwYXJrcyBpbiB0aGUgYXJlYSBhZmZlY3QgdGhlIGFtb3VudCBvZiBjcmltZT8iKV0pLF9jKCdwJyxbX3ZtLl92KCIgVG8gYmVnaW4gdGhpcyBzZWN0aW9uLCBsZXQncyB0YWxrIGEgbGl0dGxlIGJpdCBhYm91dCB3aGF0IHRoZSBwYXJrIHJhdGluZ3MgbWVhbiB3aXRoaW4gdGhlIHBhcmtzIGRhdGFiYXNlLiBUaGlzIHJhdGluZyBzeXN0ZW0gaXMgb24gYSBzY2FsZSBmcm9tIDEgLTYgd2l0aCBhIDEgYmVpbmcgdGhlIGJlc3QgcG9zc2libGUgcGFyaywgYW5kIDYgYmVpbmcgdGhlIHdvcnN0IHBhcmsuICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIFRoaXMgY2hhcnQgY29tZXMgZnJvbSBjb21wYXJpbmcgdGhlIGF2ZXJhZ2UgcGFyayByYXRpbmdzIGFjcm9zcyB0aGUgY29uZGl0aW9uIG9mIGhhdmluZyBhIGhpZ2hlciBwZXJjZW50YWdlIG9mIHBhcmtzIHdoZW4gY29tcGFyZWQgdG8gY3JpbWUuICIpXSksX2MoJ2ltZycse2F0dHJzOnsic3JjIjoiYXNzZXRzL25hdHVyZS9oaWdoX3BhcmtfcmF0aW5nLnBuZyIsImFsdCI6ImhpZ2ggcGFyayBicmVha2Rvd246IGF2ZXJhZ2UgcGFyayByYXRpbmcifX0pLF9jKCdwJyxbX3ZtLl92KCIgSW4gdGhlIGFyZWFzIHdpdGggbW9yZSBwYXJrcywgdGhlcmUgaXMgYWxzbyBhIGJldHRlciByYXRpbmcgZm9yIHRoZSBwYXJrLCBhbmQgbW9yZSBkaXZlcnNpdHkgd2l0aGluIHRoZSBwYXJrIHJhdGluZyBhdmVyYWdlcy4gVGhlIGJlc3QgYXZlcmFnZSByYXRpbmcgaW4gdGhpcyByYW5nZSBpcyAyLjMgYW5kIHRoZSB3b3JzdCBhdmVyYWdlIHJhdGluZyBpcyA0LiAiKSxfYygnYnInKSxfYygnYnInKSxfdm0uX3YoIiBUaGlzIGNoYXJ0IHNob3dzIHRoZSBhdmVyYWdlIHJhdGluZyBmb3IgcGFya3Mgd2l0aGluIGEgZ2l2ZW4gbmVpZ2hib3Job29kIGluIGFyZWFzIHdoZXJlIHRoZXJlIGlzIGEgaGlnaGVyIHBlcmNlbnRhZ2UgY3JpbWUgdGhhbiB0aGVyZSBpcyBwYXJrcy4gIildKSxfYygnaW1nJyx7YXR0cnM6eyJzcmMiOiJhc3NldHMvbmF0dXJlL2hpZ2hfY3JpbWVfcmF0aW5nLnBuZyIsImFsdCI6ImhpZ2ggY3JpbWUgYnJlYWtkb3duOiBhdmVyYWdlIHBhcmsgcmF0aW5nIn19KSxfYygncCcsW192bS5fdigiIEFzIHlvdSBjYW4gc2VlLCB0aGVyZSBpcyBub3QgYSB3aG9sZSBsb3Qgb2YgdmFyaWF0aW9uIGFjcm9zcyB0aGVzZSBuZWlnaGJvcmhvb2RzLiBUaGUgd29yc3QgYXZlcmFnZSBwYXJrIHJhdGluZyBpcyA0LjIgYW5kIHRoZSBiZXN0IHJhdGluZyBpcyAzLjYuICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIE91ciBmaW5hbCBhbmFseXNpcyBzZWVrcyB0byBjb21wYXJlIHRoZSBhdmVyYWdlIHBhcmsgcmF0aW5nIGFjcm9zcyBhbGwgbmVpZ2hib3Job29kcyBpbiB0aGUgY29uZGl0aW9uIG9mIGhhdmluZyBhIGhpZ2hlciBwZXJjZW50YWdlIG9mIGNyaW1lIHRoYW4gcGFya3MgYW5kIGhhdmluZyBhIGhpZ2hlciBwZXJjZW50YWdlIG9mIHBhcmtzIHRoYW4gY3JpbWUuICIpXSksX2MoJ2ltZycse2F0dHJzOnsic3JjIjoiYXNzZXRzL25hdHVyZS9oaWdoX2NyaW1lX3JhdGluZy5wbmciLCJhbHQiOiJhdmVyYWdlIHBhcmsgcmF0aW5nIGJhc2VkIG9uIGRpc3RyaWJ1dGlvbiBvZiBwYXJrIGFuZCBjcmltZSJ9fSksX2MoJ3AnLFtfdm0uX3YoIiBUaGlzIGNoYXJ0IHNob3dzIHRoYXQgaW4gdGhlIGNvbmRpdGlvbiBpbiB3aGljaCB0aGVyZSBpcyBhIGhpZ2hlciBwZXJjZW50YWdlIG9mIGNyaW1lIHRoYW4gcGFya3MgdGhlIGF2ZXJhZ2UgcGFyayByYXRpbmcgaXMgMy45LiBJbiB0aGUgY29uZGl0aW9uIGluIHdoaWNoIHRoZXJlIGlzIGEgaGlnaGVyIHBlcmNlbnRhZ2Ugb2YgcGFya3MgdGhhbiBjcmltZSwgdGhlIGF2ZXJhZ2UgcGFyayByYXRpbmcgaXMgMy4zLiBUaGVyZSBpcyBhIC42IGRpZmZlcmVuY2UgaW4gdGhlIGF2ZXJhZ2UgcmF0aW5nIGluIHdoaWNoIHRoZSBhcmVhcyB3aXRoIGEgaGlnaGVyIHBlcmNlbnRhZ2Ugb2YgcGFya3MgdGVuZCB0byBoYXZlIG92ZXJhbGwgaGlnaGVyIHF1YWxpdHkgcGFya3MgIiksX2MoJ2JyJyksX2MoJ2JyJyksX2MoJ2VtJyxbX3ZtLl92KCJUaGlzIG1pZ2h0IGluZGljYXRlIHRoYXQgcGFya3MgaW4gYXJlYXMgd2hpY2ggdGhlcmUgaXMgbGVzcyBjcmltZSBhbHNvIGhhdmUgaGlnaGVyIHF1YWxpdHkuICIpXSldKSxfYygnaDInLFtfdm0uX3YoIkRpc2N1c3Npb24iKV0pLF9jKCdwJyxbX3ZtLl92KCIgVGhpcyBhbmFseXNpcyBzZWVtcyB0byBzdWdnZXN0IGFuIGludmVyc2UgY29ycmVsYXRpb25hbCByZWxhdGlvbnNoaXAgYmV0d2VlbiB0aGUgbnVtYmVyIGFuZCBxdWFsaXR5IG9mIHBhcmtzIGFuZCBjcmltZSByYXRlcy4gSW4gdGhpcyBjYXNlLCBhcmVhcyB3aXRoIG1vcmUsIGhpZ2hlciBxdWFsaXR5IHBhcmtzIHNlZSBsZXNzIGNyaW1lLiAiKSxfYygnYnInKSxfYygnYnInKSxfYygnYicsW192bS5fdigiUlExIGFza2VkIERvIGFyZWFzIHdpdGggbW9yZSBncmVlbnNwYWNlIGhhdmUgbGVzcyBjcmltZT8gIildKSxfdm0uX3YoIiBXZSBmb3VuZCB0aGF0IG9uIGF2ZXJhZ2UsIGFyZWFzIHdpdGggYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBwYXJrcyBoYWQgZHJhc3RpY2FsbHkgbGVzcyBjcmltZSB3aGVuIGNvbXBhcmVkIHRvIGFyZWFzIHdpdGggaGlnaGVyIHBlcmNlbnRhZ2VzIG9mIGNyaW1lIHRoYXQgaGFkIGFuIHNtYWxsZXIgYXNzb3J0bWVudCBvZiBwYXJrcy4gIiksX2MoJ2JyJyksX2MoJ2JyJyksX2MoJ2InLFtfdm0uX3YoIlJRMiBhc2tlZCBEb2VzIHRoZSB0aGUgcXVhbGl0eSBvZiBwYXJrcyBpbiB0aGUgYXJlYSBhZmZlY3QgdGhlIGFtb3VudCBvZiBjcmltZT8iKV0pLF92bS5fdigiIFdlIGNvbmNsdWRlZCB0aGF0IG9uIGF2ZXJhZ2UsIGFyZWFzIHdpdGggYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBjcmltZSBoYWQgcGFya3Mgb2YgbG93ZXIgcXVhbGl0eSB3aGVuIGNvbXBhcmVkIHRvIGFyZWFzIHdpdGggYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBwYXJrcy4gIiksX2MoJ2JyJyksX2MoJ2JyJyksX3ZtLl92KCIgQm90aCBvZiBteSBoeXBvdGhlc2VzIHdlcmUgY29uZmlybWVkLCBhbmQgdGhlcmUgZG9lcyBzZWVtIHRvIGJlIGEgcmVsYXRpb25zaGlwIGJldHdlZW4gdGhlIGFtb3VudCBvZiBjcmltZSBhbmQgdGhlIHF1YWxpdHkgYW5kIGFjY2Vzc2liaWxpdHkgb2YgbmF0dXJlIGluIHRoZSBjaXR5LiBCdXQsIHRoaXMgZG9lcyBub3Qgc2VlayB0byBwcm92ZSBjYXVzYXRpb24uIFRoZXJlIGFyZSBzZXZlcmFsIHBvdGVudGlhbCBmYWN0b3JzIHRoYXQgY291bGQgaW5mbHVlbmNlIHRoZXNlIHJlc3VsdHMgbmFtZWx5OiAiKV0pLF9jKCd1bCcsW19jKCdsaScsW19jKCdiJyxbX3ZtLl92KCJQb3B1bGF0aW9uIHdpdGhpbiBhIG5laWdoYm9yaG9vZDoiKV0pLF92bS5fdigiIFRoZXJlIGFyZSBhIGxvdCBvZiBpbmR1c3RyaWFsIGFyZWFzIHdpdGhpbiBTZWF0dGxlIHdoaWNoIG1pZ2h0IG5vdCBoYXZlIHRoYXQgbWFueSBwZW9wbGUgbGl2aW5nIGluIGl0LCB3aGljaCBjb3VsZCBiZSBhIHJlYXNvbiBmb3IgZmV3ZXIsIGxvd2VyIHF1YWxpdHkgZ3JlZW4gc3BhY2VzLiAiKV0pLF9jKCdsaScsW19jKCdiJyxbX3ZtLl92KCJTaXplIG9mIHRoZSBuZWlnaGJvcmhvb2Q6IildKSxfdm0uX3YoIiBOb3QgZXZlcnkgbmVpZ2hib3Job29kIGluIFNlYXR0bGUgaXMgdGhlIHNhbWUgc2l6ZS4gVGhlIHNtYWxsZXIgbmVpZ2hib3Job29kcyBtaWdodCBoYXZlIGxlc3MgY3JpbWUgYW5kIGZld2VyIHBhcmtzIHNpbXBseSBiZWNhdXNlIHRoZXJlIGlzIGxlc3Mgc3BhY2UgZm9yIHRoZW0uICIpXSksX2MoJ2xpJyxbX2MoJ2InLFtfdm0uX3YoIlNvY2lvZWNvbm9taWMgc3RhdHVzIHdpdGhpbiBhIG5laWdoYm9yaG9vZDogIildKSxfdm0uX3YoIiBUaG9zZSBpbiBsb3dlciBzb2Npb2Vjb25vbWljIGNsYXNzZXMgbWlnaHQgbm90IGJlIGFmZm9yZGVkIHRoZSBcIm5pY2VyXCIgcGFya3MgZHVlIHRvIHN0cnVjdXRyYWwgaW5qdXN0aWNlIHdpdGhpbiBvdXIgZ292ZXJuaW5nIGJvZGllcyBhbmQgdGhlIHdheXMgaW4gd2hpY2ggY2l0aWVzIHNvbWV0aW1lcyBkaXN0cmlidXRlIGZ1bmRzIGJhc2VkIG9uIHRoZSBvdmVyYWxsIGluY29tZSBvZiB0aG9zZSBsaXZpbmcgaW4gdGhlIG5laWdoYm9yaG9vZHMuIFRoZXJlIGNvdWxkIGFsc28gYmUgaGlnaGVyIGNyaW1lIHJhdGVzIGJlY2F1ZXMgdGhlcmUgYXJlIHBlb3BsZSBtYWtpbmcgbGVzcywgYW5kIHRoZXkgd291bGQgbm90IGhhdmUgdGhlIHRpbWUgdG8gdmlzaXQgdGhlIGdyZWVuIHNwYWNlcy4gV2UgYWxzbyB0ZW5kIHRvIHNlZSBtb3JlIHBvbGljaW5nIGluIGFyZWFzIG9mIGxvd2VyIHNvY2lvZWNvbm9taWMgc3RhdHVzLCB3aGljaCBvZiBjb3Vyc2UgbGVhZHMgdG8gaGlnaGVyIHJhdGVzIG9mIGNyaW1lIGJlaW5nIHJlcG9ydGVkLCBidXQgaXQgZG9lcyBub3QgbmVjZXNhcmlseSBtZWFuIHRoYXQgdGhlcmUgaXMgbm90IGEgc2ltaWxhciBhbW91bnQgb2YgY3JpbWUgZ29pbmcgb24gaW4gdGhlIGhpZ2hlciBzb2Npb2Vjb25vbWljIHN0YXR1cyBuZWlnaGJvcmhvb2RzIGluIHdoaWNoIHRoZXJlIGlzIGxlc3MgcG9saWNlIHBhdHJvbGluZy4gIildKSxfYygnbGknLFtfYygnYicsW192bS5fdigiUmF0aW8gb2Ygc3RvcmVzLCBob3VzaW5nLCBhbmQgbmF0dXJhbCBzcGFjZXMgaW4gYSBuZWlnaGJvcmhvb2Q6ICIpXSksX3ZtLl92KCJPbmUgb2YgdGhlIG1vc3Qgbm90aWNhYmxlIG91dGxpZXJzIGZvciBjcmltZSBhbmQgZ3JlZW4gc3BhY2Ugd2FzIGRvd250b3duLiBXaGljaCBtaWdodCBiZSBhbiBpbmRpY2F0b3IgdGhhdCBhcmVhcyB0aGF0IGhhdmUgYSBoaWdoZXIgZm9jdXMgb24gcmV0YWlsIGhhdmUgbGVzcyBvZiBhIG5lZWQgZm9yIGdyZWVuIHNwYWNlIGJlY2F1c2UgcGVvcGxlIGNhbiBnbyBob21lIHRvIHRoZWlyIG5laWdoYm9yaG9vZHMsIHdoaWNoIG1pZ2h0IGhhdmUgbW9yZSBncmVlbnNwYWNlLCB3aGVuIHRoZXkgYXJlIGRvbmUgd2l0aCB0aGVpciByZXRhaWwgYWR2ZW50dXJlcy4gT3IsIGl0IGNvdWxkIGFsc28gaW5kaWNhdGUgdGhhdCB0aGVzZSBwbGFjZXMgb2YgYnVzaW5lc3MgcHJlc2VudCBtb3JlIG9wcG9ydHVuaXRpZXMgZm9yIGNyaW1lLCBzdWNoIGFzIHRoZWZ0LCB3aGljaCB3b3VsZCBiZSBoYXJkZXIgdG8gZG8gaW4gYSBtb3JlIHJlc2lkZW50aWFsIGFyZWEuICIpXSldKSxfYygncCcsW192bS5fdigiIEl0IHdhcyByZWFsbHkgZmFzY2luYXRpbmcgdG8gbG9vayBhdCB0aGUgd2F5cyBpbiB3aGljaCBhdmFpbGFibGUgbmF0dXJhbCBzcGFjZXMgdmFyaWVzIHdpdGhpbiBTZWF0dGxlLCBhbmQgdGhpcyBzZXRzIGEgZ3JlYXQgZm91bmRhdGlvbiB3aGljaCBjb3VsZCBwb3RlbnRpYWxseSBiZSB0aGUgYmFja2JvbmUgZm9yIG1vcmUgcmVzZWFyY2ggc3VjaCBhcyB0YWtpbmcgaW50byBhY2NvdW50IHRoZSBmYWN0b3JzIGxpc3RlZCBhYm92ZSBpbiBhZGRpdGlvbmFsIHJlc2VhcmNoLiBPciwgdG8gcG90ZW50aWFsbHkgc2V0IHRoZSBiYXNlbGluZSBmb3IgYW4gZXRobm9ncmFwaGljIHN0dWR5IHdoaWNoIHRhbGtzIHRvIHBlb3BsZSBpbiB0aGVzZSBuZWlnaGJvcmhvb2RzIHRvIGxlYXJuIG1vcmUgYWJvdXQgaG93IHJlc2lkZW50cyByZWxhdGlvbnNoaXBzIHRvIG5hdHVyZSB2YXJ5IGluIHRoZSBuZWlnaGJvcmhvb2RzIHdpdGggYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBjcmltZSB0aGFuIHBhcmtzIGFuZCB0aG9zZSB3aXRoIGEgaGlnaGVyIHBlcmNlbnRhZ2Ugb2YgcGFya3MgdGhhbiBjcmltZS4gIildKSxfYygnaDInLFtfdm0uX3YoIkNvbmNsdXNpb24iKV0pLF9jKCdwJyxbX3ZtLl92KCIgSGF2aW5nIGFjY2VzcyB0byBuYXR1cmFsIGdyZWVuc3BhY2UgY2FuIGJlIHZlcnkgYmVuZWZpY2FsIHRvIGh1bWFuIGhlYWx0aCBhbmQgd2VsbCBiZWluZy4gQnV0LCBub3QgZXZlcnlvbmUgaGFzIHRoZSBzYW1lIGxldmVsIG9mIGFjY2VzcyB0byBuYXR1cmFsIHNwYWNlcyBkdWUgdG8gdGhlIHdheXMgaW4gd2hpY2ggc29jaWV0eSBoYXMgYmVlbiBkZXZlbG9wZWQuIFRoaXMgcmVzZWFyY2ggc3R1ZHkgc291Z2h0IHRvIGFuc3dlciB0d28gcXVlc3Rpb25zOiAoMSkgRG8gYXJlYXMgd2l0aCBtb3JlIGdyZWVuc3BhY2UgaGF2ZSBsZXNzIGNyaW1lPyAoMikgRG8gYXJlYXMgd2l0aCBtb3JlIGdyZWVuc3BhY2UgaGF2ZSBsZXNzIGNyaW1lPyAiKSxfYygnYnInKSxfYygnYnInKSxfdm0uX3YoIiBGb3IgcmVzZWFyY2ggcXVlc3Rpb24gMSwgaXQgd2FzIGh5cG90aGVzaXplZCB0aGVyZSB3aWxsIGJlIGxlc3MgY3JpbWUgaW4gYXJlYXMgd2l0aCBtb3JlIGdyZWVuc3BhY2UuIFRoaXMgaHlwb3RoZXNpcyB3YXMgY29uZmlybWVkIHdoZW4gdGhleSBzdHVkeSBmb3VuZCB0aGF0IG9uIGF2ZXJhZ2UsIGFyZWFzIHdpdGggYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBwYXJrcyBoYWQgZHJhc3RpY2FsbHkgbGVzcyBjcmltZSB3aGVuIGNvbXBhcmVkIHRvIGFyZWFzIHdpdGggaGlnaGVyIHBlcmNlbnRhZ2VzIG9mIGNyaW1lIHRoYXQgaGFkIGFuIHNtYWxsZXIgYXNzb3J0bWVudCBvZiBwYXJrcy4gIiksX2MoJ2JyJyksX2MoJ2JyJyksX3ZtLl92KCIgRm9yIHJlc2VhcmNoIHF1ZXN0aW9uIDIsIGl0IHdhcyBoeXBvdGhlc2l6ZWQgdGhhdCBoYXZpbmcgaGlnaGVyIHF1YWxpdHkgcGFya3Mgd2lsbCBiZSBhbiBpbmRpY2F0b3Igb2YgbGVzcyBjcmltZS4gVGhpcyBoeXBvdGhlc2lzIHdzIGNvbmZpcm1lZCB3aGVuIHRoZSBzdHVkeSBmb3VuZCB0aGF0IG9uIGF2ZXJhZ2UsIGFyZWFzIHdpdGggYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBjcmltZSBoYWQgcGFya3Mgb2YgbG93ZXIgcXVhbGl0eSB3aGVuIGNvbXBhcmVkIHRvIGFyZWFzIHdpdGggYSBoaWdoZXIgcGVyY2VudGFnZSBvZiBwYXJrcy4gIiksX2MoJ2JyJyksX2MoJ2JyJyksX3ZtLl92KCIgT2YgY291cnNlLCB0aGVzZSBmaW5kaW5nIGRvIGhhdmUgc29tZSBsaW1pdGF0aW9ucy4gVGhlcmUgYXJlIGEgbG90IG9mIG90aGVyIHZhcmlhYmxlcyB0aGF0IG1pZ2h0IHBsYXkgaW50byB0aGUgcmVhc29uIHRoYXQgdGhlcmUgaXMgbGVzcyBjcmltZSBpbiBhcmVhcyB3aXRoIG1vcmUgcGFya3MgYW5kIGdyZWVuc3BhY2UuIFRoZSBtYWpvcnMgZmFjdG9ycyB0aGF0IG1pZ2h0IGJlIGF0IHBsYXkgaW4gdGhpcyByZWxhdGlvbnNoaXAgYXJlIHBvcHVsYXRpb24gaW4gYSBuZWlnaGJvcmhvb2QsIHNpemUgb2YgdGhlIG5laWdoYm9yaG9vZCwgc29jaW9lY29ub21pYyBzdGF0dXMgd2l0aGluIGEgbmVpZ2hib3Job29kLCBhbmQgdGhlIHJhdGlvIG9mIHN0b3JlcywgaG91c2luZyBhbmQgbmF0dXJhbCBzcGFjZSBpbiBhIG5laWdoYm9yaG9vZC4gRnVydGhlciBzdHVkaWVzIHNob3VsZCBjb25zaWRlciB0aGUgaW1wYWN0IG9mIHRoZXNlIGZhY3RvcnMuIFRoaXMgbWF5IGFsc28gc2VydmUgYXMgYSBjYWxsIHRvIGFjdGlvbiB0byBhZGQgc2V0IHVwIGFyZWFzIGluIHdoaWNoIGhhdmluZyBtb3JlLCBoaWdoZXIgcXVhbGl0eSBwYXJrcyBhZGRlZCBjb3VsZCBwb3RlbnRpYWxseSBiZSBiZW5lZmljaWFsLiAiKV0pLF9jKCdoMicsW192bS5fdigiQ2l0YXRpb25zIildKSxfYygncCcsW192bS5fdigiIEdyZWVuIFNwYWNlIGFuZCBjcmltZS4gQ29ybmVsbCBDb2xsZWdlIG9mIEh1bWFuIEVjb2xvZ3kuIChuLmQuKS4gUmV0cmlldmVkIE1heSAxMSwgMjAyMiwgZnJvbSBodHRwczovL3d3dy5odW1hbi5jb3JuZWxsLmVkdS9kZWEvc3BvdGxpZ2h0cy9ncmVlbi1zcGFjZS1hbmQtY3JpbWUgIiksX2MoJ2JyJyksX2MoJ2JyJyksX3ZtLl92KCIgS29nbG1laWVyLCBFLiAoMjAxNywgSnVseSAzMSkuIENhbiBwdWJsaWMgYXJ0IHJlZHVjZSBjcmltZT8gZXhwZXJ0IGludGVydmlldyB3aXRoIEJlbiBTYW5kYmVyZy4gUHVibGljIEFydCBBcmNoaXZlLiBSZXRyaWV2ZWQgTWF5IDEwLCAyMDIyLCBmcm9tIGh0dHBzOi8vd3d3LnB1YmxpY2FydGFyY2hpdmUub3JnLzIwMTcvMDcvMzEvY2FuLXB1YmxpYy1hcnQtcmVkdWNlLWNyaW1lLWV4cGVydC1pbnRlcnZpZXcvICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIExvdXYsIFIuICgyMDA1KS4gTGFzdCBjaGlsZCBpbiB0aGUgd29vZHM6IFNhdmluZyBvdXIgY2hpbGRyZW4gZnJvbSBuYXR1cmUtZGVmaWNpdCBkaXNvcmRlciAocHAuIDEtMzY7IDQ4LTU0KS4gQ2hhcGVsIEhpbGwsIE5DOiBBbGdvbnF1aW4uICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIFJvc3MsIEMuIChuLmQuKS4gRXhhbWluaW5nIHRoZSB3YXlzIGFydHMgYW5kIGN1bHR1cmUgaW50ZXJzZWN0IHdpdGggcHVibGljIHNhZmV0eS4gUmV0cmlldmVkIE1heSAxMSwgMjAyMiwgZnJvbSBodHRwczovL3d3dy51cmJhbi5vcmcvc2l0ZXMvZGVmYXVsdC9maWxlcy9wdWJsaWNhdGlvbi83OTI3MS8yMDAwNzI1LUV4YW1pbmluZy10aGUtV2F5cy1BcnRzLWFuZC1DdWx0dXJlLUludGVyc2VjdC13aXRoLVB1YmxpYy1TYWZldHkucGRmICIpLF9jKCdicicpLF9jKCdicicpLF92bS5fdigiIENvdmVyIEltYWdlIENvdXJ0ZXN5IG9mIGh0dHBzOi8vd3d3LjM2MGNpdGllcy5uZXQvaW1hZ2UvMjAxOC11dy1xdWFkLWNoZXJyeS1ibG9zc29tcy11c2EgIildKSxfYygnZGl2Jyx7c3RhdGljQ2xhc3M6ImQtZmxleCBmbGV4LWNvbHVtbiBmbGV4LW1kLXJvdyB0ZXh0LWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtYmV0d2VlbiJ9LFtfYygncm91dGVyLWxpbmsnLHthdHRyczp7InRvIjoiL2Nyb2NoZXQtYnVkZHkifX0sW19jKCdiJyxbX3ZtLl92KCJQcmV2aW91cyBQcm9qZWN0OiAiKV0pLF92bS5fdigiIENyb2NoZXQgQnVkZHkiKV0pLF9jKCdyb3V0ZXItbGluaycse2F0dHJzOnsidG8iOiIvem9vbS11In19LFtfYygnYicsW192bS5fdigiTmV4dCBQcm9qZWN0OiAiKV0pLF92bS5fdigiVGhlIFZpcnR1YWwgQ29sbGVnZSBFeHBlcmllbmNlIildKV0sMSldKX0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFtdCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}
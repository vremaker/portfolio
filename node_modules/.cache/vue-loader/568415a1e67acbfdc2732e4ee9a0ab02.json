{"remainingRequest":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/on-trak.vue?vue&type=template&id=db7a2336&scoped=true&","dependencies":[{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/on-trak.vue","mtime":1657091018842},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655365183723},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js","mtime":1655365183722}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}
{"remainingRequest":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/crochet-buddy.vue?vue&type=template&id=5192158c&scoped=true&","dependencies":[{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/src/views/portfolio/crochet-buddy.vue","mtime":1658202862435},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1655365183723},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/cache-loader/dist/cjs.js","mtime":1655365179965},{"path":"/Users/valerieremaker/Documents/GitHub/portfolio/node_modules/vue-loader/lib/index.js","mtime":1655365183722}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxQb3J0Zm9saW9QaWVjZT4KICA8IS0tPGRpdiBjbGFzcz0iY292ZXItaW1nIGQtZmxleCBmbGV4LWNvbHVtbiI+CiAgICA8aW1nIHNyYz0iL2Fzc2V0cy90aWxlcy9jcm9jaGV0LWJ1ZGR5LnBuZyIgYWx0PSJEQ0kiIC8+CiAgPC9kaXY+LS0+CiAgPGRpdiBjbGFzcz0idGl0bGUiPgogICAgPGgxPkNyb2NoZXQgQnVkZHk8L2gxPgogICAgPHA+CiAgICAgIEV4cGxvcmF0b3J5IHByb3RvdHlwaW5nIGZvciBDcm9jaGV0IEJ1ZGR5OiBhbiBJbnRlcm5ldCBvZiBUaGluZ3MgKElvVCkKICAgICAgZGV2aWNlIGNyZWF0ZWQgdG8gYXNzaXN0IG5vdmljZSBjcm9jaGV0IGhvYmJ5aXN0cyBpbiB0aGUgcHVyc3VpdCBvZgogICAgICBiZWF1dGlmdWwgeWFybi1jcmFmdC4KICAgIDwvcD4KICA8L2Rpdj4KICA8aHIgLz4KICA8cD4KICAgIEluIHRoZSBTcHJpbmcgb2YgMjAyMCwgYXJvdW5kIHRoZSBzdGFydCBvZiB0aGUgTm92ZWwgQ29yb25hdmlydXMgUGFuZGVtaWMKICAgIHRoYXQgY2F1c2VkIGNvdW50cmllcyB0byBzaHV0IGRvd24sIEkgdG9vayB1cCB0aGUgYXJ0IG9mIGNyb2NoZXQgdG8gZmlsbAogICAgdGhlIGRheXMgaW4gaXNvbGF0aW9uLiBEdWUgdG8gbXkgaW5hYmlsaXR5IHRvIGNvdW50IG15IHN0aXRjaGVzIGNvcnJlY3RseQogICAgaW4gZWFjaCBvZiB0aGUgcm93cyBJIGNvbXBsZXRlZCwgdGhlIGZpcnN0IGJsYW5rZXQgSSBtYWRlIGNhbWUgb3V0IGFzIG1vcmUKICAgIG9mIGEgdHJhcGV6b2lkIHRoYW4gYSByZWN0YW5nbGUuIFRoZSBvdGhlciBiaWcgaXNzdWUgdGhhdCBtb3N0IG5vdmljZQogICAgY3JvY2hldCBob2JieWlzdHMgaXMga2VlcGluZyBhIGNvbnNpc3RlbnQgdGVuc2lvbiBpbiB0aGUgYW1vdW50IHRoYXQgeW91CiAgICBwdWxsIG9uIHRoZSB5YXJuIHRvIGNyZWF0ZSBlYWNoIHN0aXRjaC4gQ3JvY2hldCBCdWRkeSBpcyBhbiBJbnRlcm5ldCBvZgogICAgVGhpbmdzIChJb1QpIGRldmljZSBjcmVhdGVkIHRvIGFzc2lzdCBub3ZpY2UgY3JvY2hldCBob2JieWlzdHMgaW4gdGhlaXIKICAgIHB1cnN1aXQgb2YgYmVhdXRpZnVsIHlhcm4tY3JhZnQuIFRoaXMgcHJvamVjdCBjb25zaXN0ZWQgb2YgZXhwbG9yYXRpb24gaW46CiAgICBhbmFsb2cgcHJvdG90eXBpbmcsIDNEIG1vZGVsaW5nLCBWb2ljZSBVc2VyIEludGVyZmFjZSwgYW5kIEFJIHN0aXRjaAogICAgdHJhY2tpbmcuCiAgPC9wPgogIDxpbWcKICAgIGNsYXNzPSJwLTAiCiAgICBzcmM9ImFzc2V0cy9jcm9jaGV0LWJ1ZGR5L3NrZXRjaC5wbmciCiAgICBhbHQ9ImNyb2NoZXQgYnVkZHkgc2tldGNoIgogIC8+CgogIDxoMj5EZXNpZ24gT3ZlcnZpZXc8L2gyPgogIDxwPgogICAgVGhlIENyb2NoZXQgQnVkZHkgaXMgYSBmYWlybHkgc2ltcGxlIElvVCBkZXZpY2Ugd2l0aCBhIGxhcmdlIGltcGFjdCBvbgogICAgdGhvc2Ugd2hvIGNyb2NoZXQuIFRoZSBwaHlzaWNhbCBkZXZpY2UgaGFzIHRocmVlIG1haW4gY29tcG9uZW50czogYW4KICAgIGVyZ29ub21pYyBoYW5kbGUsIGEgY2FtZXJhIGZhY2luZyB0aGUgY3JvY2hldCBob29r4oCZcyBuZWNrLCB3aGljaCBjb3VudHMKICAgIHRoZSBudW1iZXIgb2Ygc3RpdGNoZXMgYW5kIHRyYWNrcyB3aGljaCB0eXBlIG9mIHN0aXRjaGVzIGFyZSBiZWluZyBtYWRlCiAgICB1c2luZyBhIG1hY2hpbmUgbGVhcm5pbmcgYWxnb3JpdGhtLiBUaGUgaG9vayBhbHNvIGhhcyBhIHByZXNzdXJlIHNlbnNpdGl2ZQogICAgaG9vaywgd2hpY2ggdHJhY2tzIHRoZSBhbW91bnQgb2YgZm9yY2UgZXhlcnRlZCBlYWNoIHRpbWUgdGhlIHVzZXIgcHVsbHMKICAgIGZvciB0aGUgc3RpdGNoLiBUaGUgaG9vayB3aWxsIGFsc28gdmlicmF0ZSB3aGVuIHRoZSB1c2VyIHNob3VsZCBzdG9wCiAgICBwdWxsaW5nIG9uIHRoZSBzdGl0Y2gsIHRodXMgZW5mb3JjaW5nIGEgY29uc2lzdGVudCBwdWxsLCBtYWtpbmcgdGhlCiAgICB5YXJuLWNyYWZ0IG1vcmUgY29uc2lzdGVudC4KICA8L3A+CiAgPGlmcmFtZQogICAgd2lkdGg9IjEwMCUiCiAgICBoZWlnaHQ9IjMxNSIKICAgIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvWDJ2NzNHeE1BSW8iCiAgICB0aXRsZT0iWW91VHViZSB2aWRlbyBwbGF5ZXIiCiAgICBmcmFtZWJvcmRlcj0iMCIKICAgIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogICAgYWxsb3dmdWxsc2NyZWVuCiAgPjwvaWZyYW1lPgoKICA8aDI+QW5hbG9nIFByb3RvdHlwZTwvaDI+CiAgPHA+CiAgICBUaGUgYW5hbG9nIHByb3RvdHlwZSBmb3IgQ3JvY2hldCBCdWRkeSB3YXMgbWFkZSBvdXQgb2YgMyBpbmdyZWRpZW50IGNsYXkKICAgIChtYWRlIHdpdGggZmxvdXIsIHdhdGVyLCBhbmQgc2FsdCkgYXMgd2VsbCBhcyBhIGNyb2NoZXQgaG9vayB0aGF0IEkgaGFkCiAgICBseWluZyBhcm91bmQgbXkgcm9vbS4gSSBtYWRlIHRoZSBjbGF5IGZvciB0aGUgaG9vaywgYW5kIHRoZW4gd3JhcHBlZCBpdAogICAgYXJvdW5kIG15IGhvb2sgYXJvdW5kIHRvIGZvcm0gYSBoYW5kbGUuIEkgdGhlbiB0b29rIGFuZCBleHRyYSBiaXQgb2YgY2xheQogICAgdG8gZmlndXJlIG91dCB3aGF0IHRoZSBjYW1lcmEgcGxhY2VtZW50IHdvdWxkIGxvb2sgbGlrZS4gQWZ0ZXIgdGhlIGhhbmRsZQogICAgd2FzIGZvcm1lZCwgSSB0b29rIGl0IG9mZiBvZiBteSBjcm9jaGV0IGhvb2ssIGFuZCBiYWtlZCBpdCB1bnRpbCB0aGUgY2xheQogICAgYmVjYW1lIHN0dXJkeS4gSSB0aGVuIHB1dCB0aGUgaGFuZGxlIGJhY2sgb24gbXkgY3JvY2hldCBob29rIGZvciB1c2VyCiAgICB0ZXN0aW5nLiBUaGUgZmlyc3QgaGFuZGxlIGl0ZXJhdGlvbiBpcyBzaG93biBiZWxvdy4KICA8L3A+CiAgPGltZwogICAgY2xhc3M9InB0LTAiCiAgICBzcmM9ImFzc2V0cy9jcm9jaGV0LWJ1ZGR5L2FuYWxvZ18xLmpwZWciCiAgICBhbHQ9ImNyb2NoZXQgYnVkZHkgc2tldGNoIgogIC8+CiAgPHA+CiAgICBJIGFjdHVhbGx5IHdlbnQgdGhyb3VnaCB0d28gcHJvdG90eXBlcyB3aGlsZSBkZXNpZ25pbmcgdGhpcyBob29rLiBUaGUKICAgIGZpcnN0IHByb3RvdHlwZSB0dXJuZWQgb3V0IHRvIGJlIGZhciB0b28gYnVsa3kgYW5kIGJpZywgc28gSSBjcmVhdGVkIGEKICAgIHNsZWVrZXIgYW5kIHNtYWxsZXIgaGFuZGxlLCB3aGljaCBlbmRlZCB1cCBiZWluZyB0aGUgYmV0dGVyIG9mIHRoZSB0d28sIGFzCiAgICBzaG93biBiZWxvdy4KICA8L3A+CiAgPGltZwogICAgY2xhc3M9InB0LTAiCiAgICBzcmM9ImFzc2V0cy9jcm9jaGV0LWJ1ZGR5L2FuYWxvZ18yLmpwZWciCiAgICBhbHQ9ImNyb2NoZXQgYnVkZHkgc2tldGNoIgogIC8+CiAgPGI+QW5hbHlzaXM8L2I+CiAgPHA+CiAgICBUaGUgZ3JpcCB0aGF0IEkgY3JlYXRlZCBmb3IgbXkgcHJvdG90eXBlIG1ha2VzIGhvbGRpbmcgdGhlIGNyb2NoZXQgaG9va3MKICAgIHRoYXQgSSBoYXZlIHNvIG11Y2ggbW9yZSBjb21mb3J0YWJsZSwgdGhhdCBJIGFjdHVhbGx5IGZpbmQgbXlzZWxmIHVzaW5nCiAgICB0aGUgbG8tZmkgcHJvdG90eXBlIGhhbmRsZSB3aGVuIEnigJltIHBsYW5uaW5nIG9uIGNyb2NoZXRpbmcgZm9yIGxvbmdlcgogICAgcGVyaW9kcyBvZiB0aW1lLiBUaGlzIGlzIGEgdGVzdGFtZW50IHRvIHRoZSBiaWdnZXN0IGZlYXR1cmUgdGhhdCBJIHdhcwogICAgdXNpbmcgbXkgYW5hbG9nIG1vZGVsIHRvIHRlc3QgZm9yOiBjb21mb3J0IGFuZCBncmlwIHBvc2l0aW9uaW5nLgogIDwvcD4KICA8cD4KICAgIER1cmluZyB0aGUgYW5hbHlzaXMgcGhhc2UsIEkgYWxzbyB0b29rIGEgdmlkZW8gb2Ygd2hhdCB0aGUgY2FtZXJhIHdvdWxkCiAgICBzZWUuIFRoaXMgd2FzIHRvIHNlZSBpZiBpdCB3YXMgZXZlbiBwb3NzaWJsZSB0byB1c2UgbWFjaGluZSBsZWFybmluZyB0bwogICAgdHJhY2sgc3RpdGNoZXMgaW4gdGhpcyB3YXkuIEl0IGRpZCBwcm92ZSB0aGF0IHRoZXJlIGlzIGEgZGlzdGluY3QKICAgIHBvc3NpYmlsaXR5IHRoYXQgbWFjaGluZSBsZWFybmluZyBmb3Igc3RpdGNoIGNvdW50aW5nIGluIHRoaXMgd2F5IGlzIGEKICAgIGRpc3RpbmN0IHBvc3NpYmlsaXR5LgogIDwvcD4KICA8aDI+M0QgUHJvdG90eXBpbmc8L2gyPgogIDxwPgogICAgVGhlIDNEIG1vZGVsIG9mIENyb2NoZXQgQnVkZHkgd2FzIG1hZGUgaW4gT25zaGFwZTogYSBjb2xsYWJvcmF0aXZlIENBRAogICAgbW9kZWxpbmcgcHJvZ3JhbS4gSSBiZWdhbiB0aGUgbW9kZWwgYXMgYSBza2V0Y2ggdGhlIGZyb250IHBsYW5lLiBUaGlzCiAgICBza2V0Y2ggY29udGFpbmVkIGEgaGFsZiB2aWV3IG9mIHRoZSBzaWRlIHByb2ZpbGUgb2YgQ3JvY2hldCBCdWRkeeKAmXMgbWFpbgogICAgZm9ybS4gQXMgeW91IGNhbiBzZWUsIHRoZSBza2V0Y2ggY2FwdHVyZXMgdGhlIHJvdW5kZWQgZmVhdHVyZXMgb2YgY3JvY2hldAogICAgYnVkZHkgd2hpY2ggbWFrZSBpdCBtb3JlIGNvbWZvcnRhYmxlIHRvIHVzZS4KICA8L3A+CiAgPGltZwogICAgc3JjPSJhc3NldHMvY3JvY2hldC1idWRkeS8zZF9za2V0Y2gucG5nIgogICAgYWx0PSJsaW5lIHNrZXRjaCBmb3IgY3JvY2hldCBidWRkeSIKICAvPgogIDxwPgogICAgTmV4dCwgSSB1c2UgdGhlIHJldm9sdmUgZmVhdHVyZSBmb3IgdGhlIGFib3ZlIHNrZXRjaCwgdG8gY3JlYXRlIHRoZSBiYXNlCiAgICBmb3IgQ3JvY2hldCBCdWRkeS4gdGhpcyBsZWFkIHRvIGEgdmVyeSBzaW1wbGUgdGhyZWUtZGltZW5zaW9uYWwgZmlndXJlCiAgICB0aGF0IHdvcmtzIGFzIHRoZSBiYXNlIGZvciBDcm9jaGV0IEJ1ZGR5LgogIDwvcD4KICA8aW1nCiAgICBzcmM9ImFzc2V0cy9jcm9jaGV0LWJ1ZGR5LzNkX3JvdW5kLnBuZyIKICAgIGFsdD0icmV2b2x2ZSBmb3IgY3JvY2hldCBidWRkeSIKICAvPgogIDxwPgogICAgT25jZSB0aGUgbWFpbiAzRCBmb3JtIGZvciBDcm9jaGV0IEJ1ZGR5IHdhcyBjb21wbGV0ZWQsIEkgY3JlYXRlZCBhIG5ldwogICAgc2tldGNoLCBhZ2FpbiBvbiB0aGUgZnJvbnQgcGxhbmUuIFRoZXNlIHNrZXRjaGVzIGFyZSBvbiB0aGUgc2FtZSBwbGFuZSB0bwogICAgZW5zdXJlIHRoYXQgdGhlIHNrZXRjaGVzIG92ZXJsYXAgYW5kIGNhbiBhY3R1YWxseSBiZSB1c2VkIGZvciBleHRydWRlcy4KICA8L3A+CiAgPGltZwogICAgc3JjPSJhc3NldHMvY3JvY2hldC1idWRkeS8zZF9jdXQucG5nIgogICAgYWx0PSJza2V0Y2ggZm9yIGNyb2NoZXQgaG9vayBjdXQiCiAgLz4KICA8cD4KICAgIEluIG9yZGVyIHRvIGNyZWF0ZSB0aGUgY3V0b3V0IHRoYXQgbWFrZXMgdXAgdGhlIGhvb2sgZm9yIENyb2NoZXQgQnVkZHksIEkKICAgIHVzZWQgYW4gZXh0cnVkZSBjdXQuIFRoZSBleHRydWRlIGN1dCB0b29rIHRoZSBtYXRlcmlhbCBmcm9tIHRoZSB0cmlhbmdsZQogICAgdGhhdCBJIGhhZCBza2V0Y2hlZCBhd2F5IGZyb20gdGhlIGhvb2suIFRoZSBtb3JlIGFuZ3VsYXIgc2xhbnRlZCBuYXR1cmUgb2YKICAgIHRoZSBjdXRvdXQgZm9yIENyb2NoZXQgQnVkZHkgaXMgYmFzZWQgb2ZmIG9mIHRoZSBhbmd1bGFyIHN0eWxlIG9mIFN1c2FuCiAgICBCYXRlcyBjcm9jaGV0IGhvb2tzLCB3aGljaCBhcmUgb2JqZWN0aXZlbHkgdGhlIGVhc2llc3QgdG8gd29yayB3aXRoLiBNb3N0CiAgICBvdGhlcnMgYXJlIHRvbyByb3VuZGVkLCB3aGljaCBtYWtlcyBpdCBkaWZmaWN1bHQgdG8gY2FwdHVyZSB0aGUgbG9vcHMgdGhhdAogICAgYXJlIGJlaW5nIHB1bGxlZCB0aHJvdWdoIHRvIGNyZWF0ZSBhIHN0aXRjaC4KICA8L3A+CiAgPGltZwogICAgc3JjPSJhc3NldHMvY3JvY2hldC1idWRkeS8zZF9jbGVhci5wbmciCiAgICBhbHQ9ImN1dCBmb3IgY3JvY2hldCBidWRkeSBob29rIgogIC8+CiAgPHA+CiAgICBGb3IgdGhlIHRoaXJkIHRpbWUsIEkgY3JlYXRlZCBhIHNrZXRjaCBvbiB0aGUgZnJvbnQgcGxhbmUuIFRoaXMgdGltZSwgaXQKICAgIHdhcyBuZXN0bGVkIGFnYWluc3QgdGhlIHRoaWNrIGdyaXAgc2VjdGlvbiBvZiB0aGUgaGFuZGxlLCBvbiB0b3Agb2YgdGhlCiAgICBiZWdpbm5pbmcgb2YgdGhlIGhvb2suIFRoaXMgaXMgdGhlIGlkZWFsIHBsYWNlbWVudCBiZWNhdXNlIGl0IGlzIG91dCBvZgogICAgdGhlIHdheSBmb3IgdGhlIHVzZXIsIGFuZCBpdCBoYXMgYSBwcmV0dHkgc29saWQgdmlldyBkb3duIHRoZSBuZWNrIG9mIHRoZQogICAgaG9vaywgd2hpY2ggaXMgdGhlIHZhbnRhZ2UgcG9pbnQgdXNlZCBmb3IgY291bnRpbmcgYW5kIHRyYWNraW5nIHN0aXRjaGVzLgogIDwvcD4KICA8aW1nCiAgICBzcmM9ImFzc2V0cy9jcm9jaGV0LWJ1ZGR5LzNkX2NhbWVyYS5wbmciCiAgICBhbHQ9InNrZXRjaCBmb3IgY3JvY2hldCBidWRkeSBjYW1lcmEiCiAgLz4KICA8cD4KICAgIFRvIGNyZWF0ZSB0aGUgY2FtZXJhIGhvdXNpbmcsIGJhc2VkIG9mZiBvZiB0aGUgaW5pdGlhbCBza2V0Y2gsIEkgdXNlZCBhbgogICAgZXh0cnVkZSBvbiB0aGUgc3F1YXJlLiBJIGV4dHJ1ZGVkIGJvdGggdG8gdGhlIGxlZnQgYW5kIHRvIHRoZSByaWdodCB3aXRoCiAgICB0aGUgc2tldGNoIG9uIHRoZSBmcm9udCBwbGFuZSBhcyBteSDigJxjZW50ZXIgcG9pbnQu4oCdIFRoaXMgYWxsb3dlZCBtZSB0bwogICAgbWFrZSB0aGUgY2FtZXJhIGhvdXNpbmcgZXZlbmx5IGNlbnRlcmVkIG9uIHRoZSBob29rIHNvIHRoYXQgdGhlIGNhbWVyYQogICAgd291bGQgaGF2ZSB0aGUgY2xlYXJlc3QgdmlldyBkb3duIHRoZSBob29r4oCZcyBuZWNrLgogIDwvcD4KICA8aW1nCiAgICBzcmM9ImFzc2V0cy9jcm9jaGV0LWJ1ZGR5LzNkX2NhbV9jb2wucG5nIgogICAgYWx0PSJleHRydWRlIGZvciBjcm9jaGV0IGJ1ZGR5IGNhbWVyYSIKICAvPgogIDxwPgogICAgRmluYWxseSwgdG8gbWFrZSB0aGUgdGhlIDNEIG1vZGVsIG1vcmUgYWVzdGhldGljYWxseSBwbGVhc2luZyBhbmQgYXBwZWFyCiAgICB0byBiZSBtb3JlIHJlYWxpc3RpYywgSSB1c2VkIHRoZSBhcHBlYXJhbmNlIGZlYXR1cmUgb2YgT25zaGFwZSB0byBhcHBseSBhCiAgICBibHVlIGNvbG9yIHRvIHRoZSBob29rIHBhcnQgb2YgQ3JvY2hldCBCdWRkeS4gVGhpcyBibHVlIGNvbG9yIG1pbWljcyB0aGUKICAgIHN0YW5kYXJkIGNvbG9yIGZvciA1bW0gY3JvY2hldCBob29rcy4KICA8L3A+CiAgPGltZwogICAgc3JjPSJhc3NldHMvY3JvY2hldC1idWRkeS8zZF9jb2xvci5wbmciCiAgICBhbHQ9ImZpbmFsIG1vZGVsIGZvciBjcm9jaGV0IGJ1ZGR5IgogIC8+CiAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgPGEKICAgICAgaHJlZj0iaHR0cHM6Ly9jYWQub25zaGFwZS5jb20vZG9jdW1lbnRzLzZmZTM2NzQ1OGU5ZTdkZjA5N2NkMWIwOC93L2M4NzU1MGI4MjE3NGVjOTMzM2RmYmQ3Ni9lL2I1NGQxZThkMjA0ZjcxMzBjOGFkYTk2NSIKICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgID5Zb3UgY2FuIHZpZXcgdGhlIDNEIG1vZGVsIGhlcmUuPC9hCiAgICA+CiAgPC9kaXY+CiAgPGI+QW5hbHlzaXM8L2I+CiAgPHA+CiAgICBCZWNhdXNlIEnigJl2ZSB0YWtlbiBjbGFzc2VzIG9uIENBRCBtb2RlbGluZyBiZWZvcmUsIEkgYW0gZmFpcmx5IGNvbnRlbnQKICAgIHdpdGggdGhlIGRlY2lzaW9ucyB0aGF0IEkgbWFkZSB0byBjcmVhdGUgdGhlIDNEIG1vZGVsIGZvciBDcm9jaGV0IEJ1ZGR5LgogICAgVGhlIDNEIG1vZGVsIGNyZWF0ZWQgaW4gT25zaGFwZSByZXNlbWJsZXMgbXkgYW5hbG9nIG1vZGVsIHZlcnkgbmljZWx5LiBUaGUKICAgIG9ubHkgcmVhbCBkb3duZmFsbCBvZiBteSBwcm90b3R5cGUgaXMgdGhhdCBpdCBpcyBub3QgZnVsbHkgY29uc3RyYWluZWQuCiAgICBCdXQsIGFzIHlvdSBjYW4gc2VlLCB0aGUgZGltZW5zaW9ucyBvZiB0aGUgbW9kZWwgYXBwZWFyIHRvIGJlIGNvcnJlY3QuCiAgPC9wPgogIDxwPgogICAgT3ZlcmFsbCwgSSBhbSBpbmNyZWRpYmx5IHByb3VkIG9mIHRoZSAzRCBtb2RlbCBmb3IgQ3JvY2hldCBCdWRkeS4gYnV0CiAgICB0aGVyZSBhcmUgZGVmaW5pdGVseSBzdGlsbCBhcmVhcyBmb3IgaW1wcm92ZW1lbnQuIEluIHRoZSBmdXR1cmUsIEkgd291bGQKICAgIHByb2JhYmx5IGRvIHNvbWUgZGVlcGVyIG11bHRpLXBpZWNlIGFzc2VtYmxpZXMgd2l0aCBjb25zdHJhaW50cyBpbiB0aGUKICAgIGJ1dHRvbiBpbnRlcmFjdGlvbnMuIEkgd291bGQgaW5jbHVkZSBhIGJ1dHRvbiB0aGF0IHdvdWxkIGJlIHVzZWQgdG8KICAgIOKAnGluZGljYXRlIHRoZSBlbmQgb2YgdGhlIGZpcnN0IGxpbmUgb2Ygc3RpdGNoZXMsIGFuZCBhbnkgb3RoZXIgY2hhbmdlcwogICAgbWFkZSBieSB0aGUgdXNlciB3aGlsZSB3b3JraW5nIG9uIHRoZWlyIHBpZWNlLiBUaGlzIHdvdWxkIGJlIGxvY2F0ZWQgb24KICAgIHRoZSB0cmlwIG9mIHRoZSBoYW5kbGUuIEkgd291bGQgYWxzbyBwb3NzaWJseSBhZGQgYSBsb25nIHRoaW4gYnV0dG9uIGdvaW5nCiAgICBkb3duIHRoZSBlbnRpcmUgbGVuZ3RoIG9mIHRoZSBob29rLCB0aGF0IHdvdWxkIGFjdHVhbGx5IGJlIHdoYXQgd2FzIHVzZWQKICAgIHRvIGdhdWdlIHRoZSBwcmVzc3VyZSBpbiB0aGUgcHVsbHMgZm9yIGVhY2ggc3RpdGNoLgogIDwvcD4KICA8aDI+Vm9pY2UgVXNlciBJbnRlcmZhY2U8L2gyPgogIDxwPgogICAgQWx0aG91Z2ggQ3JvY2hldCBCdWRkeSBoYXMgZnVuY3Rpb25hbGl0eSBmb3IgYSBjcm90Y2hldGllciBvZiBhbnkgc2tpbGwKICAgIGxldmVscywgdGhpcyBpdGVyYXRpb24gZm9jdXNlcyBvbiBDcm9jaGV0IEJ1ZGR5IGFzIGEgcmVzb3VyY2UgZm9yIHRvdGFsCiAgICBiZWdpbm5lcnMgdG8gbGVhcm4gY3JvY2hldCB3aXRoIHJlYWwgdGltZSBmZWVkYmFjay4gTmV2ZXIgYWdhaW4gd2lsbCBhCiAgICBub3ZpY2UgY3JvY2hldGllciBiZSBsZWZ0IHdvbmRlcmluZyBpZiB0aGV5IG1pc3NlZCBhIHN0ZXAsIG1pc3VuZGVyc3Rvb2QKICAgIHRoZSBkaXJlY3Rpb25zLCBvciBkaWQgc29tZXRoaW5nIHdyb25nLiBUaGUgZGVzaWduIGZvciB0aGUgZWR1Y2F0aW9uYWwKICAgIGFzcGVjdCBvZiBjcm9jaGV0IGJ1ZGR5IGhhcyB0d28gbWFpbiBhc3BlY3RzOgogIDwvcD4KICA8dWw+CiAgICA8bGk+CiAgICAgIEFuIHVwZGF0ZWQgYW5hbG9nIHByb3RvdHlwZSB3aGljaCBpbmNsdWRlcyB0aGUgYWJpbGl0eSB0byBhdHRhY2ggYW4KICAgICAgYWN0dWFsIHdlYiBjYW1lcmEgdG8gQ3JvY2hldCBCdWRkeS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIFRoZSBWVUkgd2hpY2ggcHJvbXB0cyB1c2VycyBzdGVwIGJ5IHN0ZXAgaG93IHRvIGNyb2NoZXQsIGJ5IGV4cGxhaW5pbmcKICAgICAgdGhlIHN0ZXBzIHRvIG1ha2UgYSB2YXJpZXR5IG9mIHN0aXRjaGVzLgogICAgPC9saT4KICA8L3VsPgogIDxiPkdvYWw8L2I+CiAgPHA+CiAgICBGcm9tIHRoZSBzdGFydCBvZiBteSBleHBsb3JhdGlvbiBpbnRvIHRoZSBkZXZlbG9wbWVudCBvZiBDcm9jaGV0IGJ1ZGR5LCBJCiAgICBoYWQgdGhlIGlkZWEgaW4gbXkgaGVhZCB0aGF0IG5vdmljZSBhIGNyb2NoZXRpZXIgd291bGQgYmUgYWJsZSB0byB1c2UgaXQKICAgIGFzIGEgcGxhdGZvcm0gdG8gbGVhcm4gY3JvY2hldCwgYW5kIHRvIGZvbGxvdyBhbG9uZyB3aXRoIHBhdHRlcm5zIGZyb20gdGhlCiAgICBpbnRlcm5ldC4gVGhlIGdvYWwgb2YgdGhpcyBpdGVyYXRpb24gaXMgdG8gZ2F1Z2UgYm90aCB0aGUgdXNhYmlsaXR5IGFuZAogICAgZmVhc2liaWxpdHkgb2YgbGVhcm5pbmcgdXNpbmcgb25seSBhIFZVSSBhbG9uZSwgYWxiZWl0IG9uZSBwYWlyZWQgd2l0aAogICAgc3RpdGNoIHRyYWNraW5nIGNhcGFiaWxpdGllcy4KICA8L3A+CiAgPGI+QW5hbG9nIFByb3RvdHlwZTwvYj4KICA8cD4KICAgIFRoZSBhbmFsb2cgbW9kZWwgb2YgQ3JvY2hldCBCdWRkeSBmb2xsb3dlZCBhIHNpbWlsYXIgZm9ybSB0byB0aGUgb3JpZ2luYWwKICAgIENyb2NoZXQgQnVkZHkgaG9vay4gVGhlIGJpZ2dlc3QgZmFjdG9yIHRha2VuIGludG8gYWNjb3VudCBpbiB0aGlzIG1vZGVsCiAgICB3YXMgdGhlIGlkZWEgdGhhdCBJIHdhbnRlZCB0aGUgY2FtZXJhIHRvIGhhdmUgYSBmdWxsIHZpZXcgb2YgYWxsIG9mIHRoZQogICAgaG9vayB0aGF0IHdhcyBvcGVuIHRvIHlhcm4uIEJ1dCwgdGhlIGZvY2FsIGxlbmd0aCBvZiBteSB3ZWIgY2FtZXJhIHdhcwogICAgc3VwZXIgc2hvcnQsIHdoaWNoIG1lYW50IHRoYXQgSSBoYWQgdG8gY292ZXIgYSB2ZXJ5IGxhcmdlIGFtb3VudCBvZiB0aGUKICAgIGhvb2sgaW4gb3JkZXIgZm9yIHRoZSBjYW1lcmEgdG8gaGF2ZSB0aGlzIGZ1bGwgcGVyc3BlY3RpdmUgb2YgdGhlIHlhcm4gb24KICAgIHRoZSBob29rLgogIDwvcD4KICA8aW1nCiAgICBjbGFzcz0icHQtMCIKICAgIHNyYz0iYXNzZXRzL2Nyb2NoZXQtYnVkZHkvdnVpX2FuYWxvZy5wbmciCiAgICBhbHQ9ImFuYWxvZyBtb2RlbCBmb3IgY3JvY2hldCBidWRkeSB2dWkiCiAgLz4KICA8cD4KICAgIEFsdGhvdWdoIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBuZXcgaG9vayBhbmQgaGFuZGxlIGlzIGEgbG90IGJ1bGtpZXIsIGR1ZQogICAgdG8gbXkgY29uc3RyYWludHMsIGl0IGRlZmluaXRlbHkgc2hvd3MgYSB2ZXJ5IGNsZWFuIHZpZGVvIGZlZWQuIEluIHRoZQogICAgdmlkZW8gYmVsb3csIHdhdGNoIGEgdXNlciBhbHRlcm5hdGUgYmV0d2VlbiBhIHNpbmdsZSBhbmQgZG91YmxlIGNyb2NlaHQKICAgIHN0aXRjaCBmcm9tIENyb2NoZXQgQnVkZHkncyBwZXJzcGVjdGl2ZS4KICA8L3A+CiAgPGlmcmFtZQogICAgd2lkdGg9IjEwMCUiCiAgICBoZWlnaHQ9IjMxNSIKICAgIHNyYz0iaHR0cHM6Ly93d3cueW91dHViZS5jb20vZW1iZWQvaGtSdGdoRnVTdUkiCiAgICB0aXRsZT0iWW91VHViZSB2aWRlbyBwbGF5ZXIiCiAgICBmcmFtZWJvcmRlcj0iMCIKICAgIGFsbG93PSJhY2NlbGVyb21ldGVyOyBhdXRvcGxheTsgY2xpcGJvYXJkLXdyaXRlOyBlbmNyeXB0ZWQtbWVkaWE7IGd5cm9zY29wZTsgcGljdHVyZS1pbi1waWN0dXJlIgogICAgYWxsb3dmdWxsc2NyZWVuCiAgICBjbGFzcz0icGItMSIKICA+PC9pZnJhbWU+CgogIDxwPgogICAgSW4gZnV0dXJlIGl0ZXJhdGlvbnMgKHdpdGggYSBoaWdoZXIgYnVkZ2V0KSwgSSB3b3VsZCBsb29rIGludG8gc21hbGxlciwKICAgIHdpcmVsZXNzIGNhbWVyYXMgd2l0aCBhIHdpZGVyIGxlbnMgdG8gYmUgaW50ZWdyYXRlZCBpbnRvIGEgdGhlIGhvb2sgaW4gYQogICAgY2xlYW5lciBmYXNoaW9uLgogIDwvcD4KCiAgPGI+VlVJIEludGVyYWN0aW9uPC9iPgogIDxwPgogICAgQmVsb3csIHlvdSBjYW4gZmluZCB0aGUgc2NyaXB0cyBmb3IgdGhlIFZVSSBpbnRlcmFjdGlvbnMgdGhhdCBoYXZlIGJlZW4KICAgIGNyYWZ0ZWQgZm9yIGVhY2ggb2YgdGhlIHN0aXRjaGVzIGZvciB0aGUgY3JvY2hldGVyIHRvIGxlYXJuLiBUaGlzIHNjcmlwdAogICAgZ29lcyBvdmVyIGEgd2hvbGUgdHV0b3JpYWwsIHRlYWNoaW5nIHRoZSB1c2VyIHRoZSBjaGFpbiBzdGl0Y2gsIHRoZSBkb3VibGUKICAgIGNyb2NoZXQsIGFuZCB0aGUgdHJpcGxlIGNyb2NoZXQuIEJ1dCwgdGhlc2UgY2FuIGFsc28gYmUgdGF1Z2h0CiAgICBpbmRpdmlkdWFsbHkgdXBvbiByZXF1ZXN0LgogIDwvcD4KICA8cD48Yj5VU0VSOjwvYj4gQ3JvY2hldCBCdWRkeSwgSSB3YW50IGEgY3JvY2hldCB0dXRvcmlhbC48L3A+CiAgPHA+PGI+Q0I6PC9iPiBTdGFydC48L3A+CiAgPGI+Q2hhaW4gU3RpdGNoPC9iPgogIDxpZnJhbWUKICAgIHNyYz0iaHR0cHM6Ly9kb2NzLmdvb2dsZS5jb20vcHJlc2VudGF0aW9uL2QvZS8yUEFDWC0xdlM1N2I5Yjl2V0paZFZ2b1ZJOGFPMHMyUVNQVkdNWE1hMWVBRGhhQ1VZSHA2MFVDN3piQzJRLTRNbzlDc0ZqN1FNdXFKVlhyTHljUWlVRC9lbWJlZD9zdGFydD1mYWxzZSZsb29wPWZhbHNlJmRlbGF5bXM9MzAwMCIKICAgIGZyYW1lYm9yZGVyPSIwIgogICAgd2lkdGg9IjEwMCUiCiAgICBoZWlnaHQ9IjM1MCIKICAgIGFsbG93ZnVsbHNjcmVlbj0idHJ1ZSIKICAgIG1vemFsbG93ZnVsbHNjcmVlbj0idHJ1ZSIKICAgIHdlYmtpdGFsbG93ZnVsbHNjcmVlbj0idHJ1ZSIKICAgIGNsYXNzPSJwYi0xIgogID48L2lmcmFtZT4KICA8cD4KICAgIDxiPkNCOjwvYj4gVG8gYmVnaW4sIGxldOKAmXMgbWFrZSBhIHNsaXAga25vdC4gTG9vcCB0aGUgeWFybiBhcm91bmQgeW91cgogICAgaW5kZXggZmluZ2VyLCB0aGVuIGdyYWIgc29tZSB5YXJuIGZyb20gYmV0d2VlbiB0aGUgbG9vcCB5b3UgbWFkZSBhbmQgdGhlCiAgICBiYWxsIG9yIHNrZWluIG9mIHlhcm4gYW5kIHB1bGwgaXQgdGhyb3VnaCB0aGUgbG9vcC4gV2hlbiB5b3UgYXJlIHJlYWR5LAogICAgc2F5IG5leHQgb3Igc2F5IHJlcGVhdCB0byBoZWFyIHRoaXMgc3RlcCBhZ2Fpbi4KICA8L3A+CiAgPHVsPgogICAgPGxpPjxiPigxKSBVU0VSOjwvYj4gUmVwZWF0LjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTWFrZSBhIHNsaXAga25vdC4gTG9vcCB0aGUgeWFybiBhcm91bmQgeW91ciBpbmRleCBmaW5nZXIsCiAgICAgIHRoZW4gZ3JhYiBzb21lIHlhcm4gZnJvbSBiZXR3ZWVuIHRoZSBsb29wIHlvdSBtYWRlIGFuZCB0aGUgYmFsbCBvciBza2VpbgogICAgICBvZiB5YXJuIGFuZCBwdWxsIGl0IHRocm91Z2ggdGhlIGxvb3AuIFdoZW4geW91IGFyZSByZWFkeSwgc2F5IG5leHQgb3IKICAgICAgc2F5IHJlcGVhdCB0byBoZWFyIHRoaXMgc3RlcCBhZ2Fpbi4KICAgIDwvbGk+CiAgPC91bD4KICA8cD48Yj5VU0VSOiA8L2I+TmV4dC48L3A+CiAgPHA+PGI+Q0I6IDwvYj5QdXQgeW91ciBob29rIHRocm91Z2ggdGhlIHNsaXAga25vdC48L3A+CiAgPHA+PGI+VVNFUjogPC9iPihvbmUgbG9vcCBvbiBob29rLCBmcm9tIHNsaXAga25vdCkuPC9wPgogIDxwPjxiPkNCOiA8L2I+Tm93LCB0aWdodGx5IGxvb3AgdGhlIHlhcm4gYXJvdW5kIHlvdXIgY3JvY2hldCBob29rLjwvcD4KICA8dWw+CiAgICA8bGk+PGI+KDEpIFVTRVI6PC9iPiAoaGFzIG1vcmUgdGhhbiB0d28gbG9vcHMgb24gdGhlIGhvb2spLjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB5b3UgaGF2ZSB0b28gbWFueSBsb29wcyBvbiB5b3VyIGhvb2suIFRoZXJlIHNob3VsZAogICAgICBvbmx5IGJlIHR3byBsb29wcyBvbiB0aGUgaG9vay4KICAgIDwvbGk+CiAgICA8bGk+PGI+KDIpIFVTRVI6PC9iPiAoaGFzIG9ubHkgb25lIGxvb3Agb24gdGhlIGhvb2spLjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gRG9u4oCZdCBmb3JnZXQgdG8gbG9vcCB0aGUgeWFybiBhcm91bmQgdGhlIGNyb2NoZXQgaG9vay4gVGhlcmUKICAgICAgc2hvdWxkIHR3byBsb29wcyBvbiB0aGUgaG9vay4KICAgIDwvbGk+CiAgPC91bD4KICA8cD48Yj5VU0VSOiA8L2I+IChoYXMgdHdvIGxvb3BzIG9uIHRoZSBob29rKS48L3A+CiAgPHA+CiAgICA8Yj5DQjogPC9iPiBGaW5hbGx5LCBwdWxsIHlvdXIgaG9vayB0aHJvdWdoIHRoZSBmaXJzdCBzbGlwIGtub3QsIGJyaW5naW5nCiAgICB0aGUgc2Vjb25kIGxvb3AgeW91IG1hZGUgd2l0aCBpdC4KICA8L3A+CiAgPHVsPgogICAgPGxpPgogICAgICA8Yj4oMSkgVVNFUjo8L2I+IChkb2VzbuKAmXQgcHVsbCB0aGUgbG9vcCBzZWNvbmQgbG9vcCB0aHJvdWdoIHRoZSBmaXJzdAogICAgICBsb29wKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB0aGF0IHN0aXRjaCBkaWRu4oCZdCBjYXRjaC4gV2hlbiBwdWxsaW5nIHRocm91Z2ggdGhlCiAgICAgIHNsaXAga25vdCwgbWFrZSBzdXJlIHRoYXQgeW91IHRoZSBzZWNvbmQgbG9vcCBnZXRzIGNhdWdodCBpbiB0aGUgaG9vawogICAgICBhbmQgd2lsbCBiZSB0aGUgbmV4dCBzaW5nbGUgbG9vcCBvbiB5b3VyIGhvb2suCiAgICA8L2xpPgogIDwvdWw+CiAgPHA+CiAgICA8Yj5DQjogPC9iPiBZb3UgaGF2ZSBub3cgY3JlYXRlZCB5b3VyIGZpcnN0IGNoYWluIHN0aXRjaC4gUmVwZWF0IHRoaXMgc3RlcAogICAgMTEgbW9yZSB0aW1lcyB0byBtYWtlIGEgYmFzZSBjaGFpbiBvZiAxMi4gVG8gaGVhciB0aGUgc3RpdGNoIGluc3RydWN0aW9ucwogICAgYWdhaW4gc2F5IOKAnG9uZSBtb3JlIHRpbWUuCiAgPC9wPgogIDx1bD4KICAgIDxsaT48Yj4oMSkgVVNFUjo8L2I+IE9uZSBtb3JlIHRpbWUuPC9saT4KICAgIDxsaT48Yj5DQjo8L2I+VGlnaHRseSBsb29wIHRoZSB5YXJuIGFyb3VuZCB5b3VyIGNyb2NoZXQgaG9vay48L2xpPgogICAgPGxpPjxiPigxKSBVU0VSOjwvYj4gKGhhcyB0d28gbG9vcHMgb24gdGhlIGhvb2spLjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gUHVsbCB5b3VyIGhvb2sgdGhyb3VnaCB0aGUgZmlyc3Qgc2xpcCBrbm90LCBicmluZ2luZyB0aGUKICAgICAgc2Vjb25kIGxvb3AgeW91IG1hZGUgd2l0aCBpdC4gUmVwZWF0ICpuKiBtb3JlIHRpbWVzIHRvIGNvbXBsZXRlIHRoZSByb3cuCiAgICA8L2xpPgogIDwvdWw+CiAgPHA+CiAgICA8Yj5VU0VSOiA8L2I+ICgxMSBtb3JlIHN0aXRjaGVzIG1hZGUsIGFzIHRyYWNrZWQgYnkgY3JvY2hldCBob29rcyBjYW1lcmEpLgogIDwvcD4KICA8cD48Yj5VU0VSOiA8L2I+IEF3ZXNvbWUhIE5vdyB5b3UgYXJlIHJlYWR5IHRvIGxlYXJuIHRoZSBkb3VibGUgY3JvY2hldC48L3A+CiAgPGlmcmFtZQogICAgc3JjPSJodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9wcmVzZW50YXRpb24vZC9lLzJQQUNYLTF2VHJVd2JPSXJ4VGVoSlhocVJaMEFPbHp4UzRRV29nU2R3ZHR3MDN4MU9wcW9TMDYtTkhwZEZJN0ZfMDJGSVdIZm4zNFBpbU5taWF5ajNPL2VtYmVkP3N0YXJ0PXRydWUmbG9vcD10cnVlJmRlbGF5bXM9NTAwMCIKICAgIGZyYW1lYm9yZGVyPSIwIgogICAgd2lkdGg9IjEwMCUiCiAgICBoZWlnaHQ9IjMxNSIKICAgIGNsYXNzPSJwYi0xIgogICAgYWxsb3dmdWxsc2NyZWVuPSJ0cnVlIgogICAgbW96YWxsb3dmdWxsc2NyZWVuPSJ0cnVlIgogICAgd2Via2l0YWxsb3dmdWxsc2NyZWVuPSJ0cnVlIgogID48L2lmcmFtZT4KICA8cD4KICAgIDxiPkNCOjwvYj4gU3RhcnQgYnkgdGlnaHRseSBsb29waW5nIHRoZSB5YXJuIGFyb3VuZCB5b3VyIGNyb2NoZXQgaG9vay4KICA8L3A+CiAgPHVsPgogICAgPGxpPjxiPigxKSBVU0VSOjwvYj4gKGhhcyBtb3JlIHRoYW4gdHdvIGxvb3BzIG9uIHRoZSBob29rKS48L2xpPgogICAgPGxpPgogICAgICA8Yj5DQjo8L2I+TG9va3MgbGlrZSB5b3UgaGF2ZSB0b28gbWFueSBsb29wcyBvbiB5b3VyIGhvb2suIFRoZXJlIHNob3VsZAogICAgICBvbmx5IGJlIHR3byBsb29wcyBvbiB0aGUgaG9vay4KICAgIDwvbGk+CiAgICA8bGk+PGI+KDIpIFVTRVI6PC9iPiAoaGFzIG9ubHkgb25lIGxvb3Agb24gdGhlIGhvb2spLjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gRG9u4oCZdCBmb3JnZXQgdG8gbG9vcCB0aGUgeWFybiBhcm91bmQgdGhlIGNyb2NoZXQgaG9vay4gVGhlcmUKICAgICAgc2hvdWxkIGJlIHR3byBsb29wcyBvbiB0aGUgaG9vay4KICAgIDwvbGk+CiAgPC91bD4KICA8cD48Yj5VU0VSOjwvYj4gKGhhcyB0d28gbG9vcHMgb24gdGhlIGhvb2spLjwvcD4KICA8cD4KICAgIDxiPkNCOjwvYj4gTm93LCBmb3IgdGhlIGZpcnN0IHN0aXRjaCBvbmx5LCB0YWtlIHlvdXIgaG9vayBhbmQgcHV0IGl0CiAgICB0aHJvdWdoIHRoZSB0aGlyZCBjaGFpbiBhd2F5IGZyb20gdGhlIGhvb2suIE9uIHRoZSByZXN0IG9mIHlvdXIgc3RpdGNoZXMsCiAgICBpdCB3aWxsIGJlIHRoZSBjaGFpbiBuZXh0IHRvIHlvdXIgbGFzdCBzdGl0Y2guCiAgPC9wPgogIDx1bD4KICAgIDxsaT4KICAgICAgPGI+KDEpIFVTRVI6PC9iPiAod3JhcHMgc3RyaW5nIGFyb3VuZCwgaW5zdGVhZCBvZiBwdXR0aW5nIGl0IHRocm91Z2ggdGhlCiAgICAgIGNoYWluKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj5Mb29rcyBsaWtlIHlvdSB3cmFwcGVkIHRoZSB5YXJuIGluc3RlYWQgb2YgZ29pbmcgdGhyb3VnaCBhCiAgICAgIGNoYWluLgogICAgPC9saT4KICAgIDxsaT48Yj4oMikgVVNFUjo8L2I+KHB1dHMgdGhlIGhvb2sgaW4gdGhlIHdyb25nIGNoYWluKS48L2xpPgogICAgPGxpPgogICAgICA8Yj5DQjo8L2I+IExvb2tzIGxpa2UgeW91IGhpdCB0aGUgd3JvbmcgY2hhaW4uIFRoZXJlIHNob3VsZCBiZSB0d28KICAgICAgY2hhaW5zIGJldHdlZW4gdGhlIGZpcnN0IGFuZCB0aGlyZCBsb29wIG9uIHlvdXIgaG9vay4KICAgIDwvbGk+CiAgPC91bD4KICA8cD48Yj5VU0VSOjwvYj4gKGhhcyB0aHJlZSBsb29wcyBvbiB0aGUgaG9vaykuPC9wPgogIDxwPgogICAgPGI+Q0I6PC9iPiBOb3cgcHVsbCB0aGUgbG9vcCBjbG9zZXN0IHRvIHRoZSBob29rIG1vdXRoIHRocm91Z2ggdGhlIHR3bwogICAgbG9vcHMgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3QgbG9vcCBvbiB0aGUgaG9vay4KICA8L3A+CiAgPHVsPgogICAgPGxpPgogICAgICA8Yj4oMSkgVVNFUjo8L2I+IChwdWxscyB0aHJvdWdoIHRvbyBtYW55IGxvb3BzLCBsZXNzIHRoYW4gMiBsb29wcyBvbgogICAgICBob29rKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB5b3UgcHVsbGVkIHRocm91Z2ggdG9vIG1hbnkgbG9vcHMuIFRoZXJlIHNob3VsZCBiZQogICAgICAyIGxvb3BzIG9uIHRoZSBob29rIG5vdy4gUHVsbCBvdXQgdGhpcyBzdGl0Y2ggYW5kIHNheSDigJxyZXN0YXJ0IHN0aXRjaOKAnQogICAgICAod2hpY2gganVzdCBnb2VzIGJhY2sgdG8gdGhlIHRvcCBvZiA0LjIpCiAgICA8L2xpPgogICAgPGxpPgogICAgICA8Yj4oMikgVVNFUjo8L2I+KG9ubHkgcHVsbHMgdGhyb3VnaCBvbmUgbG9vcCwgdGhyZWUgbG9vcHMgb24gaG9vaykuCiAgICA8L2xpPgogICAgPGxpPgogICAgICA8Yj5DQjo8L2I+IExvb2tzIGxpa2UgeW91IGRpZG7igJl0IHB1bGwgdGhyb3VnaCBlbm91Z2guIFB1bGwgdGhyb3VnaCB0aGUKICAgICAgbG9vcCBzZWNvbmQgY2xvc2VzdCB0byB0aGUgaG9vay4gVGhlcmUgc2hvdWxkIGJlIHRocmVlIGxvb3BzIG9uIHRoZSBob29rCiAgICAgIG5vdy4KICAgIDwvbGk+CiAgPC91bD4KICA8cD48Yj5VU0VSOjwvYj4gKGhhcyB0d28gbG9vcHMgb24gdGhlIGhvb2spLjwvcD4KICA8cD48Yj5DQjo8L2I+IE9uY2UgYWdhaW4sIHRpZ2h0bHkgbG9vcCB0aGUgeWFybiBhcm91bmQgdGhlIGNyb2NoZXQgaG9vay48L3A+CiAgPHVsPgogICAgPGxpPjxiPigxKSBVU0VSOjwvYj4gKGhhcyBtb3JlIHRoYW4gdGhyZWUgbG9vcHMgb24gdGhlIGhvb2spLjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB5b3UgaGF2ZSB0b28gbWFueSBsb29wcyBvbiB5b3VyIGhvb2suIFRoZXJlIHNob3VsZAogICAgICBvbmx5IGJlIHRocmVlIGxvb3BzIG9uIHRoZSBob29rLgogICAgPC9saT4KICAgIDxsaT48Yj4oMikgVVNFUjo8L2I+KGhhcyBsZXNzIHRoYW4gdGhyZWUgbG9vcCBvbiB0aGUgaG9vaykuPC9saT4KICAgIDxsaT4KICAgICAgPGI+Q0I6PC9iPiBMb29rcyBsaWtlIHlvdSBkb27igJl0IGhhdmUgZW5vdWdoIGxvb3BzIG9uIHlvdXIgaG9vay4gVGhlcmUKICAgICAgc2hvdWxkIGJlIHRocmVlIGxvb3BzIG9uIHRoZSBob29rLgogICAgPC9saT4KICA8L3VsPgogIDxwPjxiPlVTRVI6PC9iPiAoaGFzIHRocmVlIGxvb3BzIG9uIHRoZSBob29rKS48L3A+CiAgPHA+CiAgICA8Yj5DQjo8L2I+IE5vdyBwdWxsIHRoZSBsb29wIGNsb3Nlc3QgdG8gdGhlIGhvb2sgbW91dGggdGhyb3VnaCB0aGUgb3RoZXIKICAgIHR3byBsb29wcyBvbiB0aGUgaG9vay4KICA8L3A+CiAgPHVsPgogICAgPGxpPjxiPigxKSBVU0VSOjwvYj4gKGhhcyBtb3JlIHRoYW4gdGhyZWUgbG9vcHMgb24gdGhlIGhvb2spLjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB5b3UgaGF2ZSB0b28gbWFueSBsb29wcyBvbiB5b3VyIGhvb2suIFRoZXJlIHNob3VsZAogICAgICBvbmx5IGJlIHRocmVlIGxvb3BzIG9uIHRoZSBob29rLgogICAgPC9saT4KICAgIDxsaT48Yj4oMikgVVNFUjo8L2I+KGhhcyBsZXNzIHRoYW4gdGhyZWUgbG9vcCBvbiB0aGUgaG9vaykuPC9saT4KICAgIDxsaT4KICAgICAgPGI+Q0I6PC9iPiBMb29rcyBsaWtlIHlvdSBkb27igJl0IGhhdmUgZW5vdWdoIGxvb3BzIG9uIHlvdXIgaG9vay4gVGhlcmUKICAgICAgc2hvdWxkIGJlIHRocmVlIGxvb3BzIG9uIHRoZSBob29rLgogICAgPC9saT4KICA8L3VsPgogIDxwPjxiPlVTRVI6PC9iPiAoaGFzIHRocmVlIGxvb3BzIG9uIHRoZSBob29rKS48L3A+CiAgPHA+PGI+Q0I6PC9iPiBPbmNlIGFnYWluLCB0aWdodGx5IGxvb3AgdGhlIHlhcm4gYXJvdW5kIHRoZSBjcm9jaGV0IGhvb2suPC9wPgogIDx1bD4KICAgIDxsaT48Yj4oMSkgVVNFUjo8L2I+IChoYXMgbW9yZSB0aGFuIGZvdXIgbG9vcHMgb24gdGhlIGhvb2spLjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB5b3UgaGF2ZSB0b28gbWFueSBsb29wcyBvbiB5b3VyIGhvb2suIFRoZXJlIHNob3VsZAogICAgICBvbmx5IGJlIGZvdXIgbG9vcHMgb24gdGhlIGhvb2suCiAgICA8L2xpPgogICAgPGxpPjxiPigyKSBVU0VSOjwvYj4oaGFzIGxlc3MgdGhhbiBmb3VyIGxvb3Agb24gdGhlIGhvb2spLjwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB5b3UgZG9u4oCZdCBoYXZlIGVub3VnaCBsb29wcyBvbiB5b3VyIGhvb2suIFRoZXJlCiAgICAgIHNob3VsZCBiZSBmb3VyIGxvb3BzIG9uIHRoZSBob29rLgogICAgPC9saT4KICA8L3VsPgogIDxwPjxiPlVTRVI6PC9iPiAoaGFzIGZvdXIgbG9vcHMgb24gdGhlIGhvb2spLjwvcD4KICA8cD4KICAgIDxiPkNCOjwvYj4gTm93IHB1bGwgdGhlIGxvb3AgY2xvc2VzdCB0byB0aGUgaG9vayBtb3V0aCB0aHJvdWdoIHRoZSB0d28KICAgIGxvb3BzIGJldHdlZW4gdGhlIGZpcnN0IGFuZCBsYXN0IGxvb3Agb24gdGhlIGhvb2suCiAgPC9wPgogIDx1bD4KICAgIDxsaT4KICAgICAgPGI+KDEpIFVTRVI6PC9iPiAocHVsbHMgdGhyb3VnaCB0b28gbWFueSBsb29wcywgbGVzcyB0aGFuIDIgbG9vcHMgb24KICAgICAgaG9vaykuCiAgICA8L2xpPgogICAgPGxpPgogICAgICA8Yj5DQjo8L2I+IExvb2tzIGxpa2UgeW91IHB1bGxlZCB0aHJvdWdoIHRvbyBtYW55IGxvb3BzLiBUaGVyZSBzaG91bGQgYmUKICAgICAgMiBsb29wcyBvbiB0aGUgaG9vayBub3cuIFB1bGwgb3V0IHRoaXMgc3RpdGNoIGFuZCBzYXkg4oCccmVzdGFydCBzdGl0Y2jigJ0KICAgICAgKHdoaWNoIGp1c3QgZ29lcyBiYWNrIHRvIHRoZSB0b3Agb2YgRG91YmxlIENyb2NoZXQpLgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGI+KDIpIFVTRVI6PC9iPiAob25seSBwdWxscyB0aHJvdWdoIG9uZSBsb29wLCB0aHJlZSBsb29wcyBvbiBob29rKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOiA8L2I+IExvb2tzIGxpa2UgeW91IGRpZG7igJl0IHB1bGwgdGhyb3VnaCBlbm91Z2guIFB1bGwgdGhyb3VnaCB0aGUKICAgICAgbG9vcCBzZWNvbmQgY2xvc2VzdCB0byB0aGUgaG9vay4gVGhlcmUgc2hvdWxkIGJlIHRocmVlIGxvb3BzIG9uIHRoZSBob29rCiAgICAgIG5vdy4KICAgIDwvbGk+CiAgPC91bD4KICA8cD48Yj5VU0VSOjwvYj4gKGhhcyB0d28gbG9vcHMgb24gdGhlIGhvb2spLjwvcD4KICA8cD48Yj5DQjo8L2I+IE9uY2UgYWdhaW4sIHRpZ2h0bHkgbG9vcCB0aGUgeWFybiBhcm91bmQgdGhlIGNyb2NoZXQgaG9vay48L3A+CiAgPHVsPgogICAgPGxpPgogICAgICA8Yj4oMSkgVVNFUjo8L2I+IChwdWxscyB0aHJvdWdoIHRvbyBtYW55IGxvb3BzLCBsZXNzIHRoYW4gMiBsb29wcyBvbgogICAgICBob29rKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB5b3UgcHVsbGVkIHRocm91Z2ggdG9vIG1hbnkgbG9vcHMuIFRoZXJlIHNob3VsZCBiZQogICAgICAyIGxvb3BzIG9uIHRoZSBob29rIG5vdy4gUHVsbCBvdXQgdGhpcyBzdGl0Y2ggYW5kIHNheSDigJxyZXN0YXJ0IHN0aXRjaOKAnQogICAgICAod2hpY2gganVzdCBnb2VzIGJhY2sgdG8gdGhlIHRvcCBvZiBEb3VibGUgQ3JvY2hldCkuCiAgICA8L2xpPgogICAgPGxpPgogICAgICA8Yj4oMikgVVNFUjo8L2I+IChvbmx5IHB1bGxzIHRocm91Z2ggb25lIGxvb3AsIHRocmVlIGxvb3BzIG9uIGhvb2spLgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGI+Q0I6IDwvYj4gTG9va3MgbGlrZSB5b3UgZGlkbuKAmXQgcHVsbCB0aHJvdWdoIGVub3VnaC4gUHVsbCB0aHJvdWdoIHRoZQogICAgICBsb29wIHNlY29uZCBjbG9zZXN0IHRvIHRoZSBob29rLiBUaGVyZSBzaG91bGQgYmUgdGhyZWUgbG9vcHMgb24gdGhlIGhvb2sKICAgICAgbm93LgogICAgPC9saT4KICA8L3VsPgogIDxwPjxiPlVTRVI6PC9iPiAoaGFzIHRocmVlIGxvb3BzIG9uIHRoZSBob29rKS48L3A+CiAgPHA+CiAgICA8Yj5DQjo8L2I+IE5vdyBwdWxsIHRoZSBsb29wIGNsb3Nlc3QgdG8gdGhlIGhvb2sgbW91dGggdGhyb3VnaCB0aGUgb3RoZXIKICAgIHR3byBsb29wcyBvbiB0aGUgaG9vay4KICA8L3A+CiAgPHVsPgogICAgPGxpPgogICAgICA8Yj4oMSkgVVNFUjo8L2I+IChwdWxscyB0aHJvdWdoIHRvbyBtYW55IGxvb3BzLCBsZXNzIHRoYW4gMSBsb29wcyBvbgogICAgICBob29rKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gTG9va3MgbGlrZSB5b3UgcHVsbGVkIHRocm91Z2ggdG9vIG1hbnkgbG9vcHMuIFRoZXJlIHNob3VsZCBiZQogICAgICAyIGxvb3BzIG9uIHRoZSBob29rIG5vdy4gUHVsbCBvdXQgdGhpcyBzdGl0Y2ggYW5kIHNheSDigJxyZXN0YXJ0IHN0aXRjaOKAnQogICAgICAod2hpY2gganVzdCBnb2VzIGJhY2sgdG8gdGhlIHRvcCBvZiBEb3VibGUgQ3JvY2hldCkuCiAgICA8L2xpPgogICAgPGxpPgogICAgICA8Yj4oMikgVVNFUjo8L2I+IChvbmx5IHB1bGxzIHRocm91Z2ggb25lIGxvb3AsIHR3byBsb29wcyBvbiBob29rKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOiA8L2I+IExvb2tzIGxpa2UgeW91IGRpZG7igJl0IHB1bGwgdGhyb3VnaCBlbm91Z2guIFB1bGwgdGhyb3VnaCB0aGUKICAgICAgbG9vcCBzZWNvbmQgY2xvc2VzdCB0byB0aGUgaG9vay4gVGhlcmUgc2hvdWxkIGJlIHRocmVlIGxvb3BzIG9uIHRoZSBob29rCiAgICAgIG5vdy4KICAgIDwvbGk+CiAgPC91bD4KICA8cD48Yj5VU0VSOjwvYj4gKGhhcyBvbmUgbG9vcHMgb24gdGhlIGhvb2spLjwvcD4KICA8cD4KICAgIDxiPkNCOjwvYj4gQ29uZ3JhdHVsYXRpb25zLiBZb3XigJl2ZSBjb21wbGV0ZWQgeW91ciBmaXJzdCBkb3VibGUgY3JvY2hldC4gVG8KICAgIGdldCBmYW1pbGlhciB3aXRoIHRoaXMgc3RpdGNoLCByZXBlYXQgaXQgOSBtb3JlIHRpbWVzIHVudGlsIHRoZSBlbmQgb2YKICAgIHlvdXIgcm93LiBSZW1lbWJlciwgdGhlIG5leHQgY2hhaW4gdGhhdCB5b3UgcHV0IHlvdXIgaG9vayB0aHJvdWdoIHNob3VsZAogICAgYmUgdGhlIG9uZSByaWdodCBuZXh0IHRvIHlvdXIgbGFzdCBzdGl0Y2guIFRvIGhlYXIgdGhlIHN0aXRjaCBpbnN0cnVjdGlvbnMKICAgIGFnYWluIHNheSDigJxvbmUgbW9yZSB0aW1lLuKAnQogIDwvcD4KICA8dWw+CiAgICA8bGk+CiAgICAgIDxiPigxKSBVU0VSOjwvYj4gT25lIG1vcmUgdGltZS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOjwvYj4gVGlnaHRseSBsb29wIHRoZSB5YXJuIGFyb3VuZCB5b3VyIGNyb2NoZXQgaG9vay4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPlVTRVI6PC9iPiAoaGFzIHR3byBsb29wcyBvbiB0aGUgaG9vaykuCiAgICA8L2xpPgogICAgPGxpPgogICAgICA8Yj5DQjogPC9iPiBOb3csIHRha2UgeW91ciBob29rIGFuZCBwdXQgaXQgdGhyb3VnaCB0aGUgY2hhaW4gY2xvc2VzdCB0byB0aGUgbGFzdCBzdGl0Y2ggeW91IG1hZGUuCiAgICA8L2xpPgogICAgIDxsaT4KICAgICAgPGI+VVNFUjo8L2I+IChoYXMgdGhyZWUgbG9vcHMgb24gdGhlIGhvb2spLgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGI+Q0I6IDwvYj4gT25jZSBhZ2FpbiwgdGlnaHRseSBsb29wIHRoZSB5YXJuIGFyb3VuZCB0aGUgY3JvY2hldCBob29rLgogICAgPC9saT4KICAgICA8bGk+CiAgICAgIDxiPlVTRVI6PC9iPiAoaGFzIGZvdXIgbG9vcHMgb24gdGhlIGhvb2spLgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGI+Q0I6IDwvYj4gTm93IHB1bGwgdGhlIGxvb3AgY2xvc2VzdCB0byB0aGUgaG9vayBtb3V0aCB0aHJvdWdoIHRoZSB0d28gbG9vcHMgYmV0d2VlbiB0aGUgZmlyc3QgYW5kIGxhc3QgbG9vcCBvbiB0aGUgaG9vay4KICAgIDwvbGk+CiAgICAgPGxpPgogICAgICA8Yj5VU0VSOjwvYj4gKGhhcyB0d28gbG9vcHMgb24gdGhlIGhvb2spLgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGI+Q0I6IDwvYj4gT25jZSBhZ2FpbiwgdGlnaHRseSBsb29wIHRoZSB5YXJuIGFyb3VuZCB0aGUgY3JvY2hldCBob29rLgogICAgPC9saT4KICAgICA8bGk+CiAgICAgIDxiPlVTRVI6PC9iPiAoaGFzIHRocmVlIGxvb3BzIG9uIHRoZSBob29rKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOiA8L2I+IE5vdyBwdWxsIHRoZSBsb29wIGNsb3Nlc3QgdG8gdGhlIGhvb2sgbW91dGggdGhyb3VnaCB0aGUgb3RoZXIgdHdvIGxvb3BzIG9uIHRoZSBob29rLgogICAgPC9saT4KICAgIDxsaT4KICAgICAgPGI+VVNFUjo8L2I+IChoYXMgb25lIGxvb3BzIG9uIHRoZSBob29rKS4KICAgIDwvbGk+CiAgICA8bGk+CiAgICAgIDxiPkNCOiA8L2I+IENvbmdyYXR1bGF0aW9ucy4gWW914oCZdmUgY29tcGxldGVkIHlvdXIgWHRoIGRvdWJsZSBjcm9jaGV0LiBUbyBnZXQgZmFtaWxpYXIgd2l0aCB0aGlzIHN0aXRjaC4gVG8gaGVhciB0aGUgc3RpdGNoIGluc3RydWN0aW9ucyBhZ2FpbiBzYXkg4oCcb25lIG1vcmUgdGltZS4iCiAgICA8L2xpPgogIDwvdWw+CiAgPHA+PGI+VVNFUjo8L2I+IChyZWFjaGVzIDkgbW9yZSBkb3VibGUgY3JvY2hldHMpLjwvcD4gCiAgPHA+PGI+Q0I6PC9iPiBBd2Vzb21lISBZb3UgaGF2ZSBsZWFybmVkIHRoZSBkb3VibGUgY3JvY2hldC4gWW91IGFyZSBub3cgYXQgdGhlIHBvaW50IHdoZXJlIHlvdSBjYW4gc3RhcnQgbWFraW5nIGNyb2NoZXQgaXRlbXMhPC9wPgogIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgIDxhCiAgICAgIGhyZWY9Imh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMXN3LXBZMldiSTNWQ2RRcWtfTWs1TVkxSVlUMHlVUXBUcEg3ZUhhbUNseGsvZWRpdD91c3A9c2hhcmluZyIKICAgICAgdGFyZ2V0PSJfdGFyZ2V0IgogICAgICA+WW91IGNhbiB2aWV3IHRoZSBkb2N1bWVudCB3aXRoIGFsbCB0aGUgVlVJIHNjcmlwdHMgaGVyZS48L2EKICAgID4KICA8L2Rpdj4KICA8Yj5EZW1vPC9iPgogIDxwPgogICAgVGhlIGZpbmFsIGFzcGVjdCBvZiBDcm9jaGV0IEJ1ZGR5IHdhcyB0aGUgZGVtbyB2aWRlbywgd2hpY2ggc2hvd2Nhc2VzIHRoZQogICAgVlVJIGFuZCBzdGl0Y2ggdHJhY2tpbmcgY2FtZXJhIHdvcmtpbmcgdG9nZXRoZXIgdG8gZGVsaXZlciBhbiBlYXN5IGFuZAogICAgc2VhbWxlc3Mgd2F5IHRvIGxlYXJuIGNyb2NoZXQhCiAgPC9wPgogIDxpZnJhbWUKICAgIHdpZHRoPSIxMDAlIgogICAgaGVpZ2h0PSIzMTUiCiAgICBzcmM9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL3B2VUFxcDNsd2o0IgogICAgdGl0bGU9IllvdVR1YmUgdmlkZW8gcGxheWVyIgogICAgZnJhbWVib3JkZXI9IjAiCiAgICBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIKICAgIGFsbG93ZnVsbHNjcmVlbgogID48L2lmcmFtZT4KICA8Yj5FdmFsdWF0aW9uPC9iPgogIDxwPgogICAgV2hlbiBJIHdhcyBpbml0aWFsbHkgdGhpbmtpbmcgYWJvdXQgTGVhcm5pbmcgd2l0aCBDcm9jaGV0IEJ1ZGR5LCBJIHdhbnRlZAogICAgdG8gaW5jbHVkZSBhIEdyYXBoaWNhbCBVc2VyIEludGVyZmFjZSAoR1VJKSB3aXRoIHRoZSBWVUkgc28gdGhhdCB0aGUgdXNlcgogICAgd291bGQgYmUgYWJsZSB0byBzZWUgd2hhdCB0aGV5IGFyZSBzdXBwb3NlZCB0byBiZSBkb2luZywgaW4gYWRkaXRpb24gdG8KICAgIGhlYXJpbmcgaXQgZnJvbSB0aGUgVlVJLCB3aGlsZSB0aGV5IGFyZSBkb2luZyBpdC4gQnV0LCBJIGFsc28gd2FudGVkIHRvCiAgICBzZWUgaG93IGZlYXNpYmxlIGl0IHdvdWxkIGJlIHRvIGxlYXJuIENyb2NoZXQgYnkgdm9pY2UgYWxvbmUuIFRvIHRlc3QgdGhlCiAgICBWVUnigJlzIGVmZmVjdGl2ZW5lc3Mgb24gaXTigJlzIG93biwgSSByYW4gYSBWVUkgdXNhYmlsaXR5IHRlc3Qgd2l0aCBteSBtb20KICAgIG92ZXIgWm9vbS4gQmVjYXVzZSB0aGUgQ3JvY2hldCBIb29rIHRoYXQgbXkgbW9tIHdhcyB1c2luZyB3YXMgcG9vcmx5IG1hZGUKICAgIGFuZCBhbG1vc3QgaW1wb3NzaWJsZSB0byB1c2UsIHdlIGRlY2lkZWQgdG8gc2tpcCBvdmVyIHRoZSB0cmlwbGUgY3JvY2hldAogICAgc2VjdGlvbiBvZiB0aGUgdHV0b3JpYWwgc2NyaXB0LgogIDwvcD4KICA8aWZyYW1lCiAgICB3aWR0aD0iMTAwJSIKICAgIGhlaWdodD0iMzE1IgogICAgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC8wMmpmLUsteFFaUSIKICAgIHRpdGxlPSJZb3VUdWJlIHZpZGVvIHBsYXllciIKICAgIGZyYW1lYm9yZGVyPSIwIgogICAgYWxsb3c9ImFjY2VsZXJvbWV0ZXI7IGF1dG9wbGF5OyBjbGlwYm9hcmQtd3JpdGU7IGVuY3J5cHRlZC1tZWRpYTsgZ3lyb3Njb3BlOyBwaWN0dXJlLWluLXBpY3R1cmUiCiAgICBhbGxvd2Z1bGxzY3JlZW4KICA+PC9pZnJhbWU+CiAgPHA+CiAgICBUaGUgbWFpbiBmaW5kaW5ncyBmcm9tIHRoaXMgZXZhbHVhdGlvbiB3YXMgdGhhdCBrbm93aW5nIHRoZSBudW1iZXIgb2YKICAgIHN0aXRjaGVzIHRoYXQgbmVlZCB0byBiZSBvbiB0aGUgaG9vayBpcyBpbXBvcnRhbnQgaW5mb3JtYXRpb24gZm9yIHRoZQogICAgdXNlciwgd2hlbiB0aGV5IGFyZSBsZWFybmluZyBhbnkgY3JvY2hldCBzdGl0Y2gsIGV2ZW4gaWYgQ3JvY2hldCBCdWRkeSBpcwogICAgdHJhY2tpbmcgaXQgZm9yIHRoZW0uIEl0IHNlZW1zIHRvIGJlIGNyaXRpY2FsIHRvIHRoZSBsZWFybmluZyBwcm9jZXNzIGZvcgogICAgdGhlIHVzZXIgdG8gZWl0aGVyIGhhdmUgYSB2aWV3IG9mIHdoYXQgdGhlIHN0YXRlIG9mIHRoZSB5YXJuIHNob3VsZCBsb29rCiAgICBsaWtlIGFzIGEgcGljdHVyZSwgb3IgdG8ga25vdyB0aGUgbnVtYmVyIG9mIGxvb3BzIHRoYXQgc2hvdWxkIGJlIG9uIHRoZQogICAgaG9vayBhdCBhbnkgZ2l2ZW4gdGltZS4KICA8L3A+CiAgPHA+CiAgICBJdCBhbHNvIGJlY2FtZSBpbmNyZWRpYmx5IGFwcGFyZW50IHRoYXQgaW4gYW55IGZ1dHVyZSBpdGVyYXRpb25zIG9mCiAgICBDcm9jaGV0IEJ1ZGR5IGl0IGlzIGltcG9ydGFudCB0byBvbmx5IHVzZSB0aGUKICAgIDxhCiAgICAgIGhyZWY9Imh0dHBzOi8vd3d3LmFtYXpvbi5jb20vU3VzYW4tQmF0ZXMtU2lsdmFsdW1lLUNyb2NoZXQtUG91Y2gvZHAvQjAwMFhaWUlTTSIKICAgICAgdGFyZ2V0PSJfYmxhbmsiCiAgICAgID5TdXNhbiBCYXRlcyBIb29rczwvYQogICAgPiwgd2hpY2ggYXJlIHRoZSBtb3N0IHdlbGwgbG92ZWQgaG9va3MgaW4gdGhlIHdvcmxkIG9mIGNyb2NoZXQuIFRoZSBvdGhlcgogICAgZ2VuZXJpYyBjcm9jaGV0IGhvb2tzIGp1c3QgZGlkIG5vdCB3b3JrIHZlcnkgZWZmZWN0aXZlbHksIGFuZCBtYWRlIGl0CiAgICBpbmNyZWRpYmx5IGRpZmZpY3VsdCBmb3IgbXkgbW90aGVyIHRvIGV2ZW4gYXR0ZW1wdCB0aGUgc3RlcHMgQ3JvY2hldCBCdWRkeQogICAgd2FzIGdpdmluZyBoZXIuCiAgPC9wPgoKICA8Yj5BbmFseXNpczwvYj4KICA8cD4KICAgIEFsdGhvdWdoIHRoZSBhbmFsb2cgcHJvdG90eXBlIHNob3dzIGhvdyBlZmZlY3RpdmUgdGhlIHZhbnRhZ2UgcG9pbnQgb2YKICAgIGhhdmluZyBhIGNhbWVyYSBlbWJlZGRlZCBpbiB0aGUgaG9vayBvZiBDcm9jaGV0IEJ1ZGR54oCZcyBoYW5kbGUgaXMsIHRoZSB3ZWIKICAgIGNhbWVyYSB0aGF0IEkgdXNlZCBmb3IgdGhpcyBhbmFsb2cgcHJvdG90eXBlIHByb3ZlZCB0byBiZSBidWxreSBhbmQgaGFkIGEKICAgIHZlcnkgbmFycm93IHZpZXcgcG9pbnQuIFRoZSBidWxreSBjbGlwIG9uIHRoZSBjYW1lcmEgbWFkZSBpdCB2ZXJ5CiAgICBkaWZmaWN1bHQgdG8gaG9sZCB0aGUgYW5hbG9nIHByb3RvdHlwZSwgd2hpbGUgdGhlIG5hcnJvdyBjYW1lcmEgYW5nbGUgbWFkZQogICAgaXQgc28gdGhhdCB0aGVyZSBjb3VsZCBvbmx5IGJlIGEgdmVyeSBzbWFsbCBwb3J0aW9uIG9mIHRoZSBob29rIG9wZW4gZm9yCiAgICB5YXJuIGluIG9yZGVyIGZvciB0aGUgY2FtZXJhIHRvIHZpZXcgYWxsIHRoZSBsb29wcyBvbiB0aGUgaG9vay4KICA8L3A+CiAgPHA+CiAgICBUaGUgbmV4dCBzdGVwcyBpbiBmdXJ0aGVyaW5nIHRoZSBDcm9jaGV0IEJ1ZGR5IGFuYWxvZyBkZXNpZ24gd291bGQgYmUgdGhlCiAgICB1c2Ugb2YgYSBzbWFsbGVyIGNhbWVyYSB3aXRoIGEgd2lkZXIgbGVucyB0aGF0IGRvZXMgbm90IGludGVyZmVyZSB3aXRoIHRoZQogICAgcXVhbGl0eSBhbmQgY29tZm9ydCBvZiB0aGUgaGFuZGxlIGdyaXAgb2YgQ3JvY2hldCBCdWRkeS4gSXQgd291bGQgYmUKICAgIG1vdW50ZWQgaW4gc3VjaCBhIHdheSB3aGVyZSBpdCB3b3VsZCBiZSBhbmdsZWQgdG8gc2VlIGEgYmlnZ2VyIHBvcnRpb24gb2YKICAgIHRoZSBjcm9jaGV0IGhvb2suCiAgPC9wPgogIDxwPgogICAgVGhlIFZVSSBjb21iaW5lZCB3aXRoIHN0aXRjaCB0cmFja2luZyBhbHNvIGhvbGQgcHJvbWlzZS4gRnJvbSB0aGUgZGVtbwogICAgdmlkZW8sIGl0IGlzIGNsZWFyIHRoYXQgaGF2aW5nIGxpdmUgZmVlZGJhY2sgZnJvbSBDcm9jaGV0IEJ1ZGR5LCB3aXRoCiAgICBsaW1pdGVkIHZvY2FsIGludGVyYWN0aW9ucywgY291bGQgYmUgYW4gZWFzeSBhbmQgZnVuIHdheSB0byBsZWFybiBjcm9jaGV0LgogICAgVGhlIGJpZ2dlc3QgY2hhbmdlIHRvIHRoZSBWVUkgd291bGQgYmUgdG8gYWRkIGFuIGFkZGl0aW9uYWwgc2VudGVuY2UgdG8KICAgIGVhY2ggb2YgdGhlIGxpbmVzIHRoYXQgdGhlIFZVSSBnaXZlcywgc3RhdGluZyB0aGUgbnVtYmVyIG9mIGxvb3BzIHRoYXQKICAgIHNob3VsZCBiZSBvbiB0aGUgaG9vayBhdCBhbnkgZ2l2ZW4gdGltZS4gQWx0aG91Z2ggSSB0aG91Z2h0IGhhdmluZyBDcm9jaGV0CiAgICBCdWRkeeKAmXMgc3RpdGNoIHRyYWNraW5nIHdvdWxkIGJlIGVub3VnaCB0byBoZWxwIHRoZSB1c2VyLCBteSB0ZXN0aW5nIGl0CiAgICBwcm92ZWQgdGhhdCB0aGUgdXNlciB3b3VsZCBsaWtlIHRvIGtub3cgdGhlIG51bWJlciBvZiBsb29wcyB0aGF0IHNob3VsZCBiZQogICAgb24gdGhlIGhvb2suIEhhdmluZyB0aGUgVlVJIHN0YXRlIHRoZSBudW1iZXIgb2YgbG9vcHMgdGhlcmUgc2hvdWxkIGJlCiAgICBwcm92ZXMgZWZmZWN0aXZlIHRoZW4gaXQgd291bGQgYmUgYWJsZSB0byBiZSBkaXN0cmlidXRlZCB3aXRob3V0CiAgICBjb25uZWN0aW9uIHRvIGFuIGFwcC4gRnV0dXJlIGl0ZXJhdGlvbnMgb2YgQ3JvY2hldCBCdWRkeSB3b3VsZCBhbHNvCiAgICBpbnN0cnVjdGlvbnMgZm9yIG1vcmUgc3RpdGNoZXMgdGhhbiB0aGUgdGhyZWUgc3RpdGNoZXMgdXNlZCBmb3IgdGhpcwogICAgcHJvdG90eXBlLiBJIHdvdWxkIGFsc28gY2hhbmdlIHRoZSBzY3JpcHQgdG8gcG9zc2libHkgaW5jbHVkZSBtb3JlIGNyb2NoZXQKICAgIHNwZWNpZmljIHRlcm1zLiBXaGVuIEkgd2FzIHdyaXRpbmcgbXkgc2NyaXB0cyB0aGlzIHRpbWUgYXJvdW5kIEkgd2FzCiAgICB0cnlpbmcgdG8gdXNlIHdvcmRzIHRoYXQgbWF5YmUgd2VyZSBtb3JlIGRlc2NyaXB0aXZlLCBidXQgZ2l2ZW4gbXkgdXNlcgogICAgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBJIGJlbGlldmUgaGF2aW5nIHRoZSBtb3JlIHNwZWNpZmljIHRlcm1zIHdvdWxkIGJlCiAgICBtb3JlIGVmZmVjdGl2ZSwgZXNwZWNpYWxseSBpZiB0aGVyZSBpcyBhIHdheSBmb3IgdXNlcnMgdG8gaW50ZXJhY3Qgd2l0aAogICAgQ3JvY2hldCBCdWRkeSB0byBmaW5kIG91dCB0aGUgZGVmaW5pdGlvbnMgb2YgdGhlIG1vcmUgbmljaGUgY3JvY2hldCB0ZXJtcwogICAgaWYgdGhleSBhcmVu4oCZdCBvYnZpb3VzIGVub3VnaC4KICA8L3A+CiAgPHA+CiAgICBUaGUgbmV4dCBzdGVwIGZvciBDcm9jaGV0IEJ1ZGR54oCZcyBsZWFybmluZyBhbmQgZWR1Y2F0aW9uYWwgc3lzdGVtcyB3b3VsZAogICAgYmUgdGhlIGNyZWF0aW5nIG9mIGEgbW9iaWxlIGFwcGxpY2F0aW9uIHdoaWNoIHdvdWxkIGludGVncmF0ZSBhIEdVSSBpbnRvCiAgICB0aGUgcHJlLWV4aXN0aW5nIFZVSSBhbmQgc3RpdGNoIHRyYWNraW5nIGNhcGFiaWxpdGllcyBvZiBDcm9jaGV0IEJ1ZGR5LgogICAgVGhpcyB3b3VsZCBlbmFibGUgdXNlcnMgdG8gaGF2ZSBib3RoIGF1ZGlvIGFuZCB2aXN1YWwgaW5zdHJ1Y3Rpb25zIGluCiAgICB0aGVpciByZWFsIHRpbWUgZmVlZGJhY2suIFRoaXMgYXBwbGljYXRpb24gaW50ZXJmYWNlIHdvdWxkIGFsc28gbWFrZSBpdAogICAgcG9zc2libGUgdCBnZXQgcmlkIG9mIHRoZSBhdWRpbyBmZWVkYmFjayBlbnRpcmVseSBhbmQgZm9jdXMgb24gd3JpdHRlbiBvcgogICAgcGljdHVyZSBpbnN0cnVjdGlvbnMgd2hpY2ggdXNlIG9uIHNjcmVlbiBwcm9tcHRzIGFuZCBzdGl0Y2ggdHJhY2tpbmcgdG8KICAgIHByb3ZpZGUgbGl2ZSBmZWVkYmFjayBldmVuIHdoZW4gdGhlIHVzZXIgZG9lc27igJl0IHdhbnQgYXVkaW8uCiAgPC9wPgogICA8ZGl2IGNsYXNzPSJkLWZsZXggZmxleC1jb2x1bW4gZmxleC1tZC1yb3cgdGV4dC1jZW50ZXIganVzdGlmeS1jb250ZW50LWJldHdlZW4iPgogICAgICA8cm91dGVyLWxpbmsgdG89Ii9jb21tb24tZ3JvdW5kIj48Yj5QcmV2aW91cyBQcm9qZWN0OiA8L2I+IENvbW1vbiBHcm91bmQ8L3JvdXRlci1saW5rPgogICAgICA8cm91dGVyLWxpbmsgdG89Ii9uYXR1cmUiPjxiPk5leHQgUHJvamVjdDogPC9iPkFjY2VzcyB0byBOYXR1cmUgYW5kIENyaW1lPC9yb3V0ZXItbGluaz4KICAgICAgCiAgICAgIDwvZGl2Pgo8L1BvcnRmb2xpb1BpZWNlPgo="},null]}
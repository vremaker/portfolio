{"remainingRequest":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\vrema\\Desktop\\portfolio\\src\\views\\portfolio\\fin-lit.vue?vue&type=template&id=37766264&scoped=true&","dependencies":[{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\src\\views\\portfolio\\fin-lit.vue","mtime":1657939546879},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657917023430},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1657917032116},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1657917023430},{"path":"C:\\Users\\vrema\\Desktop\\portfolio\\node_modules\\vue-loader\\lib\\index.js","mtime":1657917032115}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}